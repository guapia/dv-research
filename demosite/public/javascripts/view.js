var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var config;
        (function (config) {
            var FillStyle = android.graphics.FillStyle;
            var StrokeStyle = android.graphics.StrokeStyle;
            var Gravity = android.graphics.Gravity;
            var Util = android.graphics.Util;
            var ViewConfig = /** @class */ (function () {
                function ViewConfig(option) {
                    if (option.background) {
                        if (option.background instanceof Object) {
                            this._background = new FillStyle();
                            if (option.background.fill instanceof Object) {
                                //TO DO
                            }
                            if (option.background.shadow instanceof Object) {
                                //TO DO
                            }
                        }
                        else {
                            this._background = option.background;
                        }
                    }
                    if (option.stroke) {
                        if (option.stroke) {
                            this._stroke = new StrokeStyle(option.stroke.width, option.stroke.color, option.stroke.dash, option.stroke.dashoffset);
                        }
                    }
                    this.gravity = option.gravity;
                }
                Object.defineProperty(ViewConfig.prototype, "background", {
                    get: function () {
                        return this._background;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewConfig.prototype, "stroke", {
                    get: function () {
                        return this._stroke;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewConfig.prototype, "gravity", {
                    get: function () {
                        return this._gravity;
                    },
                    set: function (val) {
                        if (val != null && val != this._gravity) {
                            this._gravity = Util.asEnum(val, Gravity, null);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                return ViewConfig;
            }());
            config.ViewConfig = ViewConfig;
        })(config = test.config || (test.config = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var config;
        (function (config) {
            var cartesian;
            (function (cartesian) {
                var Util = android.graphics.Util;
                var Config = /** @class */ (function () {
                    function Config(option) {
                        var _this = this;
                        if (option.axis != null) {
                            this._axis = [];
                            option.axis.forEach(function (element) {
                                _this._axis.push(new AxisConfig(element));
                            });
                        }
                        if (option.legend != null) {
                            this._legend = [];
                            option.legend.forEach(function (element) {
                                _this._legend.push(new LegendConfig(element));
                            });
                        }
                        if (option.plot != null) {
                            this._plot = new config.ViewConfig(option.plot);
                        }
                    }
                    Object.defineProperty(Config.prototype, "axis", {
                        get: function () {
                            return this._axis;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Config.prototype, "legend", {
                        get: function () {
                            return this._legend;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(Config.prototype, "plot", {
                        get: function () {
                            return this._plot;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return Config;
                }());
                cartesian.Config = Config;
                var AxisConfig = /** @class */ (function (_super) {
                    __extends(AxisConfig, _super);
                    function AxisConfig(option) {
                        return _super.call(this, option) || this;
                    }
                    return AxisConfig;
                }(config.ViewConfig));
                cartesian.AxisConfig = AxisConfig;
                var LegendConfig = /** @class */ (function (_super) {
                    __extends(LegendConfig, _super);
                    function LegendConfig(option) {
                        var _this = _super.call(this, option) || this;
                        _this.type = option.type;
                        return _this;
                    }
                    Object.defineProperty(LegendConfig.prototype, "type", {
                        get: function () {
                            return this.__type;
                        },
                        set: function (val) {
                            if (val != null && val != this.__type) {
                                this.__type = Util.asEnum(val, android.test.LegendType, null);
                            }
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return LegendConfig;
                }(config.ViewConfig));
                cartesian.LegendConfig = LegendConfig;
            })(cartesian = config.cartesian || (config.cartesian = {}));
        })(config = test.config || (test.config = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        test.EventMessage = 'EventMessage';
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var MessageCenter = /** @class */ (function () {
            function MessageCenter() {
            }
            return MessageCenter;
        }());
        test.MessageCenter = MessageCenter;
        var Action = /** @class */ (function () {
            function Action() {
            }
            return Action;
        }());
        test.Action = Action;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="./../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Util = android.graphics.Util;
        var Utility = /** @class */ (function () {
            function Utility() {
            }
            Utility.max = function (arr) {
                var vs = [];
                for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                    var v = arr_1[_i];
                    if (!isNaN(v) && v != null) {
                        vs.push(v);
                    }
                }
                return Math.max.apply(this, vs);
            };
            Utility.min = function (arr) {
                var vs = [];
                for (var _i = 0, arr_2 = arr; _i < arr_2.length; _i++) {
                    var v = arr_2[_i];
                    if (!isNaN(v) && v != null) {
                        vs.push(v);
                    }
                }
                return Math.min.apply(this, vs);
            };
            Utility.iskey = function (key) {
                return key !== undefined && key !== null && typeof (key) == 'string' && key[0] != '_';
            };
            Utility.checkArrayType = function (arr) {
                android.Debug.assert(arr != null);
                android.Debug.assert(arr.length > 0);
                var type = typeof arr[0];
                for (var _i = 0, arr_3 = arr; _i < arr_3.length; _i++) {
                    var v = arr_3[_i];
                    if (type != typeof v) {
                        return false;
                    }
                }
                return true;
            };
            Utility.getType = function (v) {
                var datatype = null;
                if (v instanceof Array) {
                    android.Debug.assert(v != null);
                    android.Debug.assert(v.length > 0);
                    datatype = test.DataType.Array;
                    if (Utility.checkArrayType(v)) {
                        return Utility.getType(v[0]);
                    }
                }
                else if (typeof v == 'number') {
                    datatype = test.DataType.Number;
                }
                else if (typeof v == 'string') {
                    datatype = test.DataType.String;
                }
                else if (typeof v == 'boolean') {
                    datatype = test.DataType.Boolean;
                }
                else {
                    android.Debug.assert(true, "Value can't be Object except Array");
                }
                return datatype;
            };
            Utility.mergeScale = function (scaleA, scaleB, force) {
                if (force === void 0) { force = false; }
                var scale = null;
                if (scaleA.id == scaleB.id) {
                    if (scaleA instanceof test.OrdinalScale && scaleB instanceof test.OrdinalScale) {
                        var domainunions = _.union(scaleA.domains, scaleB.domains);
                        if (force || (scaleA.domains.length / domainunions.length > 0.5 && scaleB.domains.length / domainunions.length > 0.5)) {
                            scale = scaleA.clone();
                            scale.domain(domainunions);
                        }
                    }
                    else if ((scaleA instanceof test.LinearScale && scaleB instanceof test.LinearScale)) {
                        var min = Math.min(scaleA.min, scaleB.min);
                        var max = Math.max(scaleA.max, scaleB.max);
                        var rate1 = Math.abs(max - min) / (Math.abs(scaleA.max - scaleA.min));
                        var rate2 = Math.abs(max - min) / (Math.abs(scaleB.max - scaleB.min));
                        if (force || (rate1 < 10 && rate2 < 10)) {
                            scale = scaleA.clone();
                            scale.domain([min, max]);
                        }
                    }
                    else if (scaleA instanceof test.LogScale && scaleB instanceof test.LogScale) {
                        if (scaleA.logBase == scaleB.logBase) {
                            scale = scaleA.clone();
                            scale.domain([Math.min(scaleA.min, scaleB.min), Math.max(scaleA.max, scaleB.max)]);
                        }
                    }
                }
                return scale;
            };
            Utility.isMixedRotatedRect = function (r1, r2) {
                var ismixed = false;
                if (r1.angle == r2.angle) {
                    for (var _i = 0, _a = r1.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (Util.IsPointInPolygon(pt, r2.points)) {
                            ismixed = true;
                            break;
                        }
                    }
                }
                else {
                    if (Math.sqrt(Math.pow(r1.center.x - r2.center.x, 2) + Math.pow(r1.center.y - r2.center.y, 2)) <= r1.raidius + r2.raidius) {
                        ismixed = true;
                    }
                }
                return ismixed;
            };
            return Utility;
        }());
        test.Utility = Utility;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var ColorUtils = /** @class */ (function () {
            function ColorUtils() {
            }
            // ["#FFFFF0", "#FFFFE0", "#FFFF00 ", "#FFFAFA", "#FFFAF0", "#FFFACD", "#FFF8DC ", "#FFF68F", "#FFF5EE", "#FFF0F5", "#FFEFDB ", "#FFEFD5", "#FFEC8B", "#FFEBCD", "#FFE7BA ", "#FFE4E1", "#FFE4C4", "#FFE4B5", "#FFE1FF ", "#FFDEAD", "#FFDAB9", "#FFD700", "#FFD39B ", "#FFC1C1", "#FFC125", "#FFC0CB", "#FFBBFF ", "#FFB90F", "#FFB6C1", "#FFB5C5", "#FFAEB9 ", "#FFA54F", "#FFA500", "#FFA07A", "#FF8C69 ", "#FF8C00", "#FF83FA", "#FF82AB", "#FF8247 ", "#FF7F50", "#FF7F24", "#FF7F00", "#FF7256 ", "#FF6EB4", "#FF6A6A", "#FF69B4", "#FF6347 ", "#FF4500", "#FF4040", "#FF3E96", "#FF34B3 ", "#FF3030", "#FF1493", "#FF00FF", "#FF0000 ", "#FDF5E6", "#FCFCFC", "#FAFAFA", "#FAFAD2 ", "#FAF0E6", "#FAEBD7", "#FA8072", "#F8F8FF ", "#F7F7F7", "#F5FFFA", "#F5F5F5", "#F5F5DC ", "#F5DEB3", "#F4F4F4", "#F4A460", "#F2F2F2 ", "#F0FFFF", "#F0FFF0", "#F0F8FF", "#F0F0F0 ", "#F0E68C", "#F08080", "#EEEEE0", "#EEEED1 ", "#EEEE00", "#EEE9E9", "#EEE9BF", "#EEE8CD ", "#EEE8AA", "#EEE685", "#EEE5DE", "#EEE0E5 ", "#EEDFCC", "#EEDC82", "#EED8AE", "#EED5D2 ", "#EED5B7", "#EED2EE", "#EECFA1", "#EECBAD ", "#EEC900", "#EEC591", "#EEB4B4", "#EEB422 ", "#EEAEEE", "#EEAD0E", "#EEA9B8", "#EEA2AD ", "#EE9A49", "#EE9A00", "#EE9572", "#EE82EE ", "#EE8262", "#EE7AE9", "#EE799F", "#EE7942 ", "#EE7621", "#EE7600", "#EE6AA7", "#EE6A50 ", "#EE6363", "#EE5C42", "#EE4000", "#EE3B3B ", "#EE3A8C", "#EE30A7", "#EE2C2C", "#EE1289 ", "#EE00EE", "#EE0000", "#EDEDED", "#EBEBEB ", "#EAEAEA", "#E9967A", "#E8E8E8", "#E6E6FA ", "#E5E5E5", "#E3E3E3", "#E0FFFF", "#E0EEEE ", "#E0EEE0", "#E0E0E0", "#E066FF", "#DEDEDE ", "#DEB887", "#DDA0DD", "#DCDCDC", "#DC143C ", "#DBDBDB", "#DB7093", "#DAA520", "#DA70D6 ", "#D9D9D9", "#D8BFD8", "#D6D6D6", "#D4D4D4 ", "#D3D3D3", "#D2B48C", "#D2691E", "#D1EEEE ", "#D1D1D1", "#D15FEE", "#D02090", "#CFCFCF ", "#CDCDC1", "#CDCDB4", "#CDCD00", "#CDC9C9 ", "#CDC9A5", "#CDC8B1", "#CDC673", "#CDC5BF ", "#CDC1C5", "#CDC0B0", "#CDBE70", "#CDBA96 ", "#CDB7B5", "#CDB79E", "#CDB5CD", "#CDB38B ", "#CDAF95", "#CDAD00", "#CDAA7D", "#CD9B9B ", "#CD9B1D", "#CD96CD", "#CD950C", "#CD919E ", "#CD8C95", "#CD853F", "#CD8500", "#CD8162 ", "#CD7054", "#CD69C9", "#CD6889", "#CD6839 ", "#CD661D", "#CD6600", "#CD6090", "#CD5C5C ", "#CD5B45", "#CD5555", "#CD4F39", "#CD3700 ", "#CD3333", "#CD3278", "#CD2990", "#CD2626 ", "#CD1076", "#CD00CD", "#CD0000", "#CCCCCC ", "#CAFF70", "#CAE1FF", "#C9C9C9", "#C7C7C7 ", "#C71585", "#C6E2FF", "#C67171", "#C5C1AA ", "#C4C4C4", "#C2C2C2", "#C1FFC1", "#C1CDCD ", "#C1CDC1", "#C1C1C1", "#C0FF3E", "#BFEFFF ", "#BFBFBF", "#BF3EFF", "#BEBEBE", "#BDBDBD ", "#BDB76B", "#BCEE68", "#BCD2EE", "#BC8F8F ", "#BBFFFF", "#BABABA", "#BA55D3", "#B9D3EE ", "#B8B8B8", "#B8860B", "#B7B7B7", "#B5B5B5 ", "#B4EEB4", "#B4CDCD", "#B452CD", "#B3EE3A ", "#B3B3B3", "#B2DFEE", "#B23AEE", "#B22222 ", "#B0E2FF", "#B0E0E6", "#B0C4DE", "#B0B0B0 ", "#B03060", "#AEEEEE", "#ADFF2F", "#ADD8E6 ", "#ADADAD", "#ABABAB", "#AB82FF", "#AAAAAA ", "#A9A9A9", "#A8A8A8", "#A6A6A6", "#A52A2A ", "#A4D3EE", "#A3A3A3", "#A2CD5A", "#A2B5CD ", "#A1A1A1", "#A0522D", "#A020F0", "#9FB6CD ", "#9F79EE", "#9E9E9E", "#9C9C9C", "#9BCD9B ", "#9B30FF", "#9AFF9A", "#9ACD32", "#9AC0CD ", "#9A32CD", "#999999", "#9932CC", "#98FB98 ", "#98F5FF", "#97FFFF", "#96CDCD", "#969696 ", "#949494", "#9400D3", "#9370DB", "#919191 ", "#912CEE", "#90EE90", "#8FBC8F", "#8F8F8F ", "#8EE5EE", "#8E8E8E", "#8E8E38", "#8E388E ", "#8DEEEE", "#8DB6CD", "#8C8C8C", "#8B8B83 ", "#8B8B7A", "#8B8B00", "#8B8989", "#8B8970 ", "#8B8878", "#8B8682", "#8B864E", "#8B8386 ", "#8B8378", "#8B814C", "#8B7E66", "#8B7D7B ", "#8B7D6B", "#8B7B8B", "#8B795E", "#8B7765 ", "#8B7500", "#8B7355", "#8B6969", "#8B6914 ", "#8B668B", "#8B6508", "#8B636C", "#8B5F65 ", "#8B5A2B", "#8B5A00", "#8B5742", "#8B4C39 ", "#8B4789", "#8B475D", "#8B4726", "#8B4513 ", "#8B4500", "#8B3E2F", "#8B3A62", "#8B3A3A ", "#8B3626", "#8B2500", "#8B2323", "#8B2252 ", "#8B1C62", "#8B1A1A", "#8B0A50", "#8B008B ", "#8B0000", "#8A8A8A", "#8A2BE2", "#8968CD ", "#87CEFF", "#87CEFA", "#87CEEB", "#878787 ", "#858585", "#848484", "#8470FF", "#838B8B ", "#838B83", "#836FFF", "#828282", "#7FFFD4 ", "#7FFF00", "#7F7F7F", "#7EC0EE", "#7D9EC0 ", "#7D7D7D", "#7D26CD", "#7CFC00", "#7CCD7C ", "#7B68EE", "#7AC5CD", "#7A8B8B", "#7A7A7A ", "#7A67EE", "#7A378B", "#79CDCD", "#787878 ", "#778899", "#76EEC6", "#76EE00", "#757575 ", "#737373", "#71C671", "#7171C6", "#708090 ", "#707070", "#6E8B3D", "#6E7B8B", "#6E6E6E ", "#6CA6CD", "#6C7B8B", "#6B8E23", "#6B6B6B ", "#6A5ACD", "#698B69", "#698B22", "#696969 ", "#6959CD", "#68838B", "#68228B", "#66CDAA ", "#66CD00", "#668B8B", "#666666", "#6495ED ", "#63B8FF", "#636363", "#616161", "#607B8B ", "#5F9EA0", "#5E5E5E", "#5D478B", "#5CACEE ", "#5C5C5C", "#5B5B5B", "#595959", "#575757 ", "#556B2F", "#555555", "#551A8B", "#54FF9F ", "#548B54", "#545454", "#53868B", "#528B8B ", "#525252", "#515151", "#4F94CD", "#4F4F4F ", "#4EEE94", "#4D4D4D", "#4B0082", "#4A708B ", "#4A4A4A", "#48D1CC", "#4876FF", "#483D8B ", "#474747", "#473C8B", "#4682B4", "#458B74 ", "#458B00", "#454545", "#43CD80", "#436EEE ", "#424242", "#4169E1", "#40E0D0", "#404040 ", "#3D3D3D", "#3CB371", "#3B3B3B", "#3A5FCD ", "#388E8E", "#383838", "#36648B", "#363636 ", "#333333", "#32CD32", "#303030", "#2F4F4F ", "#2E8B57", "#2E2E2E", "#2B2B2B", "#292929 ", "#282828", "#27408B", "#262626", "#242424 ", "#228B22", "#218868", "#212121", "#20B2AA ", "#1F1F1F", "#1E90FF", "#1E1E1E", "#1C86EE ", "#1C1C1C", "#1A1A1A", "#191970", "#1874CD ", "#171717", "#141414", "#121212", "#104E8B ", "#0F0F0F", "#0D0D0D", "#0A0A0A", "#080808 ", "#050505", "#030303", "#00FFFF", "#00FF7F ", "#00FF00", "#00FA9A", "#00F5FF", "#00EEEE ", "#00EE76", "#00EE00", "#00E5EE", "#00CED1 ", "#00CDCD", "#00CD66", "#00CD00", "#00C5CD ", "#00BFFF", "#00B2EE", "#009ACD", "#008B8B ", "#008B45", "#008B00", "#00868B", "#00688B ", "#006400", "#0000FF", "#0000EE", "#0000CD ", "#0000AA", "#00008B", "#000080"];
            ColorUtils.nextColor = function () {
                return ColorUtils.Color[++ColorUtils._colorindex % ColorUtils.Color.length];
            };
            ColorUtils.indexColor = function (index) {
                var result = ColorUtils.Color[Math.abs(index) % (ColorUtils.Color.length - 1)];
                return result;
            };
            ColorUtils.gradientColor = function (startColor, endColor, step) {
                var startRGB = null;
                if (startColor.indexOf('rgb') == 0) {
                    startColor = ColorUtils.colorHex(startColor);
                }
                startRGB = ColorUtils.colorRgb(startColor); //转换为rgb数组模式
                var startR = startRGB[0];
                var startG = startRGB[1];
                var startB = startRGB[2];
                var endRGB = null;
                if (endColor.indexOf('rgb') == 0) {
                    endColor = ColorUtils.colorHex(endColor);
                }
                endRGB = ColorUtils.colorRgb(endColor);
                var endR = endRGB[0];
                var endG = endRGB[1];
                var endB = endRGB[2];
                var sR = (endR - startR) / step; //总差值
                var sG = (endG - startG) / step;
                var sB = (endB - startB) / step;
                var colorArr = [];
                for (var i = 0; i < step; i++) {
                    //计算每一步的hex值 
                    var hex = ColorUtils.colorHex('rgb(' + parseInt((sR * i + startR)) + ',' + parseInt((sG * i + startG)) + ',' + parseInt((sB * i + startB)) + ')');
                    colorArr.push(hex);
                }
                return colorArr;
            };
            ColorUtils.getColor = function (startColor, endColor, value, start, end) {
                var startRGB = ColorUtils.colorRgb(startColor); //转换为rgb数组模式
                var startR = startRGB[0];
                var startG = startRGB[1];
                var startB = startRGB[2];
                var endRGB = ColorUtils.colorRgb(endColor);
                var endR = endRGB[0];
                var endG = endRGB[1];
                var endB = endRGB[2];
                var sR = (endR - startR) / (end - start); //总差值
                var sG = (endG - startG) / (end - start);
                var sB = (endB - startB) / (end - start);
                var hex = ColorUtils.colorHex('rgb(' + parseInt((sR * value + startR)) + ',' + parseInt((sG * value + startG)) + ',' + parseInt((sB * value + startB)) + ')');
                return hex;
            };
            ColorUtils.colorRgb = function (sColor) {
                var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
                var sColor = sColor.toLowerCase();
                if (sColor && reg.test(sColor)) {
                    if (sColor.length === 4) {
                        var sColorNew = "#";
                        for (var i = 1; i < 4; i += 1) {
                            sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                        }
                        sColor = sColorNew;
                    }
                    //处理六位的颜色值
                    var sColorChange = [];
                    for (var i = 1; i < 7; i += 2) {
                        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
                    }
                    return sColorChange;
                }
                else {
                    return sColor;
                }
            };
            // 将rgb表示方式转换为hex表示方式
            ColorUtils.colorHex = function (rgb) {
                var _thiss = rgb;
                var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
                if (/^(rgb|RGB)/.test(_thiss)) {
                    var aColor = _thiss.replace(/(?:(|)|rgb|RGB)*/g, "").split(",");
                    var strHex = "#";
                    for (var i = 0; i < aColor.length; i++) {
                        var hex = Number(aColor[i]).toString(16);
                        hex = hex < 10 ? 0 + '' + hex : hex; // 保证每个rgb的值为2位
                        if (hex === "0") {
                            hex += hex;
                        }
                        strHex += hex;
                    }
                    if (strHex.length !== 7) {
                        strHex = _thiss;
                    }
                    return strHex;
                }
                else if (reg.test(_thiss)) {
                    var aNum = _thiss.replace(/#/, "").split("");
                    if (aNum.length === 6) {
                        return _thiss;
                    }
                    else if (aNum.length === 3) {
                        var numHex = "#";
                        for (var i = 0; i < aNum.length; i += 1) {
                            numHex += (aNum[i] + aNum[i]);
                        }
                        return numHex;
                    }
                }
                else {
                    return _thiss;
                }
            };
            ColorUtils._colorindex = -1;
            ColorUtils.Color = ['rgb(251, 118, 123)', 'rgb(129, 227, 238)', '#88bde6', '#fbb258', '#90cd97', '#f6aac9', '#bfa554', '#bc99c7', '#eddd46', '#f07e6e', '#8c8c8c'];
            return ColorUtils;
        }());
        test.ColorUtils = ColorUtils;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Point = android.graphics.Point;
        var RotateRect = /** @class */ (function () {
            function RotateRect(centerx, centery, width, height, angle) {
                if (centerx != null && centery != null && width != null && height != null && angle != null) {
                    this.angle = angle;
                    this.centerx = centerx;
                    this.centery = centery;
                    this.width = width;
                    this.height = height;
                    this.points = [new Point(), new Point(), new Point(), new Point(), new Point(), new Point(), new Point(), new Point(), new Point()];
                    var lt = this.points[0];
                    var rt = this.points[1];
                    var rb = this.points[2];
                    var lb = this.points[3];
                    var ct = this.points[4];
                    var cb = this.points[5];
                    var cl = this.points[6];
                    var cr = this.points[7];
                    cr.x = this.centerx + Math.cos(this.angle) * this.width / 2;
                    cr.y = this.centery + Math.sin(this.angle) * this.width / 2;
                    cl.x = 2 * this.centerx - cr.x;
                    cl.y = 2 * this.centery - cr.y;
                    rt.x = cr.x + Math.sin(this.angle) * this.height / 2;
                    rt.y = cr.y - Math.cos(this.angle) * this.height / 2;
                    rb.x = 2 * cr.x - rt.x;
                    rb.y = 2 * cr.y - rt.y;
                    lb.x = cl.x - Math.sin(this.angle) * this.height / 2;
                    lb.y = cl.y + Math.cos(this.angle) * this.height / 2;
                    lt.x = 2 * cl.x - lb.x;
                    lt.y = 2 * cl.y - lb.y;
                    cb.x = (lb.x + rb.x) / 2;
                    cb.y = (lb.y + rb.y) / 2;
                    ct.x = (lt.x + rt.x) / 2;
                    ct.y = (lt.y + rt.y) / 2;
                    var center = this.points[8];
                    center.x = this.centerx;
                    center.y = this.centery;
                }
            }
            Object.defineProperty(RotateRect.prototype, "raidius", {
                get: function () {
                    return Math.sqrt(Math.pow(this.center.x - this.leftTop.x, 2) + Math.pow(this.center.y - this.leftTop.y, 2));
                },
                enumerable: true,
                configurable: true
            });
            RotateRect.prototype.offset = function (x, y, angle) {
                for (var i = 0; i < this.points.length; ++i) {
                    var pt = this.points[i];
                    pt.x += x * Math.cos(angle);
                    pt.y += y * Math.sin(angle);
                }
            };
            Object.defineProperty(RotateRect.prototype, "leftTop", {
                get: function () {
                    return this.points[0];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "rightTop", {
                get: function () {
                    return this.points[1];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "leftBottom", {
                get: function () {
                    return this.points[3];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "rightBottom", {
                get: function () {
                    return this.points[2];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "centerTop", {
                get: function () {
                    return this.points[4];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "centerBottom", {
                get: function () {
                    return this.points[5];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "center", {
                get: function () {
                    return this.points[8];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RotateRect.prototype, "startPoint", {
                get: function () {
                    return new Point(this.centerx, this.centery);
                },
                enumerable: true,
                configurable: true
            });
            RotateRect.prototype.clone = function () {
                var rect = new RotateRect();
                rect.centerx = this.centerx;
                rect.centery = this.centery;
                rect.width = this.width;
                rect.height = this.height;
                rect.angle = this.angle;
                for (var i = 0; i < this.points.length; ++i) {
                    rect.points.push(this.points[i].clone());
                }
                return rect;
            };
            return RotateRect;
        }());
        test.RotateRect = RotateRect;
        var RotateLine = /** @class */ (function () {
            function RotateLine(cx, cy, leftwidth, rightwidth, angle) {
                this._cx = cx;
                this._cy = cy;
                this._leftwidth = leftwidth;
                this._rightwidth = rightwidth;
                this._angle = angle;
                this.endPoint = new Point();
                this.endPoint.x = cx + Math.sin(this._angle) * rightwidth;
                this.endPoint.y = cy - Math.cos(this._angle) * rightwidth;
                this.startPoint = new Point();
                this.startPoint.x = cx - Math.sin(this._angle) * leftwidth;
                this.startPoint.y = cy + Math.cos(this._angle) * leftwidth;
            }
            return RotateLine;
        }());
        test.RotateLine = RotateLine;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var AnimationType;
        (function (AnimationType) {
            AnimationType[AnimationType["Width"] = 0] = "Width";
            AnimationType[AnimationType["Height"] = 1] = "Height";
            AnimationType[AnimationType["Size"] = 2] = "Size";
            AnimationType[AnimationType["Radius"] = 3] = "Radius";
            AnimationType[AnimationType["Sweep"] = 4] = "Sweep";
            AnimationType[AnimationType["Alpha"] = 5] = "Alpha";
        })(AnimationType = test.AnimationType || (test.AnimationType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Agg;
        (function (Agg) {
            Agg[Agg["SUM"] = 0] = "SUM";
            Agg[Agg["AVERAGE"] = 1] = "AVERAGE";
            Agg[Agg["COUNT"] = 2] = "COUNT";
            Agg[Agg["NONE"] = 3] = "NONE";
        })(Agg = test.Agg || (test.Agg = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Order;
        (function (Order) {
            Order[Order["Desc"] = 0] = "Desc";
            Order[Order["Asc"] = 1] = "Asc";
            Order[Order["None"] = 2] = "None";
        })(Order = test.Order || (test.Order = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var ScaleType;
        (function (ScaleType) {
            ScaleType[ScaleType["Linear"] = 0] = "Linear";
            ScaleType[ScaleType["Log"] = 1] = "Log";
            ScaleType[ScaleType["Ordinal"] = 2] = "Ordinal";
            ScaleType[ScaleType["LatLon"] = 3] = "LatLon";
        })(ScaleType = test.ScaleType || (test.ScaleType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var DataType;
        (function (DataType) {
            DataType[DataType["Number"] = 0] = "Number";
            DataType[DataType["String"] = 1] = "String";
            DataType[DataType["Object"] = 2] = "Object";
            DataType[DataType["Array"] = 3] = "Array";
            DataType[DataType["Boolean"] = 4] = "Boolean";
            DataType[DataType["Date"] = 5] = "Date";
        })(DataType = test.DataType || (test.DataType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var ChartType;
        (function (ChartType) {
            ChartType[ChartType["Bar"] = 0] = "Bar";
            ChartType[ChartType["Line"] = 1] = "Line";
            ChartType[ChartType["Scatter"] = 2] = "Scatter";
            ChartType[ChartType["Area"] = 3] = "Area";
            ChartType[ChartType["Pie"] = 4] = "Pie";
            ChartType[ChartType["Sunburst"] = 5] = "Sunburst";
            ChartType[ChartType["TreeMap"] = 6] = "TreeMap";
            ChartType[ChartType["Radar"] = 7] = "Radar";
            ChartType[ChartType["Candlestick"] = 8] = "Candlestick";
        })(ChartType = test.ChartType || (test.ChartType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var AxisType;
            (function (AxisType) {
                AxisType[AxisType["X"] = 0] = "X";
                AxisType[AxisType["Y"] = 1] = "Y";
            })(AxisType = cartesian.AxisType || (cartesian.AxisType = {}));
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Value = /** @class */ (function () {
                function Value(v, scaleType) {
                    this.__val = v;
                    if (v instanceof Array) {
                        this.__isMultiple = true;
                    }
                    else {
                        this.__isMultiple = false;
                    }
                    this.__scaleType = scaleType;
                    this.__dataType = test.Utility.getType(v);
                }
                Object.defineProperty(Value.prototype, "scaleType", {
                    get: function () {
                        return this.__scaleType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Value.prototype, "dataType", {
                    get: function () {
                        return this.__dataType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Value.prototype, "isMultiple", {
                    /**
                     * for what ?
                     * array value for high low open close?
                     */
                    get: function () {
                        return this.__isMultiple;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Value.prototype, "value", {
                    get: function () {
                        return this.__val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Value;
            }());
            cartesian.Value = Value;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
/// <reference path="../enum/Agg.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            var Util = android.graphics.Util;
            'use strict';
            var Field = /** @class */ (function () {
                function Field(bind, name, index) {
                    if (index === void 0) { index = 0; }
                    this.index = 0;
                    this.aggregate = Util.asEnum(bind.aggregate, test.Agg, true);
                    if (this.aggregate == null) {
                        this.aggregate = test.Agg.NONE;
                    }
                    var binds = bind.field.split(',');
                    if (binds != null && binds.length > 1) {
                        this.bind = binds;
                    }
                    else {
                        this.bind = bind.field;
                    }
                    this.type = Util.asEnum(bind.type, test.ScaleType, true);
                    if (this.type == null) {
                        this.type = test.ScaleType.Ordinal;
                    }
                    this.logBase = bind.logBase;
                    this.name = name;
                    this.range = bind.range;
                    this.band = bind.band;
                    if (index != null && !isNaN(index)) {
                        this.index = index;
                    }
                }
                Object.defineProperty(Field.prototype, "isMultiple", {
                    get: function () {
                        return this.bind instanceof Array;
                    },
                    enumerable: true,
                    configurable: true
                });
                Field.prototype.equals = function (field) {
                    return _.isEqual(this, field);
                };
                return Field;
            }());
            cartesian.Field = Field;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Filter = /** @class */ (function () {
                function Filter(series, rules) {
                    this.series = series.split(',');
                    if (rules != null && rules instanceof Array) {
                        this.rules = [];
                        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
                            var rule = rules_1[_i];
                            this.rules.push(new Rule(rule.field, rule.express));
                        }
                    }
                }
                Filter.prototype.equals = function (field) {
                    return _.isEqual(this, field);
                };
                return Filter;
            }());
            cartesian.Filter = Filter;
            var Rule = /** @class */ (function () {
                function Rule(filed, express) {
                    this.filed = filed;
                    this.express = express;
                }
                return Rule;
            }());
            cartesian.Rule = Rule;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="./Field.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            var Encoding = /** @class */ (function () {
                function Encoding(encoding) {
                    this._stack = false;
                    this._radial = false;
                    if (encoding.x) {
                        this.x = new cartesian.Field(encoding.x, 'x');
                    }
                    if (encoding.geoposition) {
                        this.geoposition = new cartesian.Field(encoding.geoposition, 'geoposition');
                    }
                    if (encoding.y) {
                        this.y = new cartesian.Field(encoding.y, 'y');
                    }
                    if (encoding.color) {
                        this.color = new cartesian.Field(encoding.color, 'color');
                    }
                    if (encoding.shape) {
                        this.shape = new cartesian.Field(encoding.shape, 'shape');
                    }
                    if (encoding.size) {
                        this.size = new cartesian.Field(encoding.size, 'size');
                    }
                    if (encoding.tooltip) {
                        this.tooltip = new cartesian.Field(encoding.tooltip, 'tooltip');
                    }
                    if (encoding.text) {
                        this.text = new cartesian.Field(encoding.text, 'text');
                    }
                    if (encoding.group) {
                        this.group = new cartesian.Field(encoding.group, 'group');
                    }
                    if (encoding.values && encoding.values instanceof Array) {
                        this.values = [];
                        for (var i = 0; i < encoding.values.length; ++i) {
                            var value = encoding.values[i];
                            this.values.push(new cartesian.Field(value, value.name));
                        }
                    }
                    if (encoding.stack != null) {
                        this._stack = encoding.stack;
                    }
                    if (encoding.radial != null) {
                        this._radial = encoding.radial;
                    }
                }
                return Encoding;
            }());
            cartesian.Encoding = Encoding;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Util = android.graphics.Util;
            var Item = /** @class */ (function () {
                function Item() {
                }
                Object.defineProperty(Item.prototype, "id", {
                    get: function () {
                        // return Utility.HashCode(this);
                        return Util.HashCode(Util.HashCode(this.x) + Util.HashCode(this.group));
                        // return this.x.value +" " + this.group.value;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Item;
            }());
            cartesian.Item = Item;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var TransForm = /** @class */ (function () {
                function TransForm() {
                }
                return TransForm;
            }());
            cartesian.TransForm = TransForm;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Util = android.graphics.Util;
            var Debug = android.Debug;
            var Series = /** @class */ (function () {
                function Series(encoding, series, index, charttype) {
                    this.__points = [];
                    this.__chartType = test.ChartType.Bar;
                    this.enable = true;
                    this.showlabels = false;
                    Debug.assert(encoding != null);
                    Debug.assert(series != null);
                    Debug.assert(series.data instanceof Array, "Series must be Array");
                    this.__data = series.data;
                    this.__name = series.name;
                    this.__index = index;
                    this.__chartType = Util.asEnum(series.charttype, test.ChartType, null);
                    if (this.__chartType == null) {
                        this.__chartType = charttype;
                    }
                    this.__encoding = encoding;
                    this.__pairs = [];
                    for (var key in this.__encoding) {
                        if (test.Utility.iskey(key)) {
                            var filed = this.__encoding[key];
                            var scale = this.__createScale(filed);
                            this.__pairs.push({ filed: filed, scale: scale });
                        }
                    }
                    for (var _i = 0, _a = this.__data; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.__points.push(this.__analyseItem(this.__pairs, item));
                    }
                    for (var _b = 0, _c = this.__pairs; _b < _c.length; _b++) {
                        var pair = _c[_b];
                        var filed = pair.filed;
                        var scale = pair.scale;
                        if (filed.name != 'x' && filed.name != 'y' && filed.range != null && filed.range.length > 0) {
                            if (scale instanceof test.LinearScale) {
                                scale.range(filed.range);
                            }
                            else if (scale instanceof test.LogScale) {
                                scale.range(filed.range);
                            }
                            else if (scale instanceof test.OrdinalScale) {
                                if (filed.band === true) {
                                    scale.rangeBounds(filed.range);
                                }
                                else {
                                    scale.range(filed.range);
                                }
                            }
                        }
                        scale.refresh();
                    }
                }
                Object.defineProperty(Series.prototype, "id", {
                    get: function () {
                        return Util.HashCode(this.__name);
                    },
                    enumerable: true,
                    configurable: true
                });
                Series.prototype.__analyseItem = function (pairs, item) {
                    Debug.assert(item != null);
                    Debug.assert(typeof item == 'object');
                    var values = new cartesian.Item();
                    Debug.assert(!(item instanceof Array));
                    values.group = new cartesian.Value(this.__name, test.ScaleType.Ordinal);
                    for (var _i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {
                        var pair = pairs_1[_i];
                        var filed = pair.filed;
                        var scale = pair.scale;
                        var value = null;
                        if (filed.bind instanceof Array) {
                            value = new cartesian.Value([item[filed.bind[0]], item[filed.bind[1]]], filed.type);
                        }
                        else {
                            value = new cartesian.Value(item[filed.bind], filed.type);
                        }
                        values[filed.name] = value;
                        if (typeof (filed.bind) == 'string') {
                            if (scale instanceof test.LinearScale) {
                                var max = test.Utility.max([item[filed.bind], scale.max]);
                                var min = test.Utility.min([item[filed.bind], scale.min]);
                                scale.domain([min, max]);
                            }
                            else if (scale instanceof test.LogScale) {
                                var max = test.Utility.max([item[filed.bind], scale.max]);
                                var min = test.Utility.min([item[filed.bind], scale.min]);
                                scale.domain([min, max]);
                            }
                            else if (scale instanceof test.OrdinalScale) {
                                // if(scale.domains.indexOf(item[filed.bind]) < 0){
                                scale.domains.push(item[filed.bind]);
                                // }
                            }
                        }
                        else if (filed.isMultiple) {
                            if (scale instanceof test.map.MapOrdinalScale) {
                                // if (value.isMultiple) {
                                //     for (let v of value.value) {
                                //         scale.domains.push(v);
                                //     }
                                // } else {
                                scale.domains.push(value.value);
                                // }
                            }
                        }
                    }
                    return values;
                };
                Series.prototype._refresh = function () {
                    for (var _i = 0, _a = this.__pairs; _i < _a.length; _i++) {
                        var pair = _a[_i];
                        pair.scale.domain([]);
                    }
                    for (var _b = 0, _c = this.__points; _b < _c.length; _b++) {
                        var pt = _c[_b];
                        for (var _d = 0, _e = this.__pairs; _d < _e.length; _d++) {
                            var pair = _e[_d];
                            var filed = pair.filed;
                            var scale = pair.scale;
                            if (scale instanceof test.LinearScale) {
                                var value = pt[filed.name];
                                var max = test.Utility.max(value.isMultiple ? value.value.concat([scale.max]) : [value.value, scale.max]);
                                var min = test.Utility.min(value.isMultiple ? value.value.concat([scale.min]) : [value.value, scale.min]);
                                scale.domain([min, max]);
                            }
                            else if (scale instanceof test.LogScale) {
                                var value = pt[filed.name];
                                var max = test.Utility.max(value.isMultiple ? value.value.concat([scale.max]) : [value.value, scale.max]);
                                var min = test.Utility.min(value.isMultiple ? value.value.concat([scale.min]) : [value.value, scale.min]);
                                scale.domain([min, max]);
                            }
                            else if (scale instanceof test.OrdinalScale) {
                                var value = pt[filed.name];
                                if (value.isMultiple) {
                                    for (var _f = 0, _g = value.value; _f < _g.length; _f++) {
                                        var v = _g[_f];
                                        scale.domains.push(v);
                                    }
                                }
                                else {
                                    scale.domains.push(value.value);
                                }
                            }
                            else if (scale instanceof test.map.MapOrdinalScale) {
                                var value = pt[filed.name];
                                if (value.isMultiple) {
                                    for (var _h = 0, _j = value.value; _h < _j.length; _h++) {
                                        var v = _j[_h];
                                        scale.domains.push(v);
                                    }
                                }
                                else {
                                    scale.domains.push(value.value);
                                }
                            }
                        }
                    }
                };
                Series.prototype.__createScale = function (filed) {
                    Debug.assert(filed != null);
                    var scale = null;
                    switch (filed.type) {
                        case test.ScaleType.Linear:
                            scale = new test.LinearScale(filed.name);
                            break;
                        case test.ScaleType.Ordinal:
                            scale = new test.OrdinalScale(filed.name);
                            break;
                        case test.ScaleType.Log:
                            scale = new test.LogScale(filed.logBase, filed.name);
                            break;
                        case test.ScaleType.LatLon:
                            scale = new test.map.MapOrdinalScale(filed.name);
                            break;
                        default:
                            Debug.assert(false, filed.type + " ScaleType has not been implement!");
                            break;
                    }
                    return scale;
                };
                Object.defineProperty(Series.prototype, "data", {
                    get: function () {
                        return this.__data;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "name", {
                    get: function () {
                        return this.__name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "scalePairs", {
                    get: function () {
                        return this.__pairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "points", {
                    get: function () {
                        return this.__points;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "size", {
                    get: function () {
                        return this.__points.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "chartType", {
                    get: function () {
                        return this.__chartType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Series.prototype, "index", {
                    get: function () {
                        return this.__index;
                    },
                    enumerable: true,
                    configurable: true
                });
                Series.prototype.getScale = function (name) {
                    var index = _.findIndex(this.__pairs, function (item) {
                        return item.filed.name == name;
                    });
                    if (index >= 0) {
                        return this.__pairs[index].scale;
                    }
                    return null;
                };
                Series.prototype.clone = function () {
                    var series = _.cloneDeep(this);
                    return series;
                };
                return Series;
            }());
            cartesian.Series = Series;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Config = android.test.config.cartesian.Config;
            var Util = android.graphics.Util;
            var DataModel = /** @class */ (function () {
                function DataModel(data) {
                    this.__chartTypes = [];
                    this.__data = data;
                    this.__chartType = Util.asEnum(data.charttype, test.ChartType, null);
                    if (this.__chartType == null) {
                        this.__chartType = test.ChartType.Bar;
                    }
                    this.__encoding = this._analyseEncoding(this.__data.encoding);
                    this._analyseConfig(this.__data.config);
                    this._analyseFilter(data.filter);
                    this.refresh();
                }
                DataModel.prototype._analyseConfig = function (config) {
                    if (config != null) {
                        this.__config = new Config(config);
                    }
                };
                DataModel.prototype._analyseEncoding = function (encode) {
                    return new cartesian.Encoding(encode);
                };
                Object.defineProperty(DataModel.prototype, "chartTypes", {
                    get: function () {
                        return this.__chartTypes;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.prototype._analyseSeries = function (series_data, encoding) {
                    this.__series = [];
                    this.__allSeries = [];
                    for (var i = 0; i < series_data.length; ++i) {
                        var seriesitem = series_data[i];
                        var ser = new cartesian.Series(encoding, seriesitem, i, this.__chartType);
                        if (this.__filter != null && this.__filter.series.indexOf(seriesitem.name) > -1) {
                            ser.enable = true;
                            this.__series.push(ser);
                            if (this.__chartTypes.indexOf(ser.chartType) < 0) {
                                this.__chartTypes.push(ser.chartType);
                            }
                        }
                        else {
                            ser.enable = false;
                        }
                        this.__allSeries.push(ser);
                    }
                };
                DataModel.prototype.refresh = function () {
                    this._analyseSeries(this.__data.series, this.__encoding);
                    this._createLayoutScales(this.encoding);
                };
                DataModel.prototype._analyseFilter = function (filter) {
                    if (filter != null) {
                        this.__filter = new cartesian.Filter(filter.series, filter.rules);
                    }
                };
                DataModel.prototype._createLayoutScales = function (encoding) {
                    this.__scalePairs = [];
                    if (this.__series.length > 1) {
                        this._stack(test.ChartType.Bar);
                        this._stack(test.ChartType.Line);
                        this._stack(test.ChartType.Area);
                        this._stack(test.ChartType.Scatter);
                        for (var i = 0; i < this.__series.length - 1; ++i) {
                            var series = this.__series[i];
                            var next_series = this.__series[i + 1];
                            for (var _i = 0, _a = series.scalePairs; _i < _a.length; _i++) {
                                var pairA = _a[_i];
                                for (var _b = 0, _c = next_series.scalePairs; _b < _c.length; _b++) {
                                    var pairB = _c[_b];
                                    if (pairA.filed.equals(pairB.filed)) {
                                        var filed = pairA.filed;
                                        var force = this.encoding._stack && pairA.filed.name == 'y';
                                        var infoA = this.__getScaleInfobyname(pairA.filed.name, series.name);
                                        var infoB = this.__getScaleInfobyname(pairB.filed.name, next_series.name);
                                        if (infoA == null && infoB == null) {
                                            var scale = test.Utility.mergeScale(pairA.scale, pairB.scale, force);
                                            if (scale != null) {
                                                this.__scalePairs.push({ series: [series.name, next_series.name], filed: filed, scale: scale });
                                            }
                                            else {
                                                this.__scalePairs.push({ series: [series.name], filed: pairA.filed, scale: pairA.scale });
                                                this.__scalePairs.push({ series: [next_series.name], filed: pairB.filed, scale: pairB.scale });
                                            }
                                        }
                                        else if (infoA == null && infoB != null) {
                                            var scale = test.Utility.mergeScale(pairA.scale, infoB.scale, force);
                                            if (scale != null) {
                                                infoB.scale = scale;
                                                infoB.series.push(series.name);
                                            }
                                            else {
                                                this.__scalePairs.push({ series: [series.name], filed: pairA.filed, scale: pairA.scale });
                                            }
                                        }
                                        else if (infoA != null && infoB == null) {
                                            var scale = test.Utility.mergeScale(pairB.scale, infoA.scale, force);
                                            if (scale != null) {
                                                infoA.scale = scale;
                                                infoA.series.push(next_series.name);
                                            }
                                            else {
                                                this.__scalePairs.push({ series: [next_series.name], filed: pairB.filed, scale: pairB.scale });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        for (var _d = 0, _e = this.__series; _d < _e.length; _d++) {
                            var ser = _e[_d];
                            for (var _f = 0, _g = ser.scalePairs; _f < _g.length; _f++) {
                                var pair = _g[_f];
                                var scale = this._getScaleByName(pair.filed.name, ser.name);
                                if (scale != null) {
                                    pair.scale = scale;
                                }
                            }
                        }
                    }
                    else if (this.__series.length == 1) {
                        for (var _h = 0, _j = this.__series[0].scalePairs; _h < _j.length; _h++) {
                            var pair = _j[_h];
                            this.__scalePairs.push({ series: [this.__series[0].name], filed: pair.filed, scale: pair.scale.clone() });
                        }
                    }
                };
                DataModel.prototype._stack = function (chartType) {
                    if (this.encoding._stack) {
                        var negative = {};
                        var positive = {};
                        for (var i = 0; i < this.series.length; ++i) {
                            var serA = this.series[i];
                            if (serA.chartType === chartType) {
                                this._setSeriesStack(serA, positive, negative);
                            }
                        }
                    }
                };
                DataModel.prototype.__getScaleInfobyname = function (filedname, seriesname) {
                    var info = _.find(this.__scalePairs, function (item) {
                        return item.series.indexOf(seriesname) >= 0 && filedname == item.filed.name;
                    });
                    return info;
                };
                DataModel.prototype._getScaleByName = function (filedname, seriesname) {
                    return _.result(_.find(this.__scalePairs, function (item) {
                        return item.series.indexOf(seriesname) >= 0 && filedname == item.filed.name;
                    }), "scale");
                };
                DataModel.prototype._setSeriesStack = function (series, pos, neg) {
                    var scaleX_A = series.getScale('x');
                    if (scaleX_A instanceof test.OrdinalScale) {
                        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                            var pt = _a[_i];
                            var negvalue = neg[pt.x.value];
                            var posvalue = pos[pt.x.value];
                            if (negvalue == null) {
                                negvalue = 0;
                                neg[pt.x.value] = 0;
                            }
                            if (posvalue == null) {
                                posvalue = 0;
                                pos[pt.x.value] = 0;
                            }
                            var isNeg = pt.y.value < 0;
                            var startY = isNeg ? negvalue : posvalue;
                            var endY = startY + pt.y.value;
                            isNeg ? neg[pt.x.value] = endY : pos[pt.x.value] = endY;
                            // targetPoint.y = new Value([startY, endY], targetPoint.y.scaleType);
                            // seriesB.points[index] = targetPoint;
                            pt.y = new cartesian.Value([startY, endY], pt.y.scaleType);
                        }
                    }
                    series._refresh();
                };
                DataModel.prototype.getSeriesByType = function (charttype) {
                    var series = _.filter(this.__series, function (ser) { return ser.chartType === charttype; });
                    return series;
                };
                Object.defineProperty(DataModel.prototype, "series", {
                    get: function () {
                        return this.__series;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "allSeries", {
                    get: function () {
                        return this.__allSeries;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "encoding", {
                    get: function () {
                        return this.__encoding;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "filter", {
                    get: function () {
                        return this.__filter;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "scalePairs", {
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DataModel;
            }());
            cartesian.DataModel = DataModel;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Value = /** @class */ (function () {
                function Value(v, scaleType) {
                    this.__val = v;
                    this.__scaleType = scaleType;
                    this.__dataType = test.Utility.getType(v);
                    if (this.__scaleType == null) {
                        switch (this.__dataType) {
                            case test.DataType.Number:
                            case test.DataType.Date:
                                this.__scaleType = test.ScaleType.Linear;
                                break;
                            case test.DataType.String:
                            case test.DataType.Boolean:
                            default:
                                this.__scaleType = test.ScaleType.Ordinal;
                                break;
                        }
                    }
                }
                Object.defineProperty(Value.prototype, "scaleType", {
                    get: function () {
                        return this.__scaleType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Value.prototype, "dataType", {
                    get: function () {
                        return this.__dataType;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Value.prototype, "value", {
                    get: function () {
                        return this.__val;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Value;
            }());
            hierarchical.Value = Value;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            var Util = android.graphics.Util;
            'use strict';
            var Field = /** @class */ (function () {
                function Field(bind, name) {
                    this.aggregate = Util.asEnum(bind.aggregate, test.Agg, true);
                    if (this.aggregate == null) {
                        this.aggregate = test.Agg.NONE;
                    }
                    this.bind = bind.field;
                    this.name = name;
                    this.range = bind.range;
                    this.band = bind.band;
                    this.type = Util.asEnum(bind.type, test.ScaleType, true);
                }
                Field.prototype.equals = function (field) {
                    return _.isEqual(this, field);
                };
                return Field;
            }());
            hierarchical.Field = Field;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Util = android.graphics.Util;
            var Item = /** @class */ (function () {
                function Item() {
                    this._hidden = false;
                }
                Object.defineProperty(Item.prototype, "id", {
                    get: function () {
                        // return Util.HashCode(this);
                        return Util.HashCode(Util.HashCode(this.size) + Util.HashCode(this.color) + Util.HashCode(this.text) + Util.HashCode(this.depth) + Util.HashCode(this.count));
                    },
                    enumerable: true,
                    configurable: true
                });
                return Item;
            }());
            hierarchical.Item = Item;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Encoding = /** @class */ (function () {
                function Encoding(encoding) {
                    if (encoding.color != null) {
                        this.color = new hierarchical.Field(encoding.color, 'color');
                    }
                    if (encoding.size != null) {
                        this.size = new hierarchical.Field(encoding.size, 'size');
                    }
                    if (encoding.tooltip != null) {
                        this.tooltip = new hierarchical.Field(encoding.tooltip, 'tooltip');
                    }
                    if (encoding.text != null) {
                        this.text = new hierarchical.Field(encoding.text, 'text');
                    }
                    if (encoding.children != null) {
                        this.children = new hierarchical.Field(encoding.children, 'children');
                    }
                }
                return Encoding;
            }());
            hierarchical.Encoding = Encoding;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Util = android.graphics.Util;
            var Debug = android.Debug;
            var DataModel = /** @class */ (function () {
                // private __analyseTree()
                function DataModel(data) {
                    DataModel.id = 0;
                    this.__data = data;
                    this.__chartType = Util.asEnum(data.charttype, test.ChartType);
                    this.__encoding = this._analyseEncoding(this.__data.encoding);
                    this.__createRoot();
                }
                DataModel.prototype._analyseEncoding = function (encode) {
                    return new hierarchical.Encoding(encode);
                };
                Object.defineProperty(DataModel.prototype, "chartType", {
                    get: function () {
                        return this.__chartType;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.prototype.__createModel = function (data, depth) {
                    var item = new hierarchical.Item();
                    // item._id = (++DataModel.id).toFixed();
                    for (var key in this.__encoding) {
                        if (key === 'children') {
                            if (item.children == null) {
                                item.children = [];
                            }
                            var _children = data[this.__encoding.children.bind];
                            if (_children != null && _children instanceof Array) {
                                for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
                                    var child = _children_1[_i];
                                    item.children.push(this.__createModel(child, depth + 1));
                                }
                            }
                        }
                        else if (this.__encoding[key].bind === 'count' || this.__encoding[key].bind === 'depth') {
                            if (this.__encoding[key].bind in data) {
                                item[key] = new hierarchical.Value(data[this.__encoding[key].bind], null);
                            }
                            else {
                                if (this.__encoding[key].bind == 'count') {
                                    item[key] = new hierarchical.Value(data.children != null ? data.children.length : 1, null);
                                }
                                else if (this.__encoding[key].bind == 'depth') {
                                    item.depth = new hierarchical.Value(depth, null);
                                }
                            }
                        }
                        else {
                            item[key] = new hierarchical.Value(data[this.__encoding[key].bind], null);
                        }
                    }
                    // item.count = new Value(item.children.length,null);
                    // item.depth = new Value(depth,null);
                    return item;
                };
                DataModel.prototype.__createRoot = function () {
                    // this.__root = this.__createModel(this.__data.values);
                    this.__root = [];
                    for (var _i = 0, _a = this.__data.values; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.__root.push(this.__createModel(item, 0));
                    }
                };
                DataModel.prototype.refresh = function () {
                    // do nothing
                };
                DataModel.prototype.__createScale = function (filed) {
                    Debug.assert(filed != null);
                    var scale = null;
                    switch (filed.type) {
                        case test.ScaleType.Linear:
                            scale = new test.LinearScale(filed.name);
                            break;
                        case test.ScaleType.Ordinal:
                            scale = new test.OrdinalScale(filed.name);
                            break;
                        default:
                            Debug.assert(false, filed.type + " ScaleType has not been implement!");
                            break;
                    }
                    return scale;
                };
                Object.defineProperty(DataModel.prototype, "root", {
                    get: function () {
                        return this.__root;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "encoding", {
                    get: function () {
                        return this.__encoding;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.id = 0;
                return DataModel;
            }());
            hierarchical.DataModel = DataModel;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var Scale = /** @class */ (function () {
            function Scale(id) {
                this.__bound = false;
                this.__domains = [];
                this.__ranges = [];
                this.id = id;
                this._order = test.Order.None;
            }
            Object.defineProperty(Scale.prototype, "id", {
                get: function () {
                    return this.__id;
                },
                set: function (value) {
                    this.__id = value;
                },
                enumerable: true,
                configurable: true
            });
            Scale.prototype.domain = function (domains) {
                this.__domains = domains;
                return this;
            };
            Scale.prototype.range = function (ranges) {
                this.__ranges = ranges;
                return this.refresh();
            };
            Scale.prototype.rangeBounds = function (ranges) {
                return this;
            };
            Scale.prototype.refresh = function () {
                return this;
            };
            Scale.prototype.getScaleValue = function (value) {
                return 0;
            };
            Object.defineProperty(Scale.prototype, "startPosition", {
                get: function () {
                    return this.__start;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Scale.prototype, "endPosition", {
                get: function () {
                    return this.__end;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Scale.prototype, "order", {
                get: function () {
                    return this._order;
                },
                set: function (value) {
                    this._order = value;
                },
                enumerable: true,
                configurable: true
            });
            Scale.prototype.equal = function (value) {
                if (value != null) {
                    return this.id == value.id;
                }
                return false;
            };
            Scale.prototype.clone = function () {
                return _.cloneDeep(this);
            };
            return Scale;
        }());
        test.Scale = Scale;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var LinearScale = /** @class */ (function (_super) {
            __extends(LinearScale, _super);
            function LinearScale(id) {
                return _super.call(this, id) || this;
            }
            Object.defineProperty(LinearScale.prototype, "max", {
                get: function () {
                    return this._max;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LinearScale.prototype, "min", {
                get: function () {
                    return this._min;
                },
                enumerable: true,
                configurable: true
            });
            LinearScale.prototype.domain = function (domains) {
                _super.prototype.domain.call(this, domains);
                this._min = this.__domains[0];
                this._max = this.__domains[1];
                return this;
            };
            LinearScale.prototype.refresh = function () {
                if (this.order === test.Order.Asc) {
                    this.__start = this.__ranges[0];
                    this.__end = this.__ranges[1];
                }
                else if (this.order === test.Order.Desc) {
                    this.__start = this.__ranges[1];
                    this.__end = this.__ranges[0];
                }
                else {
                    this.__start = this.__ranges[0];
                    this.__end = this.__ranges[1];
                }
                this._min = this.__domains[0];
                this._max = this.__domains[1];
                return this;
            };
            LinearScale.prototype.range = function (ranges) {
                this.__ranges = ranges;
                return (this.refresh(), this);
            };
            LinearScale.prototype.getScaleValue = function (v) {
                var value;
                if (this._max == this._min) {
                    value = (this.__end - this.__start) / 2 + this.__start;
                }
                else {
                    value = (this.__end - this.__start) / (this._max - this._min) * (v - this._min) + this.__start;
                }
                return value;
            };
            LinearScale.prototype.equal = function (value) {
                if (value != null) {
                    return value.id == this.id && value.max == this.max && value.min == this.min;
                }
                return false;
            };
            return LinearScale;
        }(test.Scale));
        test.LinearScale = LinearScale;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var OrdinalScale = /** @class */ (function (_super) {
            __extends(OrdinalScale, _super);
            function OrdinalScale(id) {
                var _this = _super.call(this, id) || this;
                _this._domainCache = {};
                _this._size = 0;
                return _this;
            }
            OrdinalScale.prototype.refresh = function () {
                if (this.order === test.Order.Asc) {
                    this.__domains.sort(function (a, b) {
                        return a - b;
                    });
                }
                else if (this.order === test.Order.Desc) {
                    this.__domains.sort(function (a, b) {
                        return b - a;
                    });
                }
                this._domainCache = {};
                // for(let i = 0; i < this.__domains.length; ++i){
                //     if(this._domainCache[this.__domains[i]] == null){
                //         this._domainCache[this.__domains[i]]=i;
                //     }
                // }
                var index = 0;
                for (var _i = 0, _a = this.__domains; _i < _a.length; _i++) {
                    var ds = _a[_i];
                    if (this._domainCache[ds] == null) {
                        this._domainCache[ds] = index;
                        index++;
                    }
                }
                this._size = index;
                android.Debug.assert(this.__ranges != null, "");
                // Debug.assert(this.__ranges.length == 2);
                if (this.__ranges.length == 2) {
                    this.__start = this.__ranges[0];
                    this.__end = this.__ranges[1];
                }
                else if (this.__ranges.length > 2) {
                    this.__start = null;
                    this.__end = null;
                }
                return this;
            };
            Object.defineProperty(OrdinalScale.prototype, "max", {
                get: function () {
                    return this._size;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OrdinalScale.prototype, "min", {
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OrdinalScale.prototype, "domains", {
                get: function () {
                    return this.__domains;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(OrdinalScale.prototype, "ranges", {
                get: function () {
                    return this.__ranges;
                },
                enumerable: true,
                configurable: true
            });
            OrdinalScale.prototype.range = function (ranges) {
                if (ranges.length > 2 && ranges.length > this.__domains.length) {
                    this.__ranges = ranges.slice(0, this.__domains.length);
                }
                else {
                    this.__ranges = ranges;
                }
                this.__bound = false;
                return (this.refresh(), this);
            };
            OrdinalScale.prototype.rangeBounds = function (ranges) {
                if (ranges.length > 2 && ranges.length > this.__domains.length) {
                    this.__ranges = ranges.slice(0, this.__domains.length);
                }
                else {
                    this.__ranges = ranges;
                }
                this.__bound = true;
                return (this.refresh(), this);
            };
            OrdinalScale.prototype.domain = function (domains) {
                this.__domains = domains;
                return this;
            };
            OrdinalScale.prototype.getScaleValue = function (v) {
                // var index = this.__domains.indexOf(v);
                // var index = _.indexOf(this.__domains,v);
                var index = this._domainCache[v];
                if (isNaN(index)) {
                    index = 0;
                }
                var value = 0;
                var size = this._size;
                if (size < 2) {
                    size = 2;
                }
                if (typeof (this.__end) == 'number' && typeof (this.__start) == 'number') {
                    if (this.__bound) {
                        value = (index + 0.5) * (this.__end - this.__start) / size + this.__start;
                    }
                    else {
                        value = index * (this.__end - this.__start) / (size - 1) + this.__start;
                    }
                }
                else if (this.__ranges.length > 2) {
                    value = this.__ranges[index];
                }
                return value;
            };
            return OrdinalScale;
        }(test.Scale));
        test.OrdinalScale = OrdinalScale;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var LogScale = /** @class */ (function (_super) {
            __extends(LogScale, _super);
            function LogScale(logbase, id) {
                var _this = _super.call(this, id) || this;
                _this._ticksize = 6;
                _this._logBase = logbase;
                return _this;
            }
            LogScale.prototype.domain = function (domains) {
                _super.prototype.domain.call(this, domains);
                this._min = this.__domains[0];
                this._max = this.__domains[1];
                return this;
            };
            Object.defineProperty(LogScale.prototype, "logBase", {
                get: function () {
                    return this._logBase;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LogScale.prototype, "tickSize", {
                set: function (value) {
                    this._ticksize = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LogScale.prototype, "max", {
                get: function () {
                    return this._max;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LogScale.prototype, "min", {
                get: function () {
                    return this._min;
                },
                enumerable: true,
                configurable: true
            });
            LogScale.prototype.refresh = function () {
                if (this.order === test.Order.Asc) {
                    this.__start = this.__ranges[0];
                    this.__end = this.__ranges[1];
                }
                else if (this.order === test.Order.Desc) {
                    this.__start = this.__ranges[1];
                    this.__end = this.__ranges[0];
                }
                else {
                    this.__start = this.__ranges[0];
                    this.__end = this.__ranges[1];
                }
                this._min = this.__domains[0];
                this._max = this.__domains[1];
                if (this._logBase > 0) {
                    var base = this._logBase;
                    var k = Math.log(base);
                    var imax = Math.ceil(Math.log(this._max) / k);
                    this._max = Math.pow(base, imax);
                    var imin = Math.floor(Math.log(this._min) / k);
                    this._min = Math.pow(base, imin);
                    if (this._min <= 0 || isNaN(this._min)) {
                        this._min = 1;
                    }
                    if (this._max < this._min) {
                        this._max = this._min + 1;
                    }
                }
                return this;
            };
            LogScale.prototype.range = function (ranges) {
                this.__ranges = ranges;
                return (this.refresh(), this);
            };
            Object.defineProperty(LogScale.prototype, "ticks", {
                get: function () {
                    var ticks = new Array(this._ticksize);
                    for (var i = 0; i <= this._ticksize; ++i) {
                        ticks[i] = i * this._niceTick;
                    }
                    return ticks;
                },
                enumerable: true,
                configurable: true
            });
            LogScale.prototype.getScaleValue = function (v) {
                if (v < this._min) {
                    v = this._min;
                }
                var maxl = Math.log(this._max / this._min);
                var value = Math.log(v / this._min) / maxl * (this.__end - this.__start) + this.__start;
                return value;
            };
            return LogScale;
        }(test.Scale));
        test.LogScale = LogScale;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
// /// <reference path="../base.ts" />
// namespace android.test {
//         export class ColorScale extends OrdinalScale {
//             private __colorranges:string[];
//             constructor(id?: any) {
//                 super(id);
//                 this.__colorranges =[];
//             }
//             get domains(): any[] {
//                 return this.__domains;
//             }
//             range(ranges: any[]) {
//                 if(ranges.length > 1){
//                     this.__colorranges =ColorUtils.gradientColor(ranges[0],ranges[ranges.length-1],this.__domains.length);
//                 }
//                 return super.range([0,this.__colorranges.length-1]);
//             }
//              rangeBounds(ranges: any[]) {
//                 if(ranges.length > 1){
//                     this.__colorranges =ColorUtils.gradientColor(ranges[0],ranges[ranges.length-1],this.__domains.length);
//                 }
//                 return super.range([0,this.__colorranges.length-1]);
//             }
//             getScaleValue(v: any):any {
//                 var index = this.__domains.indexOf(v);
//                 return this.__colorranges[index];
//             }
//         }
//     }
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var ElementType;
        (function (ElementType) {
            ElementType[ElementType["Shape"] = 0] = "Shape";
            ElementType[ElementType["Series"] = 1] = "Series";
            ElementType[ElementType["Axis"] = 2] = "Axis";
            ElementType[ElementType["SeriesLegend"] = 3] = "SeriesLegend";
            ElementType[ElementType["ScaleLegend"] = 4] = "ScaleLegend";
        })(ElementType = test.ElementType || (test.ElementType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var LegendType;
        (function (LegendType) {
            LegendType[LegendType["Series"] = 0] = "Series";
            LegendType[LegendType["Color"] = 1] = "Color";
            LegendType[LegendType["Size"] = 2] = "Size"; // Scale Type from SizeScale    
        })(LegendType = test.LegendType || (test.LegendType = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var View = android.view.View;
            var Style = android.graphics.Style;
            var LinearGradient = android.graphics.LinearGradient;
            var FillStyle = android.graphics.FillStyle;
            var LinearScaleLegend = /** @class */ (function (_super) {
                __extends(LinearScaleLegend, _super);
                function LinearScaleLegend(c, type) {
                    var _this = _super.call(this, c) || this;
                    _this.__type = null;
                    _this.__type = type;
                    return _this;
                }
                Object.defineProperty(LinearScaleLegend.prototype, "scale", {
                    get: function () {
                        return this.__scale;
                    },
                    set: function (scale) {
                        this.__scale = scale;
                    },
                    enumerable: true,
                    configurable: true
                });
                // onMeasure(width: MeasureSpec, height: MeasureSpec, canvas: Canvas): Size{
                //     return super.onMeasure(width,height,canvas);
                // }
                // onLayout(l: number, t: number, r: number, b: number, canvas: Canvas): void{
                //     super.onLayout(l,t,r,b,canvas);
                // }
                LinearScaleLegend.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                    if (this.__type == 'size') {
                    }
                    else if (this.__type == 'color') {
                        this._drawColorScale(canvas);
                    }
                };
                LinearScaleLegend.prototype._drawColorScale = function (canvas) {
                    var colorScale = this.__scale;
                    if (colorScale instanceof test.LinearScale) {
                        // color = ColorUtils.getColor(colorScale.startPosition,colorScale.endPosition,colorValue.value,colorScale.min,colorScale.max);
                        var sx = this.layoutInfo.innerrect.left + this.layoutInfo.innerrect.width / 2;
                        var sy = this.layoutInfo.innerrect.top;
                        var ex = sy;
                        var ey = this.layoutInfo.innerrect.bottom;
                        var l = new LinearGradient(sx, sy, ex, ey, [
                            { offset: 0, color: colorScale.startPosition },
                            { offset: 1, color: colorScale.endPosition }
                        ]);
                        var fill = new FillStyle();
                        fill.fill = l;
                        var style = new Style(fill, null);
                        canvas.drawRect(this.layoutInfo.innerrect.startPoint, this.layoutInfo.innerrect.endPoint, true, style);
                    }
                };
                return LinearScaleLegend;
            }(View));
            cartesian.LinearScaleLegend = LinearScaleLegend;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var LinearLayout = android.widget.LinearLayout;
            var Default = android.device.Default;
            var LayoutParams = android.view.LayoutParams;
            var OrdinalScaleLegend = /** @class */ (function (_super) {
                __extends(OrdinalScaleLegend, _super);
                function OrdinalScaleLegend(c, type) {
                    var _this = _super.call(this, c) || this;
                    _this.__type = null;
                    _this.__type = type;
                    _this.wrap = true;
                    return _this;
                }
                Object.defineProperty(OrdinalScaleLegend.prototype, "scale", {
                    get: function () {
                        return this.__scale;
                    },
                    set: function (scale) {
                        this.__scale = scale;
                        this.__loadItems();
                    },
                    enumerable: true,
                    configurable: true
                });
                OrdinalScaleLegend.prototype.__loadItems = function () {
                    var colorScale = this.__scale;
                    if (colorScale instanceof test.OrdinalScale) {
                        if (this.__type == 'color') {
                            var colorArray = null;
                            if (colorScale.startPosition == null || colorScale.endPosition == null) {
                                colorArray = colorScale.ranges;
                            }
                            else {
                                colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                            }
                            var len = colorArray.length;
                            var step = this.layoutInfo.innerrect.width / len;
                            var left = this.layoutInfo.innerrect.left;
                            var top_1 = this.layoutInfo.innerrect.top;
                            var height = this.layoutInfo.innerrect.height;
                            var style = Default.style;
                            for (var _i = 0, colorArray_1 = colorArray; _i < colorArray_1.length; _i++) {
                                var color = colorArray_1[_i];
                                var item = new test.LegendItem(this.getContext());
                                item.name = color;
                                item.padding = new android.graphics.Padding(5);
                                item.layoutParams.width = LayoutParams.WRAP_CONTENT;
                                item.layoutParams.height = LayoutParams.WRAP_CONTENT;
                                item.icon = new test.BarIcon();
                                item.icon.color = color;
                                // this.children.push(item);
                                this.addViewWithOutReLayout(item);
                            }
                        }
                    }
                };
                OrdinalScaleLegend.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                OrdinalScaleLegend.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                };
                OrdinalScaleLegend.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                };
                return OrdinalScaleLegend;
            }(LinearLayout));
            cartesian.OrdinalScaleLegend = OrdinalScaleLegend;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var LinearLayout = android.widget.LinearLayout;
            var LayoutParams = android.view.LayoutParams;
            var SeriesLegend = /** @class */ (function (_super) {
                __extends(SeriesLegend, _super);
                function SeriesLegend(c, shape) {
                    var _this = _super.call(this, c) || this;
                    _this.__shape = shape;
                    return _this;
                }
                Object.defineProperty(SeriesLegend.prototype, "series", {
                    get: function () {
                        return this._series;
                    },
                    set: function (value) {
                        this._series = value;
                        this.__loadItems();
                    },
                    enumerable: true,
                    configurable: true
                });
                SeriesLegend.prototype.__loadItems = function () {
                    this.removeAllViews();
                    var colorArray = [];
                    for (var i = 0; i < this.series.length; ++i) {
                        var item = new test.LegendItem(this.getContext(), { enable: this.series[i].enable });
                        item.name = this.series[i].name;
                        if (this.__shape == 'bar') {
                            item.icon = new test.BarIcon();
                        }
                        else if (this.__shape == 'scatter') {
                            item.icon = new test.CircleIcon();
                        }
                        item.icon.color = test.ColorUtils.indexColor(i);
                        item.padding = new android.graphics.Padding(5);
                        item.layoutParams.width = LayoutParams.WRAP_CONTENT;
                        item.layoutParams.height = LayoutParams.WRAP_CONTENT;
                        this.children.push(item);
                    }
                };
                return SeriesLegend;
            }(LinearLayout));
            cartesian.SeriesLegend = SeriesLegend;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Shape = /** @class */ (function (_super) {
            __extends(Shape, _super);
            function Shape(context) {
                var _this = _super.call(this, context) || this;
                _this.priority = Shape.PRIORITY;
                return _this;
            }
            Object.defineProperty(Shape.prototype, "style", {
                get: function () {
                    return this._style;
                },
                set: function (value) {
                    this._style = value;
                },
                enumerable: true,
                configurable: true
            });
            Shape.prototype.onDraw = function (canvas) {
                _super.prototype.onDraw.call(this, canvas);
                // console.log("onDraw  " + this.comparedAnimationEmpty );
                // console.log(this);
                if (this.comparedAnimationEmpty) {
                    this.onDrawShape(canvas);
                }
                else {
                    this._drawAnimation(canvas);
                }
            };
            Shape.prototype._drawAnimation = function (canvas) {
                canvas.drawPolygon(this.animationXs, this.animationYs, this.style);
            };
            Shape.prototype.onMouseEvent = function (event) {
                return true;
            };
            Shape.PRIORITY = 10000;
            return Shape;
        }(android.ComparedView));
        test.Shape = Shape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Label = /** @class */ (function (_super) {
            __extends(Label, _super);
            function Label(c, text, cx, cy, w, h, angle, padding) {
                var _this = _super.call(this, c) || this;
                _this.__padding = 0;
                _this.priority = test.Shape.PRIORITY * 10;
                _this.__padding = padding;
                _this.text = text;
                _this.labelrect = new test.RotateRect(cx, cy, w + padding * 2, h + padding * 2, (angle == null || isNaN(angle)) ? 0 : angle);
                _this._xs = [];
                _this._ys = [];
                for (var i = 0; i < 4 && i < _this.labelrect.points.length; ++i) {
                    _this._xs[i] = _this.labelrect.points[i].x;
                    _this._ys[i] = _this.labelrect.points[i].y;
                }
                return _this;
            }
            Label.prototype.getpts = function (size) {
                return { xs: this._xs, ys: this._ys };
            };
            Label.prototype.onDrawShape = function (canvas) {
                canvas.drawPolygon(this._xs, this._ys, this.background);
                var pt = this.labelrect.leftTop.clone();
                pt.offset(this.__padding, this.__padding);
                canvas.drawText(this.text, pt, this._font);
            };
            Label.prototype.refresh = function () {
            };
            return Label;
        }(test.Shape));
        test.Label = Label;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var PlotShape = /** @class */ (function (_super) {
            __extends(PlotShape, _super);
            function PlotShape() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(PlotShape.prototype, "label", {
                get: function () {
                    return this._label;
                },
                set: function (value) {
                    if (value != null && value != this._label) {
                        this._label = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            // onDraw(canvas: Canvas): void {
            //     super.onDraw(canvas);
            //     if (this._label != null) {
            //         this._label.onDraw(canvas);
            //     }
            // }
            PlotShape.prototype.refresh = function () {
                // console.log(" *** you, this function is not been implemented yet!!! ");
            };
            return PlotShape;
        }(test.Shape));
        test.PlotShape = PlotShape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Animation = android.view.animation.Animation;
        var MotionEvent = android.view.event.MotionEvent;
        var BarShape = /** @class */ (function (_super) {
            __extends(BarShape, _super);
            function BarShape(c, x, y, w, h, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                var top = y;
                var left = x;
                var height = h;
                var width = w;
                if (height < 0) {
                    top = top + height;
                    height = Math.abs(height);
                }
                _this.priority = ++BarShape.BarPrority;
                _this.layoutInfo.reset(left, top, left + width, top + height, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            BarShape.prototype.onDrawShape = function (canvas) {
                window['renderTimes']++;
                canvas.drawRect(this.layoutInfo.innerrect.startPoint, this.layoutInfo.innerrect.endPoint, true, this._style);
            };
            BarShape.prototype.onMouseEvent = function (event) {
                switch (event.action) {
                    case MotionEvent.ACTION_MOUSE_ON:
                        var animation_on = new BarWidthAnimation(this.layoutInfo.innerrect);
                        animation_on.duration = 400;
                        animation_on.from = 1;
                        animation_on.to = 1.3;
                        animation_on.fillAfter = true;
                        animation_on.id = "mouseOn Animation ";
                        this.startAnimation(animation_on);
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        var animation_out = new BarWidthAnimation(this.layoutInfo.innerrect);
                        animation_out.duration = 200;
                        animation_out.from = 1.3;
                        animation_out.to = 1;
                        animation_out.id = "mouseOut Animation ";
                        animation_out.fillAfter = false;
                        this.startAnimation(animation_out);
                        break;
                    case MotionEvent.ACTION_MOUSE_MOVE:
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        break;
                }
                return true;
            };
            BarShape.BarPrority = test.Shape.PRIORITY * 2;
            return BarShape;
        }(test.PlotShape));
        test.BarShape = BarShape;
        var BarAnimation = /** @class */ (function (_super) {
            __extends(BarAnimation, _super);
            function BarAnimation(rect) {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            BarAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof BarShape) {
                    var scale = this.from + (this.to - this.from) * interpolatedTime;
                    var rect = this.rect.clone();
                    view.layoutInfo.innerrect.top = this.rect.top + this.rect.height - this.rect.height * scale;
                    view.layoutInfo.innerrect.height = this.rect.height * scale;
                }
            };
            BarAnimation.prototype.onStartAniamtion = function (canvas, view) {
                this.rect = view.layoutInfo.innerrect.clone();
            };
            BarAnimation.prototype.onEndAnimation = function (canvas, view) {
            };
            return BarAnimation;
        }(Animation));
        test.BarAnimation = BarAnimation;
        var BarWidthAnimation = /** @class */ (function (_super) {
            __extends(BarWidthAnimation, _super);
            function BarWidthAnimation(rect) {
                var _this = _super.call(this) || this;
                _this.id = "";
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            BarWidthAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof BarShape) {
                    var scale = this.from + (this.to - this.from) * interpolatedTime;
                    var rect = this.rect.clone();
                    // scale = scale - 1;
                    view.layoutInfo.innerrect.left = this.rect.left + (this.rect.width - this.rect.width * scale) / 2;
                    view.layoutInfo.innerrect.width = this.rect.width * scale;
                }
            };
            BarWidthAnimation.prototype.onStartAniamtion = function (canvas, view) {
                // console.log("onStartAniamtion ");
                _super.prototype.onStartAniamtion.call(this, canvas, view);
                this.rect = view.layoutInfo.innerrect.clone();
            };
            BarWidthAnimation.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                // view.layoutInfo.innerrect = this.rect;
                // console.log("onAnimationEnd " + view.layoutInfo.innerrect.width + "  ");
            };
            return BarWidthAnimation;
        }(Animation));
        test.BarWidthAnimation = BarWidthAnimation;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Animation = android.view.animation.Animation;
        var MotionEvent = android.view.event.MotionEvent;
        var Debug = android.Debug;
        var CubeShape = /** @class */ (function (_super) {
            __extends(CubeShape, _super);
            function CubeShape(c, x, y, w, h, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.__oldColor = null;
                var top = y;
                var left = x;
                var height = h;
                var width = w;
                if (height < 0) {
                    top = top + height;
                    height = Math.abs(height);
                }
                _this.priority = ++CubeShape.CubePrority;
                _this.layoutInfo.reset(left, top, left + width, top + height, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                _this.background = null;
                return _this;
            }
            CubeShape.prototype.onDrawShape = function (canvas) {
                window['renderTimes']++;
                canvas.drawRect(this.layoutInfo.innerrect.startPoint, this.layoutInfo.innerrect.endPoint, true, this._style);
                if (this.animation == null || this.animation.isAniamtionEnd) {
                    canvas.drawText(this.text, this.layoutInfo.innerrect.startPoint, Default.font);
                }
            };
            CubeShape.prototype.invalidate = function (flg) {
                _super.prototype.invalidate.call(this, flg);
                // console.log("cubeinvalidate  " +( window['cubeinvalidate'] ==null? window['cubeinvalidate']=0: window['cubeinvalidate']++));
                Debug.logstack("cubeinvalidate  " + (window['cubeinvalidate'] == null ? window['cubeinvalidate'] = 0 : window['cubeinvalidate']++));
            };
            CubeShape.prototype.onMouseEvent = function (event) {
                switch (event.action) {
                    case MotionEvent.ACTION_MOUSE_ON:
                        if (typeof this.style.background == 'string') {
                            if (this.__oldColor == null) {
                                this.__oldColor = this.style.background;
                            }
                            var colors = test.ColorUtils.gradientColor(this.__oldColor, '#ffffff', 3);
                            this.style.background = colors[1];
                        }
                        console.log("mouse on ");
                        this.invalidate(true);
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        this.style.background = this.__oldColor;
                        this.invalidate(true);
                        console.log("mouse out ");
                        break;
                    case MotionEvent.ACTION_MOUSE_MOVE:
                        break;
                    case MotionEvent.ACTION_CLICK:
                        console.log("click ");
                        if (this.scaleCallBack != null) {
                            this.scaleCallBack(this.layoutInfo.innerrect);
                        }
                        break;
                }
                return true;
            };
            CubeShape.prototype.getComparedAnimation = function (fromview) {
                var animation = new _Animation(fromview.layoutInfo.innerrect.clone(), this.layoutInfo.innerrect.clone());
                animation.duration = 500;
                animation.fillAfter = true;
                animation.from = 0;
                animation.to = 1;
                return animation;
            };
            CubeShape.CubePrority = test.Shape.PRIORITY * 1;
            return CubeShape;
        }(test.PlotShape));
        test.CubeShape = CubeShape;
        var _Animation = /** @class */ (function (_super) {
            __extends(_Animation, _super);
            function _Animation(fromrect, torect) {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.AnimationEase();
                _this.fromrect = fromrect;
                _this.torect = torect;
                return _this;
            }
            _Animation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                var scale = this.from + (this.to - this.from) * interpolatedTime;
                view.layoutInfo.innerrect.left = this.fromrect.left + (this.torect.left - this.fromrect.left) * scale;
                view.layoutInfo.innerrect.top = this.fromrect.top + (this.torect.top - this.fromrect.top) * scale;
                view.layoutInfo.innerrect.width = this.fromrect.width + (this.torect.width - this.fromrect.width) * scale;
                view.layoutInfo.innerrect.height = this.fromrect.height + (this.torect.height - this.fromrect.height) * scale;
            };
            _Animation.prototype.onStartAniamtion = function (canvas, view) {
                _super.prototype.onStartAniamtion.call(this, canvas, view);
            };
            _Animation.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                view.layoutInfo.innerrect = view._oldLayoutInfo.innerrect.clone();
            };
            return _Animation;
        }(Animation));
        var CubeAnimation = /** @class */ (function (_super) {
            __extends(CubeAnimation, _super);
            function CubeAnimation(rect) {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            CubeAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof CubeShape) {
                    var scale = this.from + (this.to - this.from) * interpolatedTime;
                    var rect = this.rect.clone();
                    // scale = scale - 1;
                    view.layoutInfo.innerrect.left = this.rect.left + (this.rect.width - this.rect.width * scale) / 2;
                    view.layoutInfo.innerrect.width = this.rect.width * scale;
                    view.layoutInfo.innerrect.top = this.rect.top + (this.rect.height - this.rect.height * scale) / 2;
                    view.layoutInfo.innerrect.height = this.rect.height * scale;
                    // console.log('bar height === ' + view.layoutInfo.innerrect.height +" scale " + scale +"  interpolatedTime "+interpolatedTime);
                }
            };
            CubeAnimation.prototype.onStartAniamtion = function (canvas, view) {
                // console.log("onStartAniamtion ");
                _super.prototype.onStartAniamtion.call(this, canvas, view);
                this.rect = view.layoutInfo.innerrect.clone();
            };
            CubeAnimation.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                // view.layoutInfo.innerrect = this.rect;
                // console.log("onAnimationEnd " + view.layoutInfo.innerrect.width + "  ");
            };
            return CubeAnimation;
        }(Animation));
        test.CubeAnimation = CubeAnimation;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Point = android.graphics.Point;
        var Util = android.graphics.Util;
        var RadialBarShape = /** @class */ (function (_super) {
            __extends(RadialBarShape, _super);
            function RadialBarShape(c, cx, cy, innerRadius, radius, startAngle, sweep, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.layoutInfo.reset(cx - radius, cy - radius, cx + radius, cy + radius, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._cx = cx;
                _this._cy = cy;
                _this._innerRadius = innerRadius;
                _this._radius = radius;
                _this._startAngle = startAngle;
                _this._sweep = sweep;
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                    _this._strokeStyle.strokeWidth = 1;
                    _this._strokeStyle.strokeColor = 'red';
                }
                if (_this._sweep < 0) {
                    _this._startAngle = _this._startAngle + _this._sweep;
                    _this._sweep = _this._sweep * -1;
                }
                return _this;
            }
            RadialBarShape.prototype.getpts = function (size) {
                if (this._pts == null) {
                    this._pts = Util.createPtsFromRadialBar(this._startAngle, this._startAngle + this._sweep, this._radius, this._innerRadius, new Point(this._cx, this._cy), this.ptcount);
                }
                return this._pts;
            };
            RadialBarShape.prototype.onDrawShape = function (canvas) {
                canvas.drawDonut(this._cx, this._cy, this._radius, this._innerRadius, this._startAngle, this._sweep, this._style);
            };
            return RadialBarShape;
        }(test.PlotShape));
        test.RadialBarShape = RadialBarShape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Animation = android.view.animation.Animation;
        var SunburstShape = /** @class */ (function (_super) {
            __extends(SunburstShape, _super);
            function SunburstShape(c, cx, cy, innerRadius, radius, startAngle, sweep, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.layoutInfo.reset(cx - radius, cy - radius, cx + radius, cy + radius, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._cx = cx;
                _this._cy = cy;
                _this._innerRadius = innerRadius;
                _this._radius = radius;
                _this._startAngle = startAngle;
                _this._sweep = sweep;
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                if (_this._sweep < 0) {
                    _this._startAngle = _this._startAngle + _this._sweep;
                    _this._sweep = _this._sweep * -1;
                }
                return _this;
            }
            SunburstShape.prototype.onDrawShape = function (canvas) {
                canvas.drawDonut(this._cx, this._cy, this._radius, this._innerRadius, this._startAngle, this._sweep, this._style);
            };
            return SunburstShape;
        }(test.PlotShape));
        test.SunburstShape = SunburstShape;
        var RadiusAnimation = /** @class */ (function (_super) {
            __extends(RadiusAnimation, _super);
            function RadiusAnimation() {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            RadiusAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    var scale = this.from + (this.to - this.from) * interpolatedTime;
                    view._radius = scale * this._radius;
                    // console.log('bar height === ' + view.layoutInfo.innerrect.height +" scale " + scale +"  interpolatedTime "+interpolatedTime);
                }
            };
            RadiusAnimation.prototype.onStartAniamtion = function (canvas, view) {
                // console.log("onStartAniamtion ");
                _super.prototype.onStartAniamtion.call(this, canvas, view);
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    this._radius = view._radius;
                    this._sweep = view._sweep;
                }
            };
            RadiusAnimation.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                // view.layoutInfo.innerrect = this.rect;
                // console.log("onAnimationEnd " + view.layoutInfo.innerrect.width + "  ");
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    view._radius = this._radius;
                    view._sweep = this._sweep;
                }
            };
            return RadiusAnimation;
        }(Animation));
        test.RadiusAnimation = RadiusAnimation;
        var SweepAnimation = /** @class */ (function (_super) {
            __extends(SweepAnimation, _super);
            function SweepAnimation() {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            SweepAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    var scale = this.from + (this.to - this.from) * interpolatedTime;
                    view._sweep = scale * this._sweep;
                    // console.log('bar height === ' + view.layoutInfo.innerrect.height +" scale " + scale +"  interpolatedTime "+interpolatedTime);
                }
            };
            SweepAnimation.prototype.onStartAniamtion = function (canvas, view) {
                // console.log("onStartAniamtion ");
                _super.prototype.onStartAniamtion.call(this, canvas, view);
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    this._radius = view._radius;
                    this._sweep = view._sweep;
                }
            };
            SweepAnimation.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                // view.layoutInfo.innerrect = this.rect;
                // console.log("onAnimationEnd " + view.layoutInfo.innerrect.width + "  ");
                if (view instanceof SunburstShape || view instanceof test.RadialBarShape) {
                    view._radius = this._radius;
                    view._sweep = this._sweep;
                }
            };
            return SweepAnimation;
        }(Animation));
        test.SweepAnimation = SweepAnimation;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var MotionEvent = android.view.event.MotionEvent;
        var Animation = android.view.animation.Animation;
        var Util = android.graphics.Util;
        var ScatterShape = /** @class */ (function (_super) {
            __extends(ScatterShape, _super);
            function ScatterShape(c, x, y, w, h, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                var top = y;
                var left = x;
                var height = h;
                var width = w;
                if (height < 0) {
                    top = top + height;
                    height = Math.abs(height);
                }
                _this.layoutInfo.reset(left, top, left + width, top + height, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                    _this._strokeStyle.strokeColor = 'black';
                    _this._strokeStyle.strokeWidth = 1;
                }
                _this.priority = ++ScatterShape.ScatterPrority;
                return _this;
            }
            ScatterShape.prototype.onDrawShape = function (canvas) {
                canvas.drawArc(this.layoutInfo.innerrect, 0, 2 * 180, this.style);
            };
            // protected _drawAnimation(canvas:Canvas):void{
            //     canvas.drawLines(this.animationXs,this.animationYs,this._strokeStyle);
            // }
            ScatterShape.prototype.getpts = function (size) {
                if (this._pts == null) {
                    var radius = (this.layoutInfo.innerrect.width < this.layoutInfo.innerrect.height ? this.layoutInfo.innerrect.width : this.layoutInfo.innerrect.height) / 2;
                    var center = this.layoutInfo.innerrect.center;
                    this._pts = Util.createPtsFromCircle(this.layoutInfo.innerrect.width / 2, center, this.ptcount);
                }
                return this._pts;
            };
            ScatterShape.prototype.onMouseEvent = function (event) {
                console.log("shape ==== " + event.toString());
                switch (event.action) {
                    case MotionEvent.ACTION_MOUSE_ON:
                        var animation = new ScatterAnimation(this.layoutInfo.innerrect);
                        animation.duration = 400;
                        animation.from = 1;
                        animation.to = 1.2;
                        animation.fillAfter = true;
                        this.startAnimation(animation);
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        var animation_out = new ScatterAnimation(this.layoutInfo.innerrect);
                        animation_out.duration = 200;
                        animation_out.from = 1.2;
                        animation_out.to = 1;
                        animation_out.fillAfter = false;
                        if (this.animation != null && this.animation instanceof ScatterAnimation) {
                            this.animation.interrupt();
                        }
                        this.startAnimation(animation_out);
                        break;
                    case MotionEvent.ACTION_MOUSE_MOVE:
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        break;
                }
                return true;
            };
            ScatterShape.ScatterPrority = test.Shape.PRIORITY * 3;
            return ScatterShape;
        }(test.PlotShape));
        test.ScatterShape = ScatterShape;
        var ScatterAnimation = /** @class */ (function (_super) {
            __extends(ScatterAnimation, _super);
            function ScatterAnimation(rect) {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.BounceAnimationEase();
                return _this;
            }
            ScatterAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                // if (view instanceof ScatterShape) {
                var scale = this.from + (this.to - this.from) * interpolatedTime;
                // let dx :number=-view.layoutInfo.innerrect.left;
                // let dy :number=-view.layoutInfo.innerrect.top;
                // canvas.translate(dx,dy);
                // canvas.scale(scale,scale);
                // canvas.translate(view.layoutInfo.innerrect.width,view.layoutInfo.innerrect.height);
                var rect = this.rect.clone();
                scale = scale - 1;
                view.layoutInfo.innerrect.left = this.rect.left - (scale * view.layoutInfo.innerrect.width / 2);
                view.layoutInfo.innerrect.top = this.rect.top - (scale * view.layoutInfo.innerrect.height / 2);
                view.layoutInfo.innerrect.width = this.rect.width + (scale * view.layoutInfo.innerrect.width);
                view.layoutInfo.innerrect.height = this.rect.height + (scale * view.layoutInfo.innerrect.height);
                // console.log("scatter width  " + view.layoutInfo.innerrect.width + " rect.width " + rect.width + " scale " + scale);
                // }
            };
            ScatterAnimation.prototype.onStartAniamtion = function (canvas, view) {
                // console.log("onStartAniamtion ");
                this.rect = view.layoutInfo.innerrect.clone();
            };
            ScatterAnimation.prototype.onEndAnimation = function (canvas, view) {
                // view.layoutInfo.innerrect = this.rect;
                // console.log("onAnimationEnd " + view.layoutInfo.innerrect.width + "  ");
            };
            return ScatterAnimation;
        }(Animation));
        test.ScatterAnimation = ScatterAnimation;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Util = android.graphics.Util;
        var LinesShape = /** @class */ (function (_super) {
            __extends(LinesShape, _super);
            function LinesShape(context, xs, ys, style, strokeStyle) {
                var _this = _super.call(this, context) || this;
                _this.priority = ++LinesShape.LinesPrority;
                _this.__xs = xs;
                _this.__ys = ys;
                var l = test.Utility.min(xs);
                var t = test.Utility.min(ys);
                var r = test.Utility.max(xs);
                var b = test.Utility.max(ys);
                _this.layoutInfo.reset(l, t, r, b, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            Object.defineProperty(LinesShape.prototype, "strokeStyle", {
                get: function () {
                    return this._strokeStyle;
                },
                set: function (value) {
                    this._strokeStyle = value;
                },
                enumerable: true,
                configurable: true
            });
            LinesShape.prototype.getpts = function (size) {
                if (this._pts == null) {
                    this._pts = { xs: this.__xs, ys: this.__ys };
                }
                return this._pts;
            };
            LinesShape.prototype.trace = function (x, y) {
                if (this.layoutInfo.outterrect.contains(x, y)) {
                    for (var i = 0; i < Math.min(this.__xs.length, this.__ys.length); ++i) {
                        if (Util.Point2Line(this.__xs[i], this.__ys[i], this.__xs[i + 1], this.__ys[i + 1], x, y) < 10) {
                            return true;
                        }
                    }
                }
                return false;
            };
            LinesShape.prototype.onMouseEvent = function (event) {
                return _super.prototype.onMouseEvent.call(this, event);
            };
            LinesShape.prototype.onDrawShape = function (canvas) {
                canvas.save();
                canvas.clip(this.layoutInfo.innerrect);
                canvas.drawLines(this.__xs, this.__ys, this._strokeStyle);
                canvas.restore();
            };
            LinesShape.prototype._drawAnimation = function (canvas) {
                console.log('drawAnimation ');
                canvas.drawLines(this.animationXs, this.animationYs, this._strokeStyle);
            };
            LinesShape.LinesPrority = test.PlotShape.PRIORITY * 4;
            return LinesShape;
        }(test.PlotShape));
        test.LinesShape = LinesShape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Animation = android.view.animation.Animation;
        var MotionEvent = android.view.event.MotionEvent;
        var Point = android.graphics.Point;
        var Util = android.graphics.Util;
        var AreaShape = /** @class */ (function (_super) {
            __extends(AreaShape, _super);
            function AreaShape(context, xs, ys, style, strokeStyle) {
                var _this = _super.call(this, context) || this;
                _this.priority = test.Shape.PRIORITY + 1;
                _this.__xs = xs;
                _this.__ys = ys;
                _this._style = style;
                var l = Math.min.apply(Math, xs);
                var t = Math.min.apply(Math, ys);
                var r = Math.max.apply(Math, xs);
                var b = Math.max.apply(Math, ys);
                _this.layoutInfo.reset(l, t, r, b, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            Object.defineProperty(AreaShape.prototype, "strokeStyle", {
                get: function () {
                    return this._strokeStyle;
                },
                set: function (value) {
                    this._strokeStyle = value;
                },
                enumerable: true,
                configurable: true
            });
            AreaShape.prototype.trace = function (x, y) {
                return Util.IsPointInPolygon2(new Point(x, y), this.__xs, this.__ys);
            };
            AreaShape.prototype.onDrawShape = function (canvas) {
                canvas.save();
                canvas.clip(this.layoutInfo.innerrect);
                canvas.drawPolygon(this.__xs, this.__ys, this.style);
                canvas.restore();
            };
            AreaShape.prototype.getpts = function (size) {
                if (this._pts == null) {
                    this._pts = { xs: this.__xs, ys: this.__ys };
                }
                return this._pts;
            };
            AreaShape.prototype.onMouseEvent = function (event) {
                switch (event.action) {
                    case MotionEvent.ACTION_MOUSE_ON:
                        console.log("mouse on ");
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        console.log("mouse out ");
                        break;
                    case MotionEvent.ACTION_MOUSE_MOVE:
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        break;
                }
                return true;
            };
            return AreaShape;
        }(test.PlotShape));
        test.AreaShape = AreaShape;
        var AreaAnimation = /** @class */ (function (_super) {
            __extends(AreaAnimation, _super);
            function AreaAnimation(rect) {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.AnimationEase();
                return _this;
            }
            AreaAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                var scale = this.from + (this.to - this.from) * interpolatedTime;
                var rect = this.rect.clone();
                view.layoutInfo.innerrect.width = this.rect.width * scale;
            };
            AreaAnimation.prototype.onStartAniamtion = function (canvas, view) {
                this.rect = view.layoutInfo.innerrect.clone();
            };
            AreaAnimation.prototype.onEndAnimation = function (canvas, view) {
            };
            return AreaAnimation;
        }(Animation));
        test.AreaAnimation = AreaAnimation;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Point = android.graphics.Point;
        var AxisLineShape = /** @class */ (function (_super) {
            __extends(AxisLineShape, _super);
            function AxisLineShape(c, x, y, ex, ey, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.startPoint = new Point(x, y);
                _this.endPoint = new Point(ex, ey);
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            AxisLineShape.prototype.onDrawShape = function (canvas) {
                canvas.drawLine(this.startPoint, this.endPoint, this._strokeStyle);
            };
            AxisLineShape.prototype.refresh = function () { };
            return AxisLineShape;
        }(test.Shape));
        test.AxisLineShape = AxisLineShape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        /**
         * BaseLayout
         */
        var BaseLayout = /** @class */ (function () {
            function BaseLayout(context) {
                this.__shapelist = [];
                this.__context = context;
            }
            Object.defineProperty(BaseLayout.prototype, "context", {
                get: function () {
                    return this.__context;
                },
                enumerable: true,
                configurable: true
            });
            BaseLayout.prototype.convert = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                throw 'fuck Error';
            };
            Object.defineProperty(BaseLayout.prototype, "shapeList", {
                get: function () {
                    return this.__shapelist;
                },
                enumerable: true,
                configurable: true
            });
            return BaseLayout;
        }());
        test.BaseLayout = BaseLayout;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            /**
             * BaseLayout
             */
            var CartesianBaseLayout = /** @class */ (function (_super) {
                __extends(CartesianBaseLayout, _super);
                function CartesianBaseLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CartesianBaseLayout;
            }(test.BaseLayout));
            cartesian.CartesianBaseLayout = CartesianBaseLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var CartesianLayout = /** @class */ (function (_super) {
                __extends(CartesianLayout, _super);
                function CartesianLayout(c) {
                    var _this = _super.call(this, c) || this;
                    _this.barStyle = Default.style;
                    _this.lineStyle = Default.strokestyle;
                    _this._locationCache = [];
                    _this._stack = false;
                    _this._rect = null;
                    return _this;
                }
                CartesianLayout.prototype.convert = function (serieslist, encoding, rect, canvas) {
                    this.__shapelist.length = 0;
                    this._serieslist = [];
                    for (var _i = 0, serieslist_1 = serieslist; _i < serieslist_1.length; _i++) {
                        var ser = serieslist_1[_i];
                        this._serieslist.push(ser.clone());
                    }
                    this._encoding = encoding;
                    this._locationCache = [];
                    this.__scalePairs = [];
                    this._stack = encoding._stack;
                    this._rect = rect;
                    this.__analyseScales();
                    for (var i = 0; i < this._serieslist.length; ++i) {
                        this._layoutSeries(this._serieslist[i], i, canvas);
                    }
                    return this.__shapelist;
                };
                CartesianLayout.prototype.__analyseScales = function () {
                    this._createLayoutScales(this._encoding);
                    for (var _i = 0, _a = this._serieslist; _i < _a.length; _i++) {
                        var ser = _a[_i];
                        for (var _b = 0, _c = ser.scalePairs; _b < _c.length; _b++) {
                            var scalepair = _c[_b];
                            var filed = scalepair.filed;
                            var scale = scalepair.scale;
                            if (filed.name == 'x') {
                                if (scale instanceof test.OrdinalScale) {
                                    if (filed.band === true) {
                                        scale.rangeBounds([this._rect.left, this._rect.right]);
                                    }
                                    else {
                                        scale.range([this._rect.left, this._rect.right]);
                                    }
                                }
                                else {
                                    scale.range([this._rect.left, this._rect.right]);
                                }
                            }
                            else if (filed.name == 'y') {
                                if (scale instanceof test.OrdinalScale) {
                                    if (filed.band === true) {
                                        scale.rangeBounds([this._rect.bottom, this._rect.top]);
                                    }
                                    else {
                                        scale.range([this._rect.bottom, this._rect.top]);
                                    }
                                }
                                else {
                                    var ticker = test.LinearTicks.create(scale);
                                    scale = ticker.niceScale();
                                    scale.range([this._rect.bottom, this._rect.top]);
                                }
                            }
                        }
                    }
                };
                CartesianLayout.prototype._createLayoutScales = function (encoding) {
                    if (this._serieslist.length > 1) {
                        for (var i = 0; i < this._serieslist.length; ++i) {
                            var series = this._serieslist[i];
                            for (var _i = 0, _a = series.scalePairs; _i < _a.length; _i++) {
                                var pair = _a[_i];
                                var filed = pair.filed;
                                var hasadded = false;
                                for (var _b = 0, _c = this.__scalePairs; _b < _c.length; _b++) {
                                    var p = _c[_b];
                                    if (!p.filed.equals(filed) || !p.scale.equal(pair.scale)) {
                                        continue;
                                    }
                                    else {
                                        hasadded = true;
                                        p.series.push(series.name);
                                        break;
                                    }
                                }
                                if (!hasadded) {
                                    this.__scalePairs.push({ series: [series.name], filed: filed, scale: pair.scale });
                                }
                            }
                        }
                    }
                    else if (this._serieslist.length == 1) {
                        // this.__scalePairs = this._serieslist[0].scalePairs;
                        var series = this._serieslist[0];
                        // this.__scalePairs.push({series:[series.name], filed: series.filed, scale: pair.scale });
                        for (var _d = 0, _e = series.scalePairs; _d < _e.length; _d++) {
                            var pair = _e[_d];
                            this.__scalePairs.push({ series: [series.name], filed: pair.filed, scale: pair.scale });
                        }
                    }
                };
                Object.defineProperty(CartesianLayout.prototype, "maxSeriesSize", {
                    get: function () {
                        var xscale = this._getScale('x');
                        if (xscale instanceof test.OrdinalScale) {
                            return xscale.domains.length;
                        }
                        else {
                            return test.Utility.max(this._serieslist.map(function (ser, index, array) { return ser.size; }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartesianLayout.prototype, "scalePairs", {
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                CartesianLayout.prototype._getScale = function (name) {
                    var index = _.findIndex(this.__scalePairs, function (item) {
                        return item.filed.name == name;
                    });
                    return this.__scalePairs[index].scale;
                };
                return CartesianLayout;
            }(test.BaseLayout));
            cartesian.CartesianLayout = CartesianLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Style = android.graphics.Style;
            var Default = android.device.Default;
            var BarLayout = /** @class */ (function (_super) {
                __extends(BarLayout, _super);
                function BarLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(BarLayout.prototype, "barWidth", {
                    get: function () {
                        return this._rect.width / this.maxSeriesSize / (this._stack ? 1 : this._serieslist.length) * 0.9;
                    },
                    enumerable: true,
                    configurable: true
                });
                BarLayout.prototype._layoutSeries = function (series, index, canvas) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var colorArray = [];
                    if (colorScale instanceof test.OrdinalScale) {
                        // colorScale = colorScale.clone();
                        // colorArray = ColorUtils.gradientColor(colorScale.startPosition,colorScale.endPosition,(<OrdinalScale>colorScale).domains.length);
                        // colorScale.range([0,(<OrdinalScale>colorScale).domains.length-1]);
                        colorScale = colorScale.clone();
                        if (colorScale.startPosition == null || colorScale.endPosition == null) {
                            var len = colorScale.domains.length;
                            for (var i = 0; i < len; ++i) {
                                colorScale.ranges.push(test.ColorUtils.Color[i & test.ColorUtils.Color.length]);
                            }
                        }
                        else {
                            colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                            colorScale.range([0, colorScale.domains.length - 1]);
                        }
                    }
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_1 = pt.size;
                            var tooltip = pt.tooltip;
                            var text = pt.text;
                            var x = xScale.getScaleValue(xvalue.value) + (this._stack ? 0 : ((index - (this._serieslist.length - 1) / 2) * this.barWidth));
                            var y0 = yvalue.isMultiple ? yvalue.value[0] : (yScale.min < 0 ? 0 : yScale.min);
                            var y1 = yvalue.isMultiple ? yvalue.value[1] : yvalue.value;
                            var ytop = yScale.getScaleValue(y1);
                            var color = defaultcolor;
                            if (colorScale instanceof test.OrdinalScale) {
                                var colorindex = colorScale.getScaleValue(colorvalue.value);
                                if (typeof (colorindex) == 'number') {
                                    color = colorArray[colorindex];
                                }
                                else if (typeof (colorindex) == 'string') {
                                    color = colorindex;
                                }
                            }
                            else if (colorScale instanceof test.LinearScale) {
                                color = test.ColorUtils.getColor(colorScale.startPosition, colorScale.endPosition, colorvalue.value, colorScale.min, colorScale.max);
                            }
                            var ybottom = yScale.getScaleValue(y0);
                            if (y0 == 0) {
                                // console.log(yScale);
                                // console.log("y0 " + y0 + " yBottom " + ybottom);
                            }
                            var xleft = x - this.barWidth / 2;
                            var xright = x + this.barWidth / 2;
                            var barShape = new test.BarShape(this.context, xleft, ytop, xright - xleft, ybottom - ytop);
                            barShape.id = pt.id;
                            barShape.style = new Style("gray", Default.strokestyle);
                            if (color != null) {
                                barShape.style.background = color;
                            }
                            else {
                                barShape.style.background = defaultcolor;
                            }
                            if (series.showlabels && text != null) {
                                var textstr = text.value;
                                var font = Default.font;
                                font.fontColor = 'black';
                                font.fontSize = 12;
                                var textsize = canvas.measureString(textstr, font);
                                var width = textsize.width;
                                var height = textsize.height;
                                barShape.label = new test.Label(this.context, textstr, (xleft + xright) / 2, ytop - height / 2 - 3, width, height, 0, 5);
                                barShape.label._font = font;
                                barShape.label.background = Default.style;
                                barShape.label.background.strokeStyle.strokeColor = 'white';
                                barShape.label.background.background = 'white';
                            }
                            this.__shapelist.push(barShape);
                        }
                    }
                };
                return BarLayout;
            }(cartesian.CartesianLayout));
            cartesian.BarLayout = BarLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var ScatterLayout = /** @class */ (function (_super) {
                __extends(ScatterLayout, _super);
                function ScatterLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ScatterLayout.prototype, "barWidth", {
                    get: function () {
                        return this._rect.width / this.maxSeriesSize / (this._stack ? 1 : this._serieslist.length) * 0.9;
                    },
                    enumerable: true,
                    configurable: true
                });
                ScatterLayout.prototype._layoutSeries = function (series, index, canvas) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var sizeScale = series.getScale('size');
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    var colorArray = [];
                    if (colorScale instanceof test.OrdinalScale) {
                        colorScale = colorScale.clone();
                        if (colorScale.startPosition == null || colorScale.endPosition == null) {
                            var len = colorScale.domains.length;
                            for (var i = 0; i < len; ++i) {
                                colorScale.ranges.push(test.ColorUtils.Color[i & test.ColorUtils.Color.length]);
                            }
                        }
                        else {
                            colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                            colorScale.range([0, colorScale.domains.length - 1]);
                        }
                    }
                    var defaultsize = 10;
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorValue = pt.color;
                            var shapeValue = pt.shape;
                            var sizeValue = pt.size;
                            var tooltip = pt.tooltip;
                            var text = pt.text;
                            var x = xScale.getScaleValue(xvalue.value);
                            var y = yScale.getScaleValue(yvalue.isMultiple ? yvalue.value[1] : yvalue.value);
                            var s = sizeScale.getScaleValue(sizeValue.value);
                            if (isNaN(s) || s == null || s <= 0) {
                                s = defaultsize;
                            }
                            var color = defaultcolor;
                            if (colorScale instanceof test.OrdinalScale) {
                                var colorindex = colorScale.getScaleValue(colorValue.value);
                                if (typeof (colorindex) == 'number') {
                                    color = colorArray[colorindex];
                                }
                                else if (typeof (colorindex) == 'string') {
                                    color = colorindex;
                                }
                            }
                            else if (colorScale instanceof test.LinearScale) {
                                color = test.ColorUtils.getColor(colorScale.startPosition, colorScale.endPosition, colorValue.value, colorScale.min, colorScale.max);
                            }
                            var scatterShape = new test.ScatterShape(this.context, x - s / 2, y - s / 2, s, s, Default.style);
                            if (color != null) {
                                scatterShape.style.background = color;
                            }
                            else {
                                scatterShape.style.background = defaultcolor;
                            }
                            scatterShape.id = pt.id;
                            if (series.showlabels && text != null) {
                                var textstr = text.value;
                                var font = Default.font;
                                font.fontColor = 'black';
                                font.fontSize = 12;
                                var textsize = canvas.measureString(textstr, font);
                                var width = textsize.width;
                                var height = textsize.height;
                                scatterShape.label = new test.Label(this.context, textstr, x, y - s / 2 - 3, width, height, 0, 3);
                                scatterShape.label.background = Default.style;
                                scatterShape.label._font = font;
                                scatterShape.label.background.strokeStyle.strokeColor = 'gray';
                                scatterShape.label.background.background = 'lightblue';
                            }
                            this.__shapelist.push(scatterShape);
                        }
                    }
                };
                ScatterLayout.prototype._layoutLine = function () {
                };
                return ScatterLayout;
            }(cartesian.CartesianLayout));
            cartesian.ScatterLayout = ScatterLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var RadialCartesianLayout = /** @class */ (function (_super) {
                __extends(RadialCartesianLayout, _super);
                function RadialCartesianLayout(context) {
                    var _this = _super.call(this, context) || this;
                    _this.barStyle = Default.style;
                    _this.lineStyle = Default.strokestyle;
                    _this._locationCache = [];
                    _this._stack = false;
                    return _this;
                }
                RadialCartesianLayout.prototype.convert = function (serieslist, encoding, cx, cy, innerRadius, radius, startAngle, endAngle) {
                    this.__shapelist.length = 0;
                    this._serieslist = [];
                    for (var _i = 0, serieslist_2 = serieslist; _i < serieslist_2.length; _i++) {
                        var ser = serieslist_2[_i];
                        this._serieslist.push(ser.clone());
                    }
                    this._encoding = encoding;
                    this._locationCache = [];
                    this.__scalePairs = [];
                    this._stack = encoding._stack;
                    this._cx = cx;
                    this._cy = cy;
                    this._innerRadius = innerRadius;
                    this._radius = radius;
                    this._startAngle = startAngle;
                    this._endAngle = endAngle;
                    this.__analyseScales();
                    for (var i = 0; i < this._serieslist.length; ++i) {
                        this._layoutSeries(this._serieslist[i], i);
                    }
                    return this.__shapelist;
                };
                RadialCartesianLayout.prototype.__analyseScales = function () {
                    this._createLayoutScales(this._encoding);
                    for (var _i = 0, _a = this._serieslist; _i < _a.length; _i++) {
                        var ser = _a[_i];
                        for (var _b = 0, _c = ser.scalePairs; _b < _c.length; _b++) {
                            var scalepair = _c[_b];
                            var filed = scalepair.filed;
                            var scale = scalepair.scale;
                            if (filed.name == 'x') {
                                if (scale instanceof test.OrdinalScale) {
                                    if (filed.band === true) {
                                        scale.rangeBounds([this._innerRadius, this._radius]);
                                    }
                                    else {
                                        scale.range([this._innerRadius, this._radius]);
                                    }
                                }
                                else {
                                    scale.range([this._innerRadius, this._radius]);
                                }
                            }
                            else if (filed.name == 'y') {
                                if (scale instanceof test.OrdinalScale) {
                                    if (filed.band === true) {
                                        scale.rangeBounds([this._startAngle, this._endAngle]);
                                    }
                                    else {
                                        scale.range([this._startAngle, this._endAngle]);
                                    }
                                }
                                else {
                                    var ticker = test.LinearTicks.create(scale);
                                    scale = ticker.niceScale();
                                    scale.range([this._startAngle, this._endAngle]);
                                }
                            }
                        }
                    }
                };
                RadialCartesianLayout.prototype._createLayoutScales = function (encoding) {
                    if (this._serieslist.length > 1) {
                        for (var i = 0; i < this._serieslist.length; ++i) {
                            var series = this._serieslist[i];
                            for (var _i = 0, _a = series.scalePairs; _i < _a.length; _i++) {
                                var pair = _a[_i];
                                var filed = pair.filed;
                                var hasadded = false;
                                for (var _b = 0, _c = this.__scalePairs; _b < _c.length; _b++) {
                                    var p = _c[_b];
                                    if (!p.filed.equals(filed) || !p.scale.equal(pair.scale)) {
                                        continue;
                                    }
                                    else {
                                        hasadded = true;
                                        p.series.push(series.name);
                                        break;
                                    }
                                }
                                if (!hasadded) {
                                    this.__scalePairs.push({ series: [series.name], filed: filed, scale: pair.scale });
                                }
                            }
                        }
                    }
                    else if (this._serieslist.length == 1) {
                        // this.__scalePairs = this._serieslist[0].scalePairs;
                        var series = this._serieslist[0];
                        // this.__scalePairs.push({series:[series.name], filed: series.filed, scale: pair.scale });
                        for (var _d = 0, _e = series.scalePairs; _d < _e.length; _d++) {
                            var pair = _e[_d];
                            this.__scalePairs.push({ series: [series.name], filed: pair.filed, scale: pair.scale });
                        }
                    }
                };
                Object.defineProperty(RadialCartesianLayout.prototype, "maxSeriesSize", {
                    get: function () {
                        var xscale = this._getScale('x');
                        if (xscale instanceof test.OrdinalScale) {
                            return xscale.domains.length;
                        }
                        else {
                            return test.Utility.max(this._serieslist.map(function (ser, index, array) { return ser.size; }));
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialCartesianLayout.prototype, "scalePairs", {
                    // protected _preAnalyseSeries() {
                    //     for (let ser of this._serieslist) {
                    //         for (let pt of ser.points) {
                    //             let xvalue = pt.x;
                    //             let index = _.findIndex(this._locationCache, 'key', xvalue.value);
                    //             if (index > 0) {
                    //                 if (this._locationCache[index] != null) {
                    //                     this._locationCache[index].points.push(pt);
                    //                 } else {
                    //                     this._locationCache.push({ key: xvalue.value, points: [pt] });
                    //                 }
                    //             }
                    //         }
                    //     }
                    // }
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                RadialCartesianLayout.prototype._getScale = function (name) {
                    var index = _.findIndex(this.__scalePairs, function (item) {
                        return item.filed.name == name;
                    });
                    return this.__scalePairs[index].scale;
                };
                return RadialCartesianLayout;
            }(test.BaseLayout));
            cartesian.RadialCartesianLayout = RadialCartesianLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Style = android.graphics.Style;
            var Default = android.device.Default;
            var RadialBarLayout = /** @class */ (function (_super) {
                __extends(RadialBarLayout, _super);
                function RadialBarLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RadialBarLayout.prototype, "barWidth", {
                    get: function () {
                        return (this._radius - this._innerRadius) / this.maxSeriesSize / (this._stack ? 1 : this._serieslist.length) * 0.9;
                    },
                    enumerable: true,
                    configurable: true
                });
                RadialBarLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var colorArray = [];
                    if (colorScale instanceof test.OrdinalScale) {
                        colorScale = colorScale.clone();
                        colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                        colorScale.range([0, colorScale.domains.length - 1]);
                    }
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_2 = pt.size;
                            var x = xScale.getScaleValue(xvalue.value) + (this._stack ? 0 : ((index - (this._serieslist.length - 1) / 2) * this.barWidth));
                            var y0 = yvalue.isMultiple ? yvalue.value[0] : (yScale.min < 0 ? 0 : yScale.min);
                            var y1 = yvalue.isMultiple ? yvalue.value[1] : yvalue.value;
                            var yEndAngle = yScale.getScaleValue(y1);
                            var color = defaultcolor;
                            if (colorScale instanceof test.OrdinalScale) {
                                var colorindex = colorScale.getScaleValue(colorvalue.value);
                                color = colorArray[colorindex];
                            }
                            else if (colorScale instanceof test.LinearScale) {
                                color = test.ColorUtils.getColor(colorScale.startPosition, colorScale.endPosition, colorvalue.value, colorScale.min, colorScale.max);
                            }
                            var yStartAngle = yScale.getScaleValue(y0);
                            var xInnerRadius = x - this.barWidth / 2;
                            var xOutterRadius = x + this.barWidth / 2;
                            // let barShape:BarShape = new BarShape(xleft,yEndAngle,xright-xleft,ybottom-yEndAngle);
                            var barShape = new test.RadialBarShape(this.context, this._cx, this._cy, xInnerRadius, xOutterRadius, yStartAngle, yEndAngle - yStartAngle);
                            barShape.id = pt.id;
                            barShape.style = new Style("gray", Default.strokestyle);
                            if (color != null) {
                                barShape.style.background = color;
                            }
                            else {
                                barShape.style.background = defaultcolor;
                            }
                            this.__shapelist.push(barShape);
                        }
                    }
                };
                return RadialBarLayout;
            }(cartesian.RadialCartesianLayout));
            cartesian.RadialBarLayout = RadialBarLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var RadialLineLayout = /** @class */ (function (_super) {
                __extends(RadialLineLayout, _super);
                function RadialLineLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RadialLineLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var xs = [];
                    var ys = [];
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            console.log(pt);
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_3 = pt.size;
                            var radius = xScale.getScaleValue(xvalue.value);
                            var angle = yScale.getScaleValue(yvalue.isMultiple ? yvalue.value[1] : yvalue.value);
                            var x = this._cx + Math.cos(angle) * radius;
                            var y = this._cy + Math.sin(angle) * radius;
                            xs.push(x);
                            ys.push(y);
                        }
                    }
                    var linesShape = new test.LinesShape(this.context, xs, ys, null, Default.strokestyle);
                    linesShape.strokeStyle.strokeColor = test.ColorUtils.indexColor(series.index);
                    linesShape.id = series.id;
                    this.__shapelist.push(linesShape);
                };
                RadialLineLayout.prototype._layoutLine = function () {
                };
                return RadialLineLayout;
            }(cartesian.RadialCartesianLayout));
            cartesian.RadialLineLayout = RadialLineLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var RadialAreaLayout = /** @class */ (function (_super) {
                __extends(RadialAreaLayout, _super);
                function RadialAreaLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RadialAreaLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var xs = [];
                    var ys = [];
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            console.log(pt);
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_4 = pt.size;
                            var radius = xScale.getScaleValue(xvalue.value);
                            var angleValue0 = yvalue.isMultiple ? yvalue.value[0] : (yScale.min < 0 ? 0 : yScale.min);
                            var angleValue1 = yvalue.isMultiple ? yvalue.value[1] : yvalue.value;
                            var angle0 = yScale.getScaleValue(angleValue0);
                            var angle1 = yScale.getScaleValue(angleValue1);
                            // let color = colorScale.getScaleValue(colorvalue.value);
                            var x0 = this._cx + Math.cos(angle0) * radius;
                            var y0 = this._cy + Math.sin(angle0) * radius;
                            var x = this._cx + Math.cos(angle1) * radius;
                            var y = this._cy + Math.sin(angle1) * radius;
                            xs.push(x);
                            ys.push(y);
                            xs.unshift(x0);
                            ys.unshift(y0);
                        }
                    }
                    var linesShape = new test.AreaShape(this.context, xs, ys, null, Default.strokestyle);
                    linesShape.style.background = test.ColorUtils.indexColor(series.index);
                    linesShape.id = series.id;
                    this.__shapelist.push(linesShape);
                };
                RadialAreaLayout.prototype._layoutLine = function () {
                };
                return RadialAreaLayout;
            }(cartesian.RadialCartesianLayout));
            cartesian.RadialAreaLayout = RadialAreaLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var RadialScatterLayout = /** @class */ (function (_super) {
                __extends(RadialScatterLayout, _super);
                function RadialScatterLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RadialScatterLayout.prototype, "barWidth", {
                    get: function () {
                        return (this._radius - this._innerRadius) / this.maxSeriesSize / (this._stack ? 1 : this._serieslist.length) * 0.9;
                    },
                    enumerable: true,
                    configurable: true
                });
                RadialScatterLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var sizeScale = series.getScale('size');
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    var colorArray = [];
                    if (colorScale instanceof test.OrdinalScale) {
                        colorScale = colorScale.clone();
                        if (colorScale.startPosition == null || colorScale.endPosition == null) {
                            var len = colorScale.domains.length;
                            for (var i = 0; i < len; ++i) {
                                colorScale.ranges.push(test.ColorUtils.Color[i & test.ColorUtils.Color.length]);
                            }
                        }
                        else {
                            colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                            colorScale.range([0, colorScale.domains.length - 1]);
                        }
                    }
                    var defaultsize = 10;
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorValue = pt.color;
                            var shapeValue = pt.shape;
                            var sizeValue = pt.size;
                            var radius = xScale.getScaleValue(xvalue.value);
                            var angle = yScale.getScaleValue(yvalue.isMultiple ? yvalue.value[1] : yvalue.value);
                            var s = sizeScale.getScaleValue(sizeValue.value);
                            if (isNaN(s) || s == null || s <= 0) {
                                s = defaultsize;
                            }
                            var color = defaultcolor;
                            if (colorScale instanceof test.OrdinalScale) {
                                var colorindex = colorScale.getScaleValue(colorValue.value);
                                if (typeof (colorindex) == 'number') {
                                    color = colorArray[colorindex];
                                }
                                else if (typeof (colorindex) == 'string') {
                                    color = colorindex;
                                }
                            }
                            else if (colorScale instanceof test.LinearScale) {
                                color = test.ColorUtils.getColor(colorScale.startPosition, colorScale.endPosition, colorValue.value, colorScale.min, colorScale.max);
                            }
                            var x = this._cx + Math.cos(angle) * radius;
                            var y = this._cy + Math.sin(angle) * radius;
                            var scatterShape = new test.ScatterShape(this.context, x - s / 2, y - s / 2, s, s, Default.style);
                            scatterShape.id = pt.id;
                            if (color != null) {
                                scatterShape.style.background = color;
                            }
                            else {
                                scatterShape.style.background = defaultcolor;
                            }
                            this.__shapelist.push(scatterShape);
                        }
                    }
                };
                RadialScatterLayout.prototype._layoutLine = function () {
                };
                return RadialScatterLayout;
            }(cartesian.RadialCartesianLayout));
            cartesian.RadialScatterLayout = RadialScatterLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var LineLayout = /** @class */ (function (_super) {
                __extends(LineLayout, _super);
                function LineLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LineLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    // let colorScale:Scale = series.getScale('color');
                    var xs = [];
                    var ys = [];
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_5 = pt.size;
                            var x = xScale.getScaleValue(xvalue.value);
                            var y = yvalue.isMultiple ? yvalue.value[1] : yvalue.value;
                            y = yScale.getScaleValue(y);
                            xs.push(x);
                            ys.push(y);
                        }
                    }
                    var linesShape = new test.LinesShape(this.context, xs, ys, null, Default.strokestyle);
                    linesShape.strokeStyle.strokeColor = test.ColorUtils.indexColor(series.index);
                    linesShape.style.strokeStyle = null;
                    linesShape.id = series.id;
                    this.__shapelist.push(linesShape);
                };
                LineLayout.prototype._layoutLine = function () {
                };
                return LineLayout;
            }(cartesian.CartesianLayout));
            cartesian.LineLayout = LineLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var AreaLayout = /** @class */ (function (_super) {
                __extends(AreaLayout, _super);
                function AreaLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AreaLayout.prototype._layoutSeries = function (series, index) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var xs = [];
                    var ys = [];
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var xvalue = pt.x;
                            var yvalue = pt.y;
                            var colorvalue = pt.color;
                            var shape = pt.shape;
                            var size_6 = pt.size;
                            var x = xScale.getScaleValue(xvalue.value);
                            var y0 = yvalue.isMultiple ? yvalue.value[0] : (yScale.min < 0 ? (yScale.max < 0 ? yScale.max : 0) : yScale.min);
                            var y1 = yvalue.isMultiple ? yvalue.value[1] : yvalue.value;
                            y0 = yScale.getScaleValue(y0);
                            y1 = yScale.getScaleValue(y1);
                            xs.push(x);
                            ys.push(y0);
                            xs.unshift(x);
                            ys.unshift(y1);
                        }
                    }
                    var linesShape = new test.AreaShape(this.context, xs, ys, null, Default.strokestyle);
                    linesShape.style.background = test.ColorUtils.indexColor(series.index);
                    linesShape.style.strokeStyle = null;
                    linesShape.id = series.id;
                    this.__shapelist.push(linesShape);
                };
                AreaLayout.prototype._layoutLine = function () {
                };
                return AreaLayout;
            }(cartesian.CartesianLayout));
            cartesian.AreaLayout = AreaLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Default = android.device.Default;
            var HierarchicalLayout = /** @class */ (function (_super) {
                __extends(HierarchicalLayout, _super);
                function HierarchicalLayout(c) {
                    var _this = _super.call(this, c) || this;
                    _this._rect = null;
                    _this._depth = 0;
                    _this._offset = 1;
                    _this.style = Default.style;
                    _this.lineStyle = Default.strokestyle;
                    _this._depth = 0;
                    return _this;
                }
                HierarchicalLayout.prototype._calcDeep = function (roots) {
                    this._depth = 0;
                    this._depth = this.__calcDeep(roots) + 1;
                };
                HierarchicalLayout.prototype.__calcDeep = function (items) {
                    if (items != null && items.length > 0) {
                        var deep = 0;
                        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                            var item = items_1[_i];
                            var currdeep = this.__calcDeep(item.children);
                            item._hidden = false;
                            if (deep < currdeep) {
                                deep = currdeep;
                            }
                        }
                        return ++deep;
                    }
                    return 0;
                };
                return HierarchicalLayout;
            }(test.BaseLayout));
            hierarchical.HierarchicalLayout = HierarchicalLayout;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Default = android.device.Default;
            var SunburstLayout = /** @class */ (function (_super) {
                __extends(SunburstLayout, _super);
                function SunburstLayout(c, startAngle, sweep, innerRadius) {
                    var _this = _super.call(this, c) || this;
                    _this.__startAngle = startAngle;
                    _this.__innerRadius = innerRadius;
                    _this.__sweep = sweep;
                    return _this;
                }
                SunburstLayout.prototype.convert = function (roots, encoding, rect, canvas) {
                    this._calcDeep(roots);
                    this.__cx = (rect.left + rect.right) / 2;
                    this.__cy = (rect.top + rect.bottom) / 2;
                    this.__radius = rect.width < rect.height ? rect.width / 2 : rect.height / 2;
                    this.__radiusUnit = (this.__radius - this.__innerRadius - this._offset) / (this._depth - 1);
                    var a = new Analysis(roots, this.__cx, this.__cy, this.__startAngle, this.__sweep + this.__startAngle, this.__innerRadius, this.__innerRadius + this.__radiusUnit, 0, 0);
                    this.__calcSum(a);
                    this.__preangle = a.sweep / a.sum;
                    this.__layoutItems(a, canvas);
                    return null;
                };
                SunburstLayout.prototype.__layoutItems = function (analysis, engine) {
                    var startAngle = analysis.startAngle;
                    for (var i = 0; i < analysis.vs.length; ++i) {
                        var v = analysis.vs[i];
                        var sweep = v.size.value * this.__preangle;
                        var cx = analysis.cx;
                        var cy = analysis.cy;
                        if (analysis.depth == 0) {
                            cx = analysis.cx + this._offset * Math.cos(startAngle + sweep / 2);
                            cy = analysis.cy + this._offset * Math.sin(startAngle + sweep / 2);
                        }
                        var shape = new test.SunburstShape(this.context, cx, cy, analysis.innerRadius, analysis.radius, startAngle, sweep, Default.style, Default.strokestyle);
                        shape.style.background = test.ColorUtils.indexColor(parseInt(v.id));
                        shape.id = v.id;
                        shape.text = v.text.value;
                        this.__shapelist.push(shape);
                        if (v.children && v.children.length > 0) {
                            var child_analysis = new Analysis(v.children, cx, cy, startAngle, startAngle + sweep, analysis.radius, analysis.radius + this.__radiusUnit, 0, analysis.depth + 1);
                            this.__calcSum(child_analysis);
                            this.__layoutItems(child_analysis, engine);
                        }
                        startAngle += sweep;
                    }
                };
                SunburstLayout.prototype.__calcSum = function (a) {
                    var sum = 0;
                    for (var _i = 0, _a = a.vs; _i < _a.length; _i++) {
                        var v = _a[_i];
                        sum += ((v.size.value == null) || (isNaN(v.size.value)) ? 0 : v.size.value);
                    }
                    a.sum = sum;
                };
                return SunburstLayout;
            }(hierarchical.HierarchicalLayout));
            hierarchical.SunburstLayout = SunburstLayout;
            var Analysis = /** @class */ (function () {
                function Analysis(vs, cx, cy, startAngle, endAngle, innerRadius, radius, max, depth) {
                    this.vs = vs;
                    this.startAngle = startAngle;
                    this.endAngle = endAngle;
                    this.innerRadius = innerRadius;
                    this.radius = radius;
                    this.sum = max;
                    this.depth = depth;
                    this.cx = cx;
                    this.cy = cy;
                }
                Object.defineProperty(Analysis.prototype, "sweep", {
                    get: function () {
                        return this.endAngle - this.startAngle;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Analysis.prototype, "h", {
                    get: function () {
                        return this.radius - this.innerRadius;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Analysis;
            }());
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Rect = android.graphics.Rect;
            var Default = android.device.Default;
            var Util = android.graphics.Util;
            var ViewState = android.view.ViewState;
            var TreeMapLayout = /** @class */ (function (_super) {
                __extends(TreeMapLayout, _super);
                function TreeMapLayout(c, rect) {
                    var _this = _super.call(this, c) || this;
                    _this._limited = 500;
                    _this._rect = rect;
                    return _this;
                }
                TreeMapLayout.prototype.convert = function (roots, encoding, rect, canvas) {
                    this.__shapelist = [];
                    this._calcDeep(roots);
                    var a = new Analysis(roots, rect.left, rect.top, rect.right, rect.bottom, 0, 0);
                    this.__calcSum(a);
                    this.__hideSmallNode(a);
                    this.__layoutItems(a, canvas);
                    return this.__shapelist;
                };
                TreeMapLayout.prototype.__hideSmallNode = function (a) {
                    if (a != null && a.vs != null && a.vs.length > 0) {
                        var preSize = a.area / a.sum;
                        a.vs.sort(function (a, b) { return a.size.value - b.size.value; });
                        var length_1 = a.vs.length;
                        for (var _i = 0, _a = a.vs; _i < _a.length; _i++) {
                            var v = _a[_i];
                            if (v.size.value * preSize < this._limited) {
                                v._hidden = true;
                                a.sum -= v.size.value;
                                preSize = a.area / a.sum;
                            }
                        }
                    }
                };
                TreeMapLayout.prototype.__calcSum = function (a) {
                    var sum = 0;
                    for (var _i = 0, _a = a.vs; _i < _a.length; _i++) {
                        var v = _a[_i];
                        sum += v.size.value;
                    }
                    a.sum = sum;
                };
                TreeMapLayout.prototype.__layoutItems = function (analysis, canvas) {
                    if (analysis.sum <= 0) {
                        return;
                    }
                    var total_rectLast = new Rect(analysis.l, analysis.t, analysis.r, analysis.b);
                    var preSize = analysis.area / analysis.sum;
                    analysis.vs.sort(function (a, b) { return b.size.value - a.size.value; });
                    var rate = 1;
                    for (var i = 0; i < analysis.vs.length && !total_rectLast.isNil;) {
                        var rects = this.__locationRects(analysis.vs, i, preSize, total_rectLast);
                        var cliprect = Util.union.apply(Util, rects);
                        total_rectLast = this.__clipRect(cliprect, total_rectLast);
                        for (var j = 0; j < rects.length; ++j) {
                            var rect = rects[j];
                            // if (Util.isMixed(rect, this._rect)) {
                            var v = analysis.vs[i];
                            var shape = new test.CubeShape(this.context, rect.left, rect.top, rect.width, rect.height, Default.style, Default.strokestyle);
                            shape.visiable = ViewState.Visiable;
                            shape.style.background = test.ColorUtils.indexColor(parseInt(v.id));
                            shape.id = v.id;
                            shape.text = v.text.value;
                            // shape.onDraw(canvas);
                            if (v._hidden) {
                                i++;
                                continue;
                            }
                            if (v.children && v.children.length > 0) {
                                var offset = 0;
                                if (!isNaN(this._offset) && this._offset > 0) {
                                    offset = (this._depth - analysis.depth) / this._depth * this._offset;
                                }
                                rect = new Rect(rect.left + offset, rect.top + offset, rect.right - offset, rect.bottom - offset);
                                var child_analysis = new Analysis(v.children, rect.left, rect.top, rect.left + rect.width, rect.top + rect.height, v.size.value, analysis.depth + 1);
                                this.__calcSum(child_analysis);
                                this.__hideSmallNode(child_analysis);
                                if (child_analysis.sum > 0) {
                                    shape.visiable = ViewState.InVisiable;
                                    this.__layoutItems(child_analysis, canvas);
                                }
                            }
                            this.__shapelist.push(shape);
                            // }
                            ++i;
                            continue;
                        }
                    }
                };
                TreeMapLayout.prototype.__locationRects = function (vs, index, preSize, rect) {
                    var resultRect = [];
                    var lastRate = 0;
                    var lastSize = 0;
                    var lastW, lastH = 0;
                    for (var i = index; i < vs.length; ++i) {
                        var v = vs[i];
                        var w = void 0, h = 0;
                        var vw = void 0, vh = 0;
                        if (v.size.value < 0) {
                            vs.splice(i, 1);
                            v = vs[i];
                        }
                        if (rect.height < rect.width) {
                            lastSize += v.size.value;
                            vw = w = (lastSize * preSize) / rect.height;
                            vh = (vs[index].size.value * preSize) / vw;
                            if (lastRate != 0) {
                                var tmpRate = vh > vw ? vh / vw : vw / vh;
                                if (Math.abs(tmpRate - 1) < Math.abs(lastRate - 1)) {
                                    lastRate = tmpRate;
                                    resultRect.length = 0;
                                }
                                else {
                                    return resultRect;
                                }
                            }
                            else {
                                lastRate = vh > vw ? vh / vw : vw / vh;
                            }
                            resultRect.length = 0;
                            for (var j = index; j <= i; j++) {
                                var r = void 0;
                                var currentH = vs[j].size.value * preSize / vw;
                                if (j === index) {
                                    r = new Rect(rect.left, rect.top, rect.left + vw, rect.top + vh);
                                }
                                else {
                                    r = new Rect(resultRect[j - index - 1].left, resultRect[j - index - 1].bottom, resultRect[j - index - 1].left + vw, currentH + resultRect[j - index - 1].bottom);
                                }
                                resultRect.push(r);
                            }
                        }
                        else {
                            lastSize += v.size.value;
                            vh = h = (lastSize * preSize) / rect.width;
                            vw = (vs[index].size.value * preSize) / vh;
                            if (lastRate != 0) {
                                var tmpRate = vh > vw ? vh / vw : vw / vh;
                                if (Math.abs(tmpRate - 1) < Math.abs(lastRate - 1)) {
                                    lastRate = tmpRate;
                                    resultRect.length = 0;
                                }
                                else {
                                    return resultRect;
                                }
                            }
                            else {
                                lastRate = vh > vw ? vh / vw : vw / vh;
                            }
                            resultRect.length = 0;
                            for (var j = index; j <= i; j++) {
                                var r = void 0;
                                var currentW = vs[j].size.value * preSize / vh;
                                if (j === index) {
                                    r = new Rect(rect.left, rect.top, rect.left + vw, rect.top + vh);
                                }
                                else {
                                    r = new Rect(resultRect[j - index - 1].right, resultRect[j - index - 1].top, resultRect[j - index - 1].right + currentW, resultRect[j - index - 1].top + vh);
                                }
                                resultRect.push(r);
                            }
                        }
                        lastW = vw;
                        lastH = vh;
                    }
                    return resultRect;
                };
                TreeMapLayout.prototype.__clipRect = function (r, recttotal) {
                    var rect = null;
                    if (Math.abs(r.width - recttotal.width) <= 0.0001) {
                        rect = new Rect(r.left, r.bottom, r.right, recttotal.bottom);
                    }
                    else {
                        rect = new Rect(r.right, r.top, recttotal.right, r.bottom);
                    }
                    return rect;
                };
                return TreeMapLayout;
            }(hierarchical.HierarchicalLayout));
            hierarchical.TreeMapLayout = TreeMapLayout;
            var Analysis = /** @class */ (function () {
                function Analysis(vs, l, t, r, b, max, depth) {
                    this.vs = vs;
                    this.l = l;
                    this.t = t;
                    this.r = r;
                    this.b = b;
                    this.sum = max;
                    this.depth = depth;
                }
                Object.defineProperty(Analysis.prototype, "w", {
                    get: function () {
                        return this.r - this.l;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Analysis.prototype, "h", {
                    get: function () {
                        return this.b - this.t;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Analysis.prototype, "area", {
                    get: function () {
                        return this.w * this.h;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Analysis;
            }());
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var e10 = Math.sqrt(50);
        var e5 = Math.sqrt(10);
        var e2 = Math.sqrt(2);
        var Ticks = /** @class */ (function () {
            function Ticks(scale) {
                this._scale = scale;
                this._ticks = [];
            }
            Ticks.create = function (scale, start, end) {
                return null;
            };
            Ticks.prototype._createTicks = function (start, stop, count) {
                var reverse = stop < start, i = -1, n, ticks, step;
                if (reverse)
                    n = start, start = stop, stop = n;
                if ((step = this._tickIncrement(start, stop, count)) === 0 || !isFinite(step))
                    return [];
                if (step > 0) {
                    start = Math.ceil(start / step);
                    stop = Math.floor(stop / step);
                    ticks = new Array(n = Math.ceil(stop - start + 1));
                    while (++i < n)
                        ticks[i] = (start + i) * step;
                }
                else {
                    start = Math.floor(start * step);
                    stop = Math.ceil(stop * step);
                    ticks = new Array(n = Math.ceil(start - stop + 1));
                    while (++i < n)
                        ticks[i] = (start - i) / step;
                }
                if (reverse)
                    ticks.reverse();
                return ticks;
            };
            Ticks.prototype._tickIncrement = function (start, stop, count) {
                var step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
                return power >= 0
                    ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
                    : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
            };
            Ticks.prototype._tickStep = function (start, stop, count) {
                var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
                if (error >= e10)
                    step1 *= 10;
                else if (error >= e5)
                    step1 *= 5;
                else if (error >= e2)
                    step1 *= 2;
                return stop < start ? -step1 : step1;
            };
            return Ticks;
        }());
        test.Ticks = Ticks;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var LinearTicks = /** @class */ (function (_super) {
            __extends(LinearTicks, _super);
            function LinearTicks() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LinearTicks.create = function (scale) {
                android.Debug.assert(scale instanceof test.LinearScale, " scale must be LinearScale");
                return new LinearTicks(scale);
            };
            LinearTicks.prototype.createTicks = function (count) {
                // let step:number, start:number,stop:number;
                // step = this._tickIncrement(this._start, this._end, count);
                // if (step > 0) {
                //     start = Math.floor(this._start/step) * step;
                //     stop = Math.floor(this._end/step) * step;
                //     step = this._tickIncrement(start,stop,count);
                // }else if(step < 0){
                //     start = Math.ceil(start * step) / step;
                //     stop = Math.floor(stop * step) / step;
                //     step = this._tickIncrement(start, stop, count);
                // }
                if (count == null || isNaN(count)) {
                    count = 10;
                }
                this._ticks = this._createTicks(this._scale.max, this._scale.min, count);
                return this._ticks;
            };
            LinearTicks.prototype.niceScale = function () {
                var scale = this._scale;
                var step = this._tickStep(scale.min, scale.max, 10);
                if (step == 0) {
                    step = 1;
                }
                var niceMin = scale.min === 0 ? 0 : (Math.floor(scale.min / step)) * step;
                var niceMax = (Math.floor(scale.max / step) + 1) * step;
                scale.domain([niceMin, niceMax]).refresh();
                return scale;
            };
            return LinearTicks;
        }(test.Ticks));
        test.LinearTicks = LinearTicks;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var LogTicks = /** @class */ (function (_super) {
            __extends(LogTicks, _super);
            function LogTicks() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LogTicks.create = function (scale) {
                android.Debug.assert(scale instanceof test.LogScale, " scale must be LinearScale");
                return new LogTicks(scale);
            };
            LogTicks.prototype.createTicks = function (count) {
                if (count == null || isNaN(count)) {
                    count = 10;
                }
                this._ticks = this._createTicks(this._scale.max, this._scale.min, count);
                return this._ticks;
            };
            return LogTicks;
        }(test.Ticks));
        test.LogTicks = LogTicks;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var OrdinalTicks = /** @class */ (function (_super) {
            __extends(OrdinalTicks, _super);
            function OrdinalTicks() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OrdinalTicks.create = function (scale) {
                android.Debug.assert(scale instanceof test.OrdinalScale, " scale must be OrdinalScale");
                return new OrdinalTicks(scale);
            };
            OrdinalTicks.prototype.createTicks = function (count) {
                // this._ticks = this._createTicks(this._scale.max,this._scale.min,count);
                if (count != null) {
                    this._ticks = [];
                    var domains = this._scale.domains;
                    if (domains.length / count < 2) {
                        this._ticks = this._scale.domains;
                    }
                    else {
                        var step = Math.floor(domains.length / count);
                        for (var i = 0; i < domains.length; i += step) {
                            this._ticks.push(domains[i]);
                        }
                    }
                }
                else {
                    this._ticks = this._scale.domains;
                }
                return this._ticks;
            };
            return OrdinalTicks;
        }(test.Ticks));
        test.OrdinalTicks = OrdinalTicks;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var AxisShape = /** @class */ (function (_super) {
            __extends(AxisShape, _super);
            function AxisShape(context) {
                var _this = _super.call(this, context) || this;
                _this._major = Default.strokestyle.clone();
                _this._minor = Default.strokestyle.clone();
                _this._lableFont = Default.font.clone();
                _this._showLabel = true;
                return _this;
            }
            AxisShape.prototype.onDrawShape = function (canvas) {
                canvas.save();
                canvas.drawLine(this._majorTick.startPoint, this._majorTick.endPoint, this._major);
                if (this._showLabel) {
                    canvas.drawText(this._label, this._lableRect.leftTop, this._lableFont, this._lableRect.leftTop, this._lableRect.angle * 180 / Math.PI);
                }
                canvas.drawLine(this._minorTick.startPoint, this._minorTick.endPoint, this._minor);
                canvas.restore();
            };
            AxisShape.prototype._drawAnimation = function (canvas) {
                var offsetx = this.animationXs[0] - this._lableRect.points[0].x;
                var offsety = this.animationYs[0] - this._lableRect.points[0].y;
                var _majorTickStartpt = this._majorTick.startPoint.clone();
                var _majorTickEndpt = this._majorTick.endPoint.clone();
                _majorTickStartpt.offset(offsetx, offsety);
                _majorTickEndpt.offset(offsetx, offsety);
                var lt = this._lableRect.leftTop.clone();
                lt.offset(offsetx, offsety);
                canvas.drawLine(_majorTickStartpt, _majorTickEndpt, this._major);
                if (this._showLabel) {
                    canvas.drawText(this._label, lt, this._lableFont, lt, this._lableRect.angle * 180 / Math.PI);
                }
                var _minorTickStartpt = this._minorTick.startPoint.clone();
                var _minorTickEndpt = this._minorTick.endPoint.clone();
                _minorTickStartpt.offset(offsetx, offsety);
                _minorTickEndpt.offset(offsetx, offsety);
                canvas.drawLine(_minorTickStartpt, _minorTickEndpt, this._minor);
            };
            AxisShape.prototype.getpts = function (size) {
                if (this._pts == null) {
                    this._pts = { xs: [], ys: [] };
                    var pts = this._lableRect.points;
                    for (var j = 0; j < 4; ++j) {
                        this._pts.xs.push(pts[j].x);
                        this._pts.ys.push(pts[j].y);
                    }
                }
                return this._pts;
            };
            AxisShape.prototype.refresh = function () {
            };
            return AxisShape;
        }(test.Shape));
        test.AxisShape = AxisShape;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var LABEL_PADDING = 4;
var MAJOR_TICK_HEIGHT = 6;
var MINOR_TICK_HEIGHT = 4;
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var Default = android.device.Default;
            var ViewGroup = android.view.ViewGroup;
            var ViewState = android.view.ViewState;
            var BaseAxis = /** @class */ (function (_super) {
                __extends(BaseAxis, _super);
                function BaseAxis(context) {
                    var _this = _super.call(this, context) || this;
                    _this._majorTickHeight = MAJOR_TICK_HEIGHT;
                    _this._minorTickHeight = MINOR_TICK_HEIGHT;
                    _this._ticks = [];
                    _this._titleFont = Default.font;
                    _this._labelFont = Default.font;
                    _this._majorStyle = Default.strokestyle;
                    _this._minorStyle = Default.strokestyle;
                    _this._near = true;
                    _this._labelFont.fontColor = "#262626";
                    _this._series = [];
                    return _this;
                }
                Object.defineProperty(BaseAxis.prototype, "title", {
                    get: function () {
                        return this._title;
                    },
                    set: function (value) {
                        this._title = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "majorStyle", {
                    get: function () {
                        return this._majorStyle;
                    },
                    set: function (value) {
                        this._majorStyle = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "minorStyle", {
                    get: function () {
                        return this._minorStyle;
                    },
                    set: function (value) {
                        this._minorStyle = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "lineStyle", {
                    get: function () {
                        return this._lineStyle;
                    },
                    set: function (value) {
                        this._lineStyle = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "titleFont", {
                    get: function () {
                        return this._titleFont;
                    },
                    set: function (value) {
                        this._titleFont = value.clone();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "labelFont", {
                    get: function () {
                        return this._labelFont;
                    },
                    set: function (value) {
                        this._labelFont = value.clone();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "max", {
                    get: function () {
                        return this._max;
                    },
                    set: function (value) {
                        this._max = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "min", {
                    get: function () {
                        return this._min;
                    },
                    set: function (value) {
                        this._min = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "series", {
                    get: function () {
                        return this._series;
                    },
                    set: function (s) {
                        this._series = s;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "scale", {
                    get: function () {
                        return this._scale;
                    },
                    set: function (value) {
                        if (value != null && !value.equal(this._scale)) {
                            this._scale = value;
                            this._ticks = this._createTicks();
                        }
                        else if (value == null) {
                            this._scale = null;
                            this._ticks = [];
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "reversed", {
                    get: function () {
                        return this._reversed;
                    },
                    set: function (value) {
                        this._reversed = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "type", {
                    get: function () {
                        return this._axisType;
                    },
                    set: function (value) {
                        this._axisType = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BaseAxis.prototype, "near", {
                    get: function () {
                        return this._near;
                    },
                    set: function (value) {
                        this._near = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                BaseAxis.prototype._overLapLabels = function () {
                    for (var i = 0; i < this.children.length; ++i) {
                        var child = this.children[i];
                        if (child instanceof test.AxisShape && child.visiable == ViewState.Visiable) {
                            for (var j = i; j < this.children.length; ++j) {
                                var comparechild = this.children[j];
                                if (comparechild instanceof test.AxisShape && comparechild.visiable == ViewState.Visiable) {
                                    if (test.Utility.isMixedRotatedRect(comparechild._lableRect, child._lableRect)) {
                                        // comparechild.visiable = ViewState.Gone;
                                    }
                                }
                            }
                        }
                    }
                };
                BaseAxis.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                BaseAxis.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                };
                BaseAxis.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                };
                BaseAxis.prototype._format = function (val) {
                    return val + "";
                };
                return BaseAxis;
            }(ViewGroup));
            cartesian.BaseAxis = BaseAxis;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var MeasureSpec = android.view.MeasureSpec;
            var Size = android.graphics.Size;
            var Gravity = android.graphics.Gravity;
            var LayoutParams = android.view.LayoutParams;
            var Point = android.graphics.Point;
            var Util = android.graphics.Util;
            var LineAxis = /** @class */ (function (_super) {
                __extends(LineAxis, _super);
                function LineAxis(context) {
                    var _this = _super.call(this, context) || this;
                    _this._maxLabelSize = new Size(0, 0);
                    return _this;
                }
                Object.defineProperty(LineAxis.prototype, "near", {
                    get: function () {
                        return this._near;
                    },
                    // protected get children():Array<View>{
                    //     return this._children;
                    // }
                    set: function (value) {
                        this._near = value;
                        if (value) {
                            if (this.type == cartesian.AxisType.X) {
                                this.gravity = Gravity.Bottom;
                            }
                            else if (this.type == cartesian.AxisType.Y) {
                                this.gravity = Gravity.Left;
                            }
                        }
                        else {
                            if (this.type == cartesian.AxisType.X) {
                                this.gravity = Gravity.Top;
                            }
                            else if (this.type == cartesian.AxisType.Y) {
                                this.gravity = Gravity.Right;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LineAxis.prototype, "id", {
                    get: function () {
                        if (this._id == null) {
                            this._id = Util.HashCode(Util.HashCode(this._axisType) + Util.HashCode(this.near) + Util.HashCode(this.title));
                            // this._id = (this._axisType)+","+ (this.near) +","+ (this.title);
                        }
                        return this._id;
                    },
                    enumerable: true,
                    configurable: true
                });
                LineAxis.prototype._createTicks = function () {
                    var ticks = [];
                    if (this.scale instanceof test.LinearScale) {
                        ticks = test.LinearTicks.create(this.scale).createTicks(10);
                    }
                    else if (this.scale instanceof test.LogScale) {
                        ticks = test.LogTicks.create(this.scale).createTicks(10);
                    }
                    else if (this.scale instanceof test.OrdinalScale) {
                        ticks = test.OrdinalTicks.create(this.scale).createTicks();
                        if (ticks.length > 30) {
                            ticks = test.OrdinalTicks.create(this.scale).createTicks(30);
                        }
                    }
                    // else if(this.scale instanceof Timescale)
                    return ticks;
                };
                LineAxis.prototype._layoutXAxis = function (canvas) {
                    var ticks = this._ticks;
                    // this._children = [];
                    this.removeAllViews();
                    var lastShape;
                    for (var i = 0; ticks && i < ticks.length; ++i) {
                        var value = ticks[i];
                        var nextValue = i >= ticks.length ? null : ticks[i + 1];
                        var tickheight = Math.max(this._majorTickHeight, this._minorTickHeight);
                        var label = this._format(value);
                        var labelSize = canvas.measureString(label, this.labelFont);
                        var x = this.scale.getScaleValue(value);
                        var y = this.layoutInfo.innerrect.top;
                        var nx = NaN;
                        var ny = NaN;
                        if (nextValue != null) {
                            nx = this.scale.getScaleValue(nextValue);
                            ny = y;
                        }
                        var labelX = x;
                        var labelY = y + tickheight + LABEL_PADDING + labelSize.height / 2;
                        var shape = new test.AxisShape(this.getContext());
                        shape._lableRect = new test.RotateRect(labelX, labelY, labelSize.width, labelSize.height, 0);
                        shape._majorTick = new test.RotateLine(x, y, this._majorTickHeight, 0, 0);
                        shape._label = label;
                        shape._lableFont = this._labelFont;
                        shape._major = this.majorStyle;
                        shape._minor = this.minorStyle;
                        shape.id = Util.HashCode(label + "," + this.id);
                        // shape.id = label+","+this.id;
                        var minorx = NaN;
                        if (!isNaN(nx)) {
                            minorx = (x + nx) / 2;
                        }
                        shape._minorTick = new test.RotateLine(minorx, y, this._minorTickHeight, 0, 0);
                        if (lastShape != null && test.Utility.isMixedRotatedRect(shape._lableRect, lastShape._lableRect)) {
                            shape._showLabel = false;
                        }
                        else {
                            shape._showLabel = true;
                            lastShape = shape;
                        }
                        // this._children.push(shape);
                        this.addViewWithOutReLayout(shape);
                    }
                };
                LineAxis.prototype._layoutYAxis = function (canvas) {
                    var ticks = this._ticks;
                    // this._children = [];
                    this.removeAllViews();
                    for (var i = 0; ticks && i < ticks.length; ++i) {
                        var value = ticks[i];
                        var nextValue = i >= ticks.length ? null : ticks[i + 1];
                        var tickheight = Math.max(this._majorTickHeight, this._minorTickHeight);
                        var label = this._format(value);
                        var labelSize = canvas.measureString(label, this.labelFont);
                        var y = this.scale.getScaleValue(value);
                        var x = this.layoutInfo.innerrect.right;
                        if (!this.near) {
                            x = this.layoutInfo.innerrect.left;
                        }
                        var nx = NaN;
                        var ny = NaN;
                        if (nextValue != null) {
                            ny = this.scale.getScaleValue(nextValue);
                            nx = x;
                        }
                        var labelX = x - labelSize.width / 2 - LABEL_PADDING - tickheight;
                        var labelY = y;
                        if (!this.near) {
                            labelX = x + labelSize.width / 2 + LABEL_PADDING + tickheight;
                        }
                        var shape = new test.AxisShape(this.getContext());
                        shape._lableRect = new test.RotateRect(labelX, labelY, labelSize.width, labelSize.height, 0);
                        shape._majorTick = new test.RotateLine(x, y, this._majorTickHeight, 0, this.near ? Math.PI / 2 : -Math.PI / 2);
                        shape._label = label;
                        shape._lableFont = this.labelFont;
                        shape._major = this.majorStyle;
                        shape._minor = this.minorStyle;
                        shape.id = Util.HashCode(label + "," + this.id);
                        var minory = NaN;
                        if (!isNaN(ny)) {
                            minory = (y + ny) / 2;
                        }
                        shape._minorTick = new test.RotateLine(x, minory, this._minorTickHeight, 0, this.near ? Math.PI / 2 : -Math.PI / 2);
                        // this._children.push(shape);
                        this.addViewWithOutReLayout(shape);
                    }
                };
                LineAxis.prototype.onMeasure = function (width, height, canvas) {
                    var size = null;
                    if (this._axisType == cartesian.AxisType.X) {
                        size = new Size(width.value, this._measureX(canvas));
                        this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                        return size;
                    }
                    else if (this._axisType == cartesian.AxisType.Y) {
                        size = new Size(this._measureY(canvas), height.value);
                        this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                        return size;
                    }
                    else {
                        return _super.prototype.onMeasure.call(this, width, height, canvas);
                    }
                };
                LineAxis.prototype._measureX = function (canvas) {
                    var titleSize = canvas.measureString(this.title, this.titleFont);
                    var tickHeght = Math.max(this._majorTickHeight, this._minorTickHeight);
                    var labelSize = new Size(0, 0);
                    var ticks = this._ticks;
                    for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {
                        var t = ticks_1[_i];
                        var sz = canvas.measureString(this._format(t), this.labelFont);
                        labelSize.width = Math.max(sz.width, labelSize.width);
                        labelSize.height = Math.max(sz.height, labelSize.height);
                    }
                    this._maxLabelSize = labelSize.clone();
                    return labelSize.height + titleSize.height + tickHeght;
                };
                LineAxis.prototype._measureY = function (canvas) {
                    var titleSize = canvas.measureString(this.title, this.titleFont);
                    var tickHeght = Math.max(this._majorTickHeight, this._minorTickHeight);
                    var labelSize = new Size(0, 0);
                    var ticks = this._ticks;
                    for (var _i = 0, ticks_2 = ticks; _i < ticks_2.length; _i++) {
                        var t = ticks_2[_i];
                        var sz = canvas.measureString(this._format(t), this.labelFont);
                        labelSize.width = Math.max(sz.width, labelSize.width);
                        labelSize.height = Math.max(sz.height, labelSize.height);
                    }
                    this._maxLabelSize = labelSize.clone();
                    return labelSize.width + titleSize.height + tickHeght;
                };
                LineAxis.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                    if (this.scale != null) {
                        if (this._axisType === cartesian.AxisType.X) {
                            this._layoutXAxis(canvas);
                        }
                        else if (this._axisType == cartesian.AxisType.Y) {
                            this._layoutYAxis(canvas);
                        }
                    }
                    this._overLapLabels();
                };
                LineAxis.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                    this._drawLine(canvas);
                };
                LineAxis.prototype._drawLine = function (canvas) {
                    var rect = this.layoutInfo.innerrect;
                    if (this._axisType == cartesian.AxisType.X) {
                        if (this._near) {
                            canvas.drawLine(new Point(rect.left, rect.top), new Point(rect.right, rect.top), this.lineStyle);
                        }
                        else {
                            canvas.drawLine(new Point(rect.left, rect.bottom), new Point(rect.right, rect.bottom), this.lineStyle);
                        }
                    }
                    else if (this._axisType == cartesian.AxisType.Y) {
                        if (this._near) {
                            canvas.drawLine(new Point(rect.right, rect.top), new Point(rect.right, rect.bottom), this.lineStyle);
                        }
                        else {
                            canvas.drawLine(new Point(rect.left, rect.top), new Point(rect.left, rect.bottom), this.lineStyle);
                        }
                    }
                };
                return LineAxis;
            }(cartesian.BaseAxis));
            cartesian.LineAxis = LineAxis;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var MeasureSpec = android.view.MeasureSpec;
            var Size = android.graphics.Size;
            var Rect = android.graphics.Rect;
            var Gravity = android.graphics.Gravity;
            var LayoutParams = android.view.LayoutParams;
            var Point = android.graphics.Point;
            var Default = android.device.Default;
            var Util = android.graphics.Util;
            var RadialLineAxis = /** @class */ (function (_super) {
                __extends(RadialLineAxis, _super);
                function RadialLineAxis(context) {
                    var _this = _super.call(this, context) || this;
                    _this.__innerRadius = 0;
                    _this.__startAngle = 0;
                    _this.__sweep = 0;
                    _this.__radius = 0;
                    _this.__cx = 0;
                    _this.__cy = 0;
                    _this.__innerRadius = 0;
                    _this._lineStyle = Default.strokestyle;
                    return _this;
                }
                Object.defineProperty(RadialLineAxis.prototype, "near", {
                    get: function () {
                        return this._near;
                    },
                    set: function (value) {
                        this._near = value;
                        if (value) {
                            if (this.type == cartesian.AxisType.X) {
                                this.gravity = Gravity.Bottom;
                            }
                            else if (this.type == cartesian.AxisType.Y) {
                                this.gravity = Gravity.Left;
                            }
                        }
                        else {
                            if (this.type == cartesian.AxisType.X) {
                                this.gravity = Gravity.Top;
                            }
                            else if (this.type == cartesian.AxisType.Y) {
                                this.gravity = Gravity.Right;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_cx", {
                    get: function () {
                        return this.__cx;
                    },
                    set: function (value) {
                        this.__cx = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_cy", {
                    get: function () {
                        return this.__cy;
                    },
                    set: function (value) {
                        this.__cy = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_radius", {
                    get: function () {
                        return this.__radius;
                    },
                    set: function (value) {
                        this.__radius = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_innerRadius", {
                    get: function () {
                        return this.__innerRadius;
                    },
                    set: function (value) {
                        this.__innerRadius = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_startAngle", {
                    get: function () {
                        return this.__startAngle;
                    },
                    set: function (value) {
                        this.__startAngle = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "_sweep", {
                    get: function () {
                        return this.__sweep;
                    },
                    set: function (value) {
                        this.__sweep = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RadialLineAxis.prototype, "id", {
                    get: function () {
                        if (this._id == null) {
                            this._id = Util.HashCode(Util.HashCode(this._axisType) + Util.HashCode(this.near) + Util.HashCode(this.title));
                            // this._id = (this._axisType)+","+ (this.near) +","+ (this.title);
                        }
                        return this._id;
                    },
                    enumerable: true,
                    configurable: true
                });
                RadialLineAxis.prototype._createTicks = function () {
                    var ticks = [];
                    if (this.scale instanceof test.LinearScale) {
                        ticks = test.LinearTicks.create(this.scale).createTicks(10);
                    }
                    else if (this.scale instanceof test.LogScale) {
                        ticks = test.LogTicks.create(this.scale).createTicks(10);
                    }
                    else if (this.scale instanceof test.OrdinalScale) {
                        ticks = test.OrdinalTicks.create(this.scale).createTicks();
                    }
                    // else if(this.scale instanceof Timescale)
                    return ticks;
                };
                RadialLineAxis.prototype._layoutXAxis = function (canvas) {
                    var ticks = this._ticks;
                    this.removeAllViews();
                    for (var i = 0; ticks && i < ticks.length; ++i) {
                        var value = ticks[i];
                        var nextValue = i >= ticks.length ? null : ticks[i + 1];
                        var tickheight = Math.max(this._majorTickHeight, this._minorTickHeight);
                        var label = this._format(value);
                        var labelSize = canvas.measureString(label, this.labelFont);
                        var radius = this.scale.getScaleValue(value);
                        var x = this._cx + Math.cos(this._startAngle) * radius;
                        var y = this._cy + Math.sin(this._startAngle) * radius;
                        var nx = NaN;
                        var ny = NaN;
                        if (nextValue != null) {
                            var nextRadius = this.scale.getScaleValue(nextValue);
                            nx = this._cx + Math.cos(this._startAngle) * nextRadius;
                            ny = this._cy + Math.sin(this._startAngle) * nextRadius;
                        }
                        var labelx = x + (Math.sin(this._startAngle) * (tickheight + LABEL_PADDING + labelSize.height / 2));
                        var labely = y - (Math.cos(this._startAngle) * (tickheight + LABEL_PADDING + labelSize.height / 2));
                        var labelX = x;
                        var labelY = y + tickheight + LABEL_PADDING + labelSize.height / 2;
                        var shape = new test.AxisShape(this.getContext());
                        shape._lableRect = new test.RotateRect(labelX, labelY, labelSize.width, labelSize.height, 0);
                        shape._majorTick = new test.RotateLine(x, y, this._majorTickHeight, 0, this._startAngle);
                        shape._label = label;
                        shape._lableFont = this._labelFont;
                        shape._major = this.majorStyle;
                        shape._minor = this.minorStyle;
                        shape.id = Util.HashCode(label + "," + this.id);
                        var minorx = NaN;
                        var minory = NaN;
                        var minorRadius = NaN;
                        if (!isNaN(nx)) {
                            minorRadius = this.scale.getScaleValue((value + nextValue) / 2);
                            minorx = this._cx + Math.cos(this._startAngle) * minorRadius;
                            minory = this._cy + Math.sin(this._startAngle) * minorRadius;
                        }
                        shape._minorTick = new test.RotateLine(minorx, minory, this._minorTickHeight, 0, this._startAngle);
                        this.addViewWithOutReLayout(shape);
                    }
                };
                RadialLineAxis.prototype._layoutYAxis = function (canvas) {
                    var ticks = this._ticks;
                    // this._children = [];
                    this.removeAllViews();
                    for (var i = 0; ticks && i < ticks.length; ++i) {
                        var value = ticks[i];
                        var nextValue = i >= ticks.length ? null : ticks[i + 1];
                        var tickheight = Math.max(this._majorTickHeight, this._minorTickHeight);
                        var label = this._format(value);
                        var labelSize = canvas.measureString(label, this.labelFont);
                        var angle = this.scale.getScaleValue(value);
                        var x = this._cx + Math.cos(angle) * this._radius;
                        var y = this._cy + Math.sin(angle) * this._radius;
                        var nx = NaN;
                        var ny = NaN;
                        if (nextValue != null) {
                            var nAngle = this.scale.getScaleValue(nextValue);
                            nx = this._cx + Math.cos(nAngle) * this._radius;
                            ny = this._cy + Math.sin(nAngle) * this._radius;
                        }
                        var lableX = this._cx + Math.cos(angle) * (this._radius + tickheight + LABEL_PADDING + labelSize.height / 2);
                        var lableY = this._cy + Math.sin(angle) * (this._radius + tickheight + LABEL_PADDING + labelSize.height / 2);
                        var shape = new test.AxisShape(this.getContext());
                        shape._lableRect = new test.RotateRect(lableX, lableY, labelSize.width, labelSize.height, 0);
                        shape._majorTick = new test.RotateLine(x, y, this._majorTickHeight, 0, angle - Math.PI / 2);
                        shape._label = label;
                        shape._lableFont = this.labelFont;
                        shape._major = this.majorStyle;
                        shape._minor = this.minorStyle;
                        shape.id = Util.HashCode(label + "," + this.id);
                        var minory = NaN;
                        var minorx = NaN;
                        var minorAngle = NaN;
                        if (!isNaN(ny)) {
                            minorAngle = this.scale.getScaleValue((nextValue + value) / 2);
                            minorx = this._cx + Math.cos(minorAngle) * this._radius;
                            minory = this._cy + Math.sin(minorAngle) * this._radius;
                        }
                        shape._minorTick = new test.RotateLine(minorx, minory, this._minorTickHeight, 0, minorAngle - Math.PI / 2);
                        // this._children.push(shape);
                        this.addViewWithOutReLayout(shape);
                    }
                };
                RadialLineAxis.prototype.onMeasure = function (width, height, canvas) {
                    var size = null;
                    if (this._axisType == cartesian.AxisType.X) {
                        size = new Size(width.value, this._measureX(canvas));
                        this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                        return size;
                    }
                    else if (this._axisType == cartesian.AxisType.Y) {
                        size = new Size(this._measureY(canvas), height.value);
                        this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                        return size;
                    }
                    else {
                        return _super.prototype.onMeasure.call(this, width, height, canvas);
                    }
                };
                RadialLineAxis.prototype._measureX = function (canvas) {
                    var titleSize = canvas.measureString(this.title, this.titleFont);
                    var tickHeght = Math.max(this._majorTickHeight, this._minorTickHeight);
                    var labelSize = new Size(0, 0);
                    var ticks = this._ticks;
                    for (var _i = 0, ticks_3 = ticks; _i < ticks_3.length; _i++) {
                        var t = ticks_3[_i];
                        var sz = canvas.measureString(this._format(t), this.labelFont);
                        labelSize.width = Math.max(sz.width, labelSize.width);
                        labelSize.height = Math.max(sz.height, labelSize.height);
                    }
                    return labelSize.height + titleSize.height + tickHeght;
                };
                RadialLineAxis.prototype._measureY = function (canvas) {
                    var titleSize = canvas.measureString(this.title, this.titleFont);
                    var tickHeght = Math.max(this._majorTickHeight, this._minorTickHeight);
                    var labelSize = new Size(0, 0);
                    var ticks = this._ticks;
                    for (var _i = 0, ticks_4 = ticks; _i < ticks_4.length; _i++) {
                        var t = ticks_4[_i];
                        var sz = canvas.measureString(this._format(t), this.labelFont);
                        labelSize.width = Math.max(sz.width, labelSize.width);
                        labelSize.height = Math.max(sz.height, labelSize.height);
                    }
                    return labelSize.width + titleSize.height + tickHeght;
                };
                RadialLineAxis.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                    if (this.scale != null) {
                        if (this._axisType === cartesian.AxisType.X) {
                            this._layoutXAxis(canvas);
                        }
                        else if (this._axisType == cartesian.AxisType.Y) {
                            this._layoutYAxis(canvas);
                        }
                    }
                    this._overLapLabels();
                };
                RadialLineAxis.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                    this._drawLine(canvas);
                    // if (this._children != null) {
                    //     for (let shape of this._children) {
                    //         shape.onDraw(canvas);
                    //     }
                    // }
                };
                RadialLineAxis.prototype._drawLine = function (canvas) {
                    var rect = this.layoutInfo.innerrect;
                    if (this._axisType == cartesian.AxisType.X) {
                        var endx = this._cx + Math.cos(this.__startAngle) * this._radius;
                        var endy = this._cy + Math.sin(this.__startAngle) * this._radius;
                        var sx = this._cx + Math.cos(this.__startAngle) *
                            this.__innerRadius * this._radius;
                        var sy = this._cy + Math.sin(this.__startAngle) * this._innerRadius * this._radius;
                        canvas.drawLine(new Point(sx, sy), new Point(endx, endy), this.lineStyle);
                    }
                    else if (this._axisType == cartesian.AxisType.Y) {
                        var s = Default.style;
                        s.strokeStyle = this.lineStyle;
                        // canvas.drawDonut(this._cx, this._cy, this._radius, this._radius - this.lineStyle.strokeWidth, this._startAngle , this._sweep , s);
                        canvas.drawArc(new Rect(this._cx - this._radius, this._cy - this._radius, this._radius + this._cx, this._radius + this._cy), this._startAngle, this._sweep, s);
                    }
                };
                return RadialLineAxis;
            }(cartesian.BaseAxis));
            cartesian.RadialLineAxis = RadialLineAxis;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var ViewGroup = android.view.ViewGroup;
        var BasePlot = /** @class */ (function (_super) {
            __extends(BasePlot, _super);
            function BasePlot() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(BasePlot.prototype, "layout", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            return BasePlot;
        }(ViewGroup));
        test.BasePlot = BasePlot;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            var Rect = android.graphics.Rect;
            var Default = android.device.Default;
            var Animation = android.view.animation.Animation;
            var BounceAnimationEase = android.view.animation.BounceAnimationEase;
            var CartesianPlot = /** @class */ (function (_super) {
                __extends(CartesianPlot, _super);
                function CartesianPlot(context, datamodel) {
                    var _this = _super.call(this, context) || this;
                    _this.__shapeList = [];
                    _this._datamodel = datamodel;
                    _this._layouts = [];
                    _this.__scalePairs = [];
                    _this._animation = new Animation();
                    _this._animation.duration = 500;
                    _this._animation.ease = new BounceAnimationEase();
                    return _this;
                }
                CartesianPlot.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                CartesianPlot.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                    if (this.islayoutChanged) {
                        this.removeAllViews();
                        this.__shapeList = [];
                        this.__scalePairs = [];
                        this._layouts.length = 0;
                        var isradial = this._datamodel.encoding._radial;
                        for (var _i = 0, _a = this._datamodel.chartTypes; _i < _a.length; _i++) {
                            var type = _a[_i];
                            switch (type) {
                                case test.ChartType.Bar:
                                    if (isradial) {
                                        var barlayout = new cartesian.RadialBarLayout(this.getContext());
                                        var cx = (l + r) / 2;
                                        var cy = (b + t) / 2;
                                        var radius = ((r - l) < (b - t) ? (r - l) : (b - t)) / 2;
                                        var innerRadius = 0;
                                        var startAngle = cartesian.StartAngle;
                                        var endAngle = Math.PI * 2 + startAngle;
                                        barlayout.convert(this._datamodel.getSeriesByType(test.ChartType.Bar), this._datamodel.encoding, cx, cy, innerRadius, radius, startAngle, endAngle);
                                        this.__shapeList = this.__shapeList.concat(barlayout.shapeList);
                                        this._layouts.push(barlayout);
                                    }
                                    else {
                                        var barlayout = new cartesian.BarLayout(this.getContext());
                                        barlayout.convert(this._datamodel.getSeriesByType(test.ChartType.Bar), this._datamodel.encoding, new Rect(l, t, r, b), canvas);
                                        this.__shapeList = this.__shapeList.concat(barlayout.shapeList);
                                        this._layouts.push(barlayout);
                                    }
                                    break;
                                case test.ChartType.Line:
                                    if (isradial) {
                                        var linelayout = new cartesian.RadialLineLayout(this.getContext());
                                        var cx = (l + r) / 2;
                                        var cy = (b + t) / 2;
                                        var radius = ((r - l) < (b - t) ? (r - l) : (b - t)) / 2;
                                        var innerRadius = 0;
                                        var startAngle = cartesian.StartAngle;
                                        var endAngle = Math.PI * 2 + startAngle;
                                        linelayout.convert(this._datamodel.getSeriesByType(test.ChartType.Line), this._datamodel.encoding, cx, cy, innerRadius, radius, startAngle, endAngle);
                                        this.__shapeList = this.__shapeList.concat(linelayout.shapeList);
                                        this._layouts.push(linelayout);
                                    }
                                    else {
                                        var linelayout = new cartesian.LineLayout(this.getContext());
                                        linelayout.convert(this._datamodel.getSeriesByType(test.ChartType.Line), this._datamodel.encoding, new Rect(l, t, r, b), canvas);
                                        this.__shapeList = this.__shapeList.concat(linelayout.shapeList);
                                        this._layouts.push(linelayout);
                                    }
                                    break;
                                case test.ChartType.Scatter:
                                    if (isradial) {
                                        var scatterlayout = new cartesian.RadialScatterLayout(this.getContext());
                                        var cx = (l + r) / 2;
                                        var cy = (b + t) / 2;
                                        var radius = ((r - l) < (b - t) ? (r - l) : (b - t)) / 2;
                                        var innerRadius = 0;
                                        var startAngle = cartesian.StartAngle;
                                        var endAngle = Math.PI * 2 + startAngle;
                                        scatterlayout.convert(this._datamodel.getSeriesByType(test.ChartType.Scatter), this._datamodel.encoding, cx, cy, innerRadius, radius, startAngle, endAngle);
                                        this.__shapeList = this.__shapeList.concat(scatterlayout.shapeList);
                                        this._layouts.push(scatterlayout);
                                    }
                                    else {
                                        var scatterLayout = new cartesian.ScatterLayout(this.getContext());
                                        scatterLayout.convert(this._datamodel.getSeriesByType(test.ChartType.Scatter), this._datamodel.encoding, new Rect(l, t, r, b), canvas);
                                        this.__shapeList = this.__shapeList.concat(scatterLayout.shapeList);
                                        this._layouts.push(scatterLayout);
                                    }
                                    break;
                                case test.ChartType.Area:
                                    if (isradial) {
                                        var arealayout = new cartesian.RadialAreaLayout(this.getContext());
                                        var cx = (l + r) / 2;
                                        var cy = (b + t) / 2;
                                        var radius = ((r - l) < (b - t) ? (r - l) : (b - t)) / 2;
                                        var innerRadius = 0;
                                        var startAngle = cartesian.StartAngle;
                                        var endAngle = Math.PI * 2 + startAngle;
                                        arealayout.convert(this._datamodel.getSeriesByType(test.ChartType.Area), this._datamodel.encoding, cx, cy, innerRadius, radius, startAngle, endAngle);
                                        this.__shapeList = this.__shapeList.concat(arealayout.shapeList);
                                        this._layouts.push(arealayout);
                                    }
                                    else {
                                        var arealayout = new cartesian.AreaLayout(this.getContext());
                                        arealayout.convert(this._datamodel.getSeriesByType(test.ChartType.Area), this._datamodel.encoding, new Rect(l, t, r, b), canvas);
                                        this.__shapeList = this.__shapeList.concat(arealayout.shapeList);
                                        this._layouts.push(arealayout);
                                    }
                                    break;
                            }
                        }
                        if (this.layouts.length > 1) {
                            for (var i = 0; i < this._layouts.length; ++i) {
                                var scalesPairs = this.layouts[i].scalePairs;
                                var _loop_1 = function (pair) {
                                    var result = _.find(this_1.scalePairs, function (p) {
                                        return p.filed.equals(pair.filed) && p.scale.equal(pair.scale);
                                    });
                                    if (result == null) {
                                        this_1.__scalePairs.push({ series: [].concat(pair.series), filed: pair.filed, scale: pair.scale });
                                    }
                                    else {
                                        result.series = result.series.concat(pair.series);
                                    }
                                };
                                var this_1 = this;
                                for (var _b = 0, scalesPairs_1 = scalesPairs; _b < scalesPairs_1.length; _b++) {
                                    var pair = scalesPairs_1[_b];
                                    _loop_1(pair);
                                }
                            }
                        }
                        else if (this._layouts.length === 1) {
                            this.__scalePairs = this._layouts[0].scalePairs;
                        }
                        if (!this._datamodel.encoding._radial) {
                            this._layoutLine(l, r);
                        }
                        // if(this.comparedAniamtionCache != null){
                        //     if(!this.comparedAniamtionCache.isempty){
                        //         this.comparedAniamtionCache.preparing();
                        //     }
                        //     setTimeout(() => {
                        //         this.comparedAniamtionCache.startCompare(this.__shapeList);
                        //     });
                        // }
                        for (var _c = 0, _d = this.__shapeList; _c < _d.length; _c++) {
                            var shape = _d[_c];
                            this.addViewWithOutReLayout(shape);
                            if (shape instanceof test.PlotShape && shape.label != null) {
                                this.addViewWithOutReLayout(shape.label);
                            }
                        }
                    }
                };
                CartesianPlot.prototype._layoutLine = function (l, r) {
                    var ys = [];
                    for (var _i = 0, _a = this.layouts; _i < _a.length; _i++) {
                        var layout = _a[_i];
                        for (var _b = 0, _c = layout.scalePairs; _b < _c.length; _b++) {
                            var pair = _c[_b];
                            if (pair.filed.name == 'y') {
                                var y = pair.scale.getScaleValue(0);
                                if (ys.indexOf(y) < 0) {
                                    ys.push(y);
                                    var axisline = new test.AxisLineShape(this.getContext(), l, y, r, y, Default.strokestyle);
                                    this.__shapeList.push(axisline);
                                }
                            }
                        }
                    }
                };
                CartesianPlot.prototype.beginLoadingAnimation = function () {
                    var step = 500 / this.children.length;
                    var _loop_2 = function (i) {
                        var shape = this_2.children[i];
                        if (shape instanceof test.ScatterShape) {
                            setTimeout(function () {
                                // console.log("index  " + i);
                                var animation = new test.ScatterAnimation(null);
                                animation.duration = 500;
                                animation.from = 0.2;
                                animation.to = 1;
                                animation.fillAfter = false;
                                shape.startAnimation(animation);
                            }, step * i);
                        }
                        else if (shape instanceof test.BarShape) {
                            setTimeout(function () {
                                var animation = new test.BarAnimation(null);
                                animation.duration = 1000;
                                animation.from = 0.3;
                                animation.to = 1;
                                animation.fillAfter = false;
                                shape.startAnimation(animation);
                            }, step * i);
                        }
                        else if (shape instanceof test.AreaShape || shape instanceof test.LinesShape) {
                            setTimeout(function () {
                                var animation = new test.AreaAnimation(null);
                                animation.duration = 1000;
                                animation.from = 0;
                                animation.to = 1;
                                animation.fillAfter = false;
                                shape.startAnimation(animation);
                            }, step * i);
                        }
                        else if (shape instanceof test.RadialBarShape) {
                            setTimeout(function () {
                                var animation = new test.SweepAnimation();
                                animation.duration = 1000;
                                animation.from = 0;
                                animation.to = 1;
                                animation.fillAfter = false;
                                shape.startAnimation(animation);
                            }, step * i);
                        }
                    };
                    var this_2 = this;
                    for (var i = 0; i < this.children.length; ++i) {
                        _loop_2(i);
                    }
                };
                /**
                 * merage the scales which is  x / y
                 */
                CartesianPlot.prototype.__merageScale = function () {
                };
                CartesianPlot.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                    // for (let shape of this.__shapeList) {
                    //     shape.draw(canvas);
                    // }
                };
                Object.defineProperty(CartesianPlot.prototype, "layouts", {
                    get: function () {
                        return this._layouts;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartesianPlot.prototype, "scalePairs", {
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                return CartesianPlot;
            }(test.BasePlot));
            cartesian.CartesianPlot = CartesianPlot;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var MeasureSpec = android.view.MeasureSpec;
            var Size = android.graphics.Size;
            var LayoutParams = android.view.LayoutParams;
            var FrameLayout = android.widget.FrameLayout;
            var Gravity = android.graphics.Gravity;
            var StrokeStyle = android.graphics.StrokeStyle;
            cartesian.StartAngle = Math.PI;
            var CartesianChart = /** @class */ (function (_super) {
                __extends(CartesianChart, _super);
                function CartesianChart(context, option, chartType) {
                    var _this = _super.call(this, context) || this;
                    _this._option = option;
                    _this._chartType = chartType;
                    _this._axisList = [];
                    return _this;
                }
                Object.defineProperty(CartesianChart.prototype, "option", {
                    get: function () {
                        return this._option;
                    },
                    set: function (value) {
                        this._option = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartesianChart.prototype, "chartType", {
                    get: function () {
                        return this._chartType;
                    },
                    set: function (value) {
                        if (value != null && value != this._chartType) {
                            this._chartType = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CartesianChart.prototype, "datamodel", {
                    get: function () {
                        return this._dataModel;
                    },
                    set: function (value) {
                        this._dataModel = value;
                        if (this._dataModel.encoding._radial) {
                            this._loadRadialView();
                        }
                        else {
                            this._loadView();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                CartesianChart.prototype._loadView = function () {
                    for (var _i = 0, _a = this.datamodel.scalePairs; _i < _a.length; _i++) {
                        var pair = _a[_i];
                        if (pair.filed.name == 'y') {
                            var axisY = new cartesian.LineAxis(this.getContext());
                            axisY.type = cartesian.AxisType.Y;
                            axisY.layoutParams.height = LayoutParams.MATCH_PARENT;
                            axisY.layoutParams.width = 100;
                            axisY.near = true;
                            axisY.majorStyle = new StrokeStyle(1, 'black');
                            axisY.series = [].concat(pair.series);
                            axisY.lineStyle = new StrokeStyle(1, 'black');
                            this._axisList.push(axisY);
                            this.addView(axisY);
                        }
                    }
                    if (this._axisList.length > 1) {
                        this._axisList[this._axisList.length - 1].near = false;
                    }
                    var plot = new cartesian.CartesianPlot(this.getContext(), this.datamodel);
                    plot.layoutParams.width = LayoutParams.MATCH_PARENT;
                    plot.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._plot = plot;
                    this.addView(plot);
                    var axisX = new cartesian.LineAxis(this.getContext());
                    axisX.type = cartesian.AxisType.X;
                    axisX.layoutParams.width = LayoutParams.MATCH_PARENT;
                    axisX.layoutParams.height = 100;
                    axisX.majorStyle = new StrokeStyle(1, 'black');
                    axisX.near = true;
                    axisX.lineStyle = new StrokeStyle(1, 'black');
                    this._axisList.push(axisX);
                    this.addView(axisX);
                };
                CartesianChart.prototype.beginLoadingAnimation = function () {
                    this.plot.beginLoadingAnimation();
                };
                CartesianChart.prototype._loadRadialView = function () {
                    for (var _i = 0, _a = this.datamodel.scalePairs; _i < _a.length; _i++) {
                        var pair = _a[_i];
                        if (pair.filed.name == 'y') {
                            var axisY = new cartesian.RadialLineAxis(this.getContext());
                            axisY.type = cartesian.AxisType.Y;
                            axisY.layoutParams.height = LayoutParams.MATCH_PARENT;
                            axisY.layoutParams.width = LayoutParams.MATCH_PARENT;
                            axisY.near = true;
                            axisY.series = [].concat(pair.series);
                            axisY.lineStyle = new StrokeStyle(1, 'black');
                            axisY.majorStyle = new StrokeStyle(1, 'black');
                            this._axisList.push(axisY);
                            this.addView(axisY);
                        }
                    }
                    if (this._axisList.length > 1) {
                        this._axisList[this._axisList.length - 1].near = false;
                    }
                    var plot = new cartesian.CartesianPlot(this.getContext(), this.datamodel);
                    plot.layoutParams.width = LayoutParams.MATCH_PARENT;
                    plot.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._plot = plot;
                    this.addView(plot);
                    var axisX = new cartesian.RadialLineAxis(this.getContext());
                    axisX.type = cartesian.AxisType.X;
                    axisX.gravity = Gravity.Center;
                    axisX.layoutParams.width = LayoutParams.MATCH_PARENT;
                    axisX.layoutParams.height = LayoutParams.MATCH_PARENT;
                    axisX.majorStyle = new StrokeStyle(1, 'black');
                    axisX.near = true;
                    axisX.lineStyle = new StrokeStyle(1, 'black');
                    this._axisList.push(axisX);
                    this.addView(axisX);
                };
                CartesianChart.prototype.onMeasure = function (width, height, canvas) {
                    // return super.onMeasure(width,height,canvas);
                    var maxsize = new Size(0, 0);
                    if (this.datamodel.encoding._radial) {
                        var offset = 0;
                        for (var _i = 0, _a = this._axisList; _i < _a.length; _i++) {
                            var axis = _a[_i];
                            var size = axis.onMeasure(width, height, canvas);
                            if (axis.type == cartesian.AxisType.Y) {
                                offset = size.width;
                            }
                        }
                        var w = width.getMeasureValue();
                        var h = height.getMeasureValue();
                        var radius = w < h ? w / 2 : h / 2;
                        radius = radius - offset;
                        var startAngle = cartesian.StartAngle;
                        var sweep = Math.PI * 2;
                        for (var _b = 0, _c = this.children; _b < _c.length; _b++) {
                            var view_1 = _c[_b];
                            var size = new Size(0, 0);
                            if (view_1 instanceof cartesian.BaseAxis) {
                                if (view_1.type == cartesian.AxisType.Y) {
                                    size = view_1.onMeasure(new MeasureSpec(width.getMeasureValue(), LayoutParams.EXACTLY), new MeasureSpec(height.getMeasureValue(), LayoutParams.EXACTLY), canvas);
                                }
                                else if (view_1.type == cartesian.AxisType.X) {
                                    view_1.onMeasure(width, height, canvas);
                                }
                                view_1._innerRadius = 0;
                                view_1._startAngle = startAngle;
                                view_1._sweep = sweep;
                                view_1._radius = radius;
                            }
                            else if (view_1 instanceof test.BasePlot) {
                                view_1.layoutParams.margin.marginLeft = offset;
                                view_1.layoutParams.margin.marginTop = offset;
                                view_1.layoutParams.margin.marginRight = offset;
                                view_1.layoutParams.margin.marginBottom = offset;
                                view_1.onMeasure(width, height, canvas);
                            }
                        }
                    }
                    else {
                        var loff = 0, toff = 0, roff = 0, boff = 0;
                        var axisYPositiveoffset = [];
                        var axisYNegativeoffset = [];
                        for (var _d = 0, _e = this._axisList; _d < _e.length; _d++) {
                            var axis = _e[_d];
                            var size = axis.onMeasure(width, height, canvas);
                            if (axis.type == cartesian.AxisType.X) {
                                if (axis.near) {
                                    boff = size.height;
                                }
                                else {
                                    toff = size.height;
                                }
                            }
                            else if (axis.type == cartesian.AxisType.Y) {
                                if (axis.near) {
                                    loff += size.width;
                                    axisYPositiveoffset.push(size.width);
                                }
                                else {
                                    roff += size.width;
                                    axisYPositiveoffset.push(size.width);
                                }
                            }
                        }
                        var leftPadding = 0;
                        var rightPadding = 0;
                        for (var _f = 0, _g = this.children; _f < _g.length; _f++) {
                            var view_2 = _g[_f];
                            var size = new Size(0, 0);
                            if (view_2 instanceof cartesian.BaseAxis) {
                                if (view_2.type == cartesian.AxisType.X) {
                                    view_2.layoutParams.margin.marginLeft = loff;
                                    view_2.layoutParams.margin.marginRight = roff;
                                    size = view_2.onMeasure(new MeasureSpec(width.getMeasureValue() - loff - roff, width.mode), height, canvas);
                                }
                                else if (view_2.type == cartesian.AxisType.Y) {
                                    if (view_2.near) {
                                        view_2.layoutParams.margin.marginTop = toff;
                                        view_2.layoutParams.margin.marginBottom = boff;
                                        view_2.layoutParams.margin.marginLeft = leftPadding;
                                        leftPadding += view_2.width;
                                        size = view_2.onMeasure(width, new MeasureSpec(height.getMeasureValue() - toff - boff, LayoutParams.EXACTLY), canvas);
                                    }
                                    else {
                                        view_2.layoutParams.margin.marginTop = toff;
                                        view_2.layoutParams.margin.marginBottom = boff;
                                        view_2.layoutParams.margin.marginRight = rightPadding;
                                        rightPadding += view_2.width;
                                        size = view_2.onMeasure(width, new MeasureSpec(height.getMeasureValue() - toff - boff, LayoutParams.EXACTLY), canvas);
                                    }
                                }
                            }
                            else if (view_2 instanceof test.BasePlot) {
                                view_2.layoutParams.margin.marginLeft = loff;
                                view_2.layoutParams.margin.marginRight = roff;
                                view_2.layoutParams.margin.marginTop = toff;
                                view_2.layoutParams.margin.marginBottom = boff;
                                size = view_2.onMeasure(width, height, canvas);
                            }
                            else {
                                size = view_2.onMeasure(width, height, canvas);
                            }
                            if (size.width > maxsize.width) {
                                maxsize.width = size.width;
                            }
                            if (size.height > maxsize.height) {
                                maxsize.height = size.height;
                            }
                        }
                    }
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                CartesianChart.prototype.onLayout = function (l, t, r, b, canvas) {
                    this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                    for (var _i = 0, _a = this._axisList; _i < _a.length; _i++) {
                        var axis = _a[_i];
                        axis.scale = null;
                    }
                    // super.onLayout(l, t, r, b, canvas); 
                    this.layoutItem(this.plot, l, t, r, b, canvas);
                    for (var _b = 0, _c = this._axisList; _b < _c.length; _b++) {
                        var axis = _c[_b];
                        if (axis instanceof cartesian.BaseAxis) {
                            if (axis instanceof cartesian.RadialLineAxis) {
                                axis._cx = (l + r) / 2;
                                axis._cy = (t + b) / 2;
                            }
                            if (axis.type === cartesian.AxisType.X) {
                                for (var _d = 0, _e = this.plot.scalePairs; _d < _e.length; _d++) {
                                    var pair = _e[_d];
                                    if (pair.filed.name == 'x') {
                                        axis.scale = pair.scale;
                                    }
                                }
                            }
                            else {
                                for (var _f = 0, _g = this.plot.scalePairs; _f < _g.length; _f++) {
                                    var pair = _g[_f];
                                    if (pair.filed.name == 'y' && _.xor(pair.series, axis.series).length == 0) {
                                        axis.scale = pair.scale;
                                    }
                                }
                            }
                        }
                        this.layoutItem(axis, l, r, t, b, canvas);
                    }
                };
                Object.defineProperty(CartesianChart.prototype, "plot", {
                    get: function () {
                        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                            var plot = _a[_i];
                            if (plot instanceof cartesian.CartesianPlot) {
                                return plot;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                CartesianChart.prototype.dispatchDraw = function (canvas) {
                    _super.prototype.dispatchDraw.call(this, canvas);
                };
                return CartesianChart;
            }(FrameLayout));
            cartesian.CartesianChart = CartesianChart;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Gravity = android.graphics.Gravity;
        var RootView = android.widget.RootView;
        var BaseChartLayout = /** @class */ (function (_super) {
            __extends(BaseChartLayout, _super);
            function BaseChartLayout() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.__legends = [];
                return _this;
            }
            BaseChartLayout.prototype.setMainLayout = function (main) {
                this.__mainLayout = main;
                this.addView(main, 0);
            };
            BaseChartLayout.prototype.addLegend = function (legend) {
                this.__legends.push(legend);
                this.addView(legend, 0);
            };
            BaseChartLayout.prototype.removeAllViews = function () {
                _super.prototype.removeAllViews.call(this);
                this.__mainLayout = null;
                this.__legends.length = 0;
            };
            BaseChartLayout.prototype.onMeasure = function (width, height, canvas) {
                _super.prototype.onMeasure.call(this, width, height, canvas);
                if (this.__oldMargin == null) {
                    this.__oldMargin = _.cloneDeep(this.__mainLayout.layoutParams.margin);
                }
                else {
                    this.__mainLayout.layoutParams.margin = _.cloneDeep(this.__oldMargin);
                }
                for (var _i = 0, _a = this.__legends; _i < _a.length; _i++) {
                    var legend = _a[_i];
                    switch (legend.gravity) {
                        case Gravity.Left:
                            this.__mainLayout.layoutParams.margin.marginLeft += (legend.width + legend.layoutParams.margin.marginLeft + legend.layoutParams.margin.marginRight);
                            break;
                        case Gravity.Right:
                            this.__mainLayout.layoutParams.margin.marginRight += (legend.width + legend.layoutParams.margin.marginRight + legend.layoutParams.margin.marginLeft);
                            break;
                        case Gravity.Top:
                            this.__mainLayout.layoutParams.margin.marginTop += (legend.height + legend.layoutParams.margin.marginTop + legend.layoutParams.margin.marginBottom);
                            break;
                        case Gravity.Bottom:
                            this.__mainLayout.layoutParams.margin.marginBottom += (legend.height + legend.layoutParams.margin.marginBottom + legend.layoutParams.margin.marginTop);
                            break;
                    }
                }
                return _super.prototype.onMeasure.call(this, width, height, canvas);
            };
            BaseChartLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
            };
            return BaseChartLayout;
        }(RootView));
        test.BaseChartLayout = BaseChartLayout;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            var Padding = android.graphics.Padding;
            var Gravity = android.graphics.Gravity;
            var LayoutParams = android.view.LayoutParams;
            var RenderType = android.graphics.RenderType;
            var Util = android.graphics.Util;
            var Handler = android.util.Handler;
            var ChartLayout = /** @class */ (function (_super) {
                __extends(ChartLayout, _super);
                function ChartLayout(context) {
                    var _this = _super.call(this, context) || this;
                    _this.clip = false;
                    var handler = new Handler(function (msg) {
                        console.log(msg);
                        console.log(msg.args.info.value);
                        var types = msg.args['types'];
                        var info = msg.args['info'];
                        if (types == test.ElementType.SeriesLegend) {
                            var series = _this._dataModel.filter.series;
                            var index = series.indexOf(info.name);
                            if (info.action === 'enable') {
                                if (!info.value) {
                                    if (index > -1) {
                                        _this._dataModel.filter.series.splice(index, 1);
                                    }
                                }
                                else {
                                    if (index < 0) {
                                        _this._dataModel.filter.series.push(info.name);
                                    }
                                }
                                _this.perpareComparedAnimation();
                                _this._dataModel.refresh();
                                _this.setChart();
                                _this.startCompare();
                            }
                            else if (info.action === 'showlabel') {
                                _this.requestLayout();
                            }
                        }
                    });
                    context.setArgs(test.EventMessage, handler);
                    return _this;
                }
                ChartLayout.prototype.attachElement = function (element, renderType, datamodel, update) {
                    _super.prototype.attachElement.call(this, element, Util.asEnum(renderType, RenderType));
                    this.padding = new Padding(20);
                    this._dataModel = datamodel;
                    this.setChart();
                };
                ChartLayout.prototype.beginLoadingAnimation = function () {
                    if (this.getContext() != null) {
                        var comparedAnimationCache = this.getContext().getArgs('comparedanimation');
                        if (comparedAnimationCache != null) {
                            comparedAnimationCache.clear();
                        }
                    }
                    this._chart.beginLoadingAnimation();
                };
                ChartLayout.prototype.setChart = function () {
                    this.removeAllViews();
                    this._chart = new cartesian.CartesianChart(this.getContext(), null, test.ChartType.Bar);
                    this._chart.layoutParams.width = LayoutParams.MATCH_PARENT;
                    this._chart.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._chart.datamodel = this._dataModel;
                    this._chart.gravity = Gravity.Bottom;
                    this.setMainLayout(this._chart);
                    if (this._dataModel.allSeries.length > 1) {
                        var legend = new cartesian.SeriesLegend(this.getContext(), 'bar');
                        legend.series = this._dataModel.allSeries;
                        legend.gravity = Gravity.Bottom;
                        legend.layoutParams.margin.marginLeft = 0;
                        legend.layoutParams.margin.marginTop = 20;
                        legend.layoutParams.width = LayoutParams.WRAP_CONTENT;
                        legend.layoutParams.height = LayoutParams.WRAP_CONTENT;
                        this.addLegend(legend);
                    }
                    else if (this._dataModel.series.length == 1) {
                        // this._horizontallegend.series = datamodel._getScaleByName('color',datamodel.series[0].name);
                    }
                    if (this._dataModel != null) {
                        for (var _i = 0, _a = this._dataModel.scalePairs; _i < _a.length; _i++) {
                            var scaleinfo = _a[_i];
                            if (scaleinfo.filed.name == 'color' || scaleinfo.filed.name == 'size') {
                                if (scaleinfo.scale instanceof test.LinearScale) {
                                    var legend = new cartesian.LinearScaleLegend(this.getContext(), scaleinfo.filed.name);
                                    legend.scale = scaleinfo.scale;
                                    legend.layoutParams.width = 300;
                                    legend.layoutParams.height = 30;
                                    legend.gravity = Gravity.Top;
                                    legend.layoutParams.margin.marginLeft = 100;
                                    legend.layoutParams.margin.marginBottom = 20;
                                    this.addLegend(legend);
                                }
                                else if (scaleinfo.scale instanceof test.OrdinalScale) {
                                    var legend = new cartesian.OrdinalScaleLegend(this.getContext(), scaleinfo.filed.name);
                                    legend.scale = scaleinfo.scale;
                                    legend.layoutParams.width = LayoutParams.MATCH_PARENT;
                                    legend.layoutParams.height = LayoutParams.WRAP_CONTENT;
                                    legend.gravity = Gravity.Top;
                                    legend.layoutParams.margin.marginLeft = 100;
                                    legend.layoutParams.margin.marginBottom = 20;
                                    this.addLegend(legend);
                                }
                            }
                        }
                    }
                };
                ChartLayout.prototype.oninvalidate = function () {
                    _super.prototype.oninvalidate.call(this);
                };
                ChartLayout.prototype.dispatchDraw = function (canvas) {
                    _super.prototype.dispatchDraw.call(this, canvas);
                    var rect = this.layoutInfo.outterrect;
                    canvas.drawRect(rect.startPoint, rect.endPoint, false, this.background);
                };
                ChartLayout.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                ChartLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                };
                ChartLayout.prototype.addView = function (view, index) {
                    _super.prototype.addView.call(this, view, index);
                    return 0;
                };
                return ChartLayout;
            }(test.BaseChartLayout));
            cartesian.ChartLayout = ChartLayout;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            var Rect = android.graphics.Rect;
            var Util = android.graphics.Util;
            var HierarchicalPlot = /** @class */ (function (_super) {
                __extends(HierarchicalPlot, _super);
                function HierarchicalPlot(context, datamodel) {
                    var _this = _super.call(this, context) || this;
                    _this.__comparedAnimationCache = new android.ComparedAnimationCache();
                    _this._datamodel = datamodel;
                    _this._layouts = [];
                    _this.__scalePairs = [];
                    _this._currentRect = new Rect(0, 0, 0, 0);
                    return _this;
                }
                HierarchicalPlot.prototype.scaleCallBack = function (rect) {
                    var _this = this;
                    if (rect.width * rect.height < this.layoutInfo.innerrect.width * this.layoutInfo.innerrect.height / 4) {
                        if (this._datamodel.chartType === test.ChartType.TreeMap) {
                            setTimeout(function () {
                                var treemapLayout = new hierarchical.TreeMapLayout(_this.getContext(), _this.layoutInfo.innerrect);
                                var rect = _this._currentRect;
                                _this._currentRect = new Rect(rect.left - rect.width / 2, rect.top - rect.height / 2, rect.right + rect.width / 2, rect.bottom + rect.height / 2);
                                treemapLayout.convert(_this._datamodel.root, _this._datamodel.encoding, _this._currentRect, _this._canvas);
                                var shapeList = []; //(treemapLayout.shapeList);
                                for (var _i = 0, _a = treemapLayout.shapeList; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    if (Util.isMixed(item.layoutInfo.innerrect, _this.layoutInfo.innerrect)) {
                                        shapeList.push(item);
                                    }
                                }
                                console.log("after shapelist size  " + shapeList.length);
                                _this.removeAllViews();
                                for (var _b = 0, shapeList_1 = shapeList; _b < shapeList_1.length; _b++) {
                                    var shape = shapeList_1[_b];
                                    _this.addViewWithOutReLayout(shape);
                                    if (shape instanceof test.PlotShape && shape.label != null) {
                                        _this.addViewWithOutReLayout(shape.label);
                                    }
                                }
                                _this.__comparedAnimationCache.startCompare(shapeList);
                            }, 100);
                        }
                    }
                    else if (rect.width * rect.height > this.layoutInfo.innerrect.width * this.layoutInfo.innerrect.height / 4) {
                        if (this._datamodel.chartType === test.ChartType.TreeMap) {
                            setTimeout(function () {
                                var treemapLayout = new hierarchical.TreeMapLayout(_this.getContext(), _this.layoutInfo.innerrect);
                                var rect = _this._currentRect;
                                _this._currentRect = new Rect(rect.left + rect.width / 4, rect.top + rect.height / 4, rect.right - rect.width / 4, rect.bottom - rect.height / 4);
                                treemapLayout.convert(_this._datamodel.root, _this._datamodel.encoding, _this._currentRect, _this._canvas);
                                // let shapeList =(treemapLayout.shapeList);
                                var shapeList = []; //(treemapLayout.shapeList);
                                for (var _i = 0, _a = treemapLayout.shapeList; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    if (Util.isMixed(item.layoutInfo.innerrect, _this.layoutInfo.innerrect)) {
                                        shapeList.push(item);
                                    }
                                }
                                console.log("after shapelist size  " + shapeList.length);
                                _this.removeAllViews();
                                for (var _b = 0, shapeList_2 = shapeList; _b < shapeList_2.length; _b++) {
                                    var shape = shapeList_2[_b];
                                    _this.addViewWithOutReLayout(shape);
                                    if (shape instanceof test.PlotShape && shape.label != null) {
                                        _this.addViewWithOutReLayout(shape.label);
                                    }
                                }
                                _this.__comparedAnimationCache.startCompare(shapeList);
                            }, 100);
                        }
                    }
                };
                HierarchicalPlot.prototype.addViewWithOutReLayout = function (view, index, layoutParams) {
                    if (view instanceof test.CubeShape) {
                        view.scaleCallBack = this.scaleCallBack.bind(this);
                    }
                    return _super.prototype.addViewWithOutReLayout.call(this, view, index, layoutParams);
                };
                // public onInterceptMouseEvent(event: MotionEvent): boolean {
                //     if(event.action === MotionEvent.ACTION_CLICK){
                //         return true;
                //     }
                //     return super.onInterceptMouseEvent(event);
                // }
                // public onMouseEvent(event: MotionEvent): boolean {
                //     // return false;
                //     if(this._datamodel.chartType == ChartType.TreeMap){
                //     }else{
                //         return true;
                //     }
                // }
                HierarchicalPlot.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                HierarchicalPlot.prototype.onLayout = function (l, t, r, b, canvas) {
                    var _this = this;
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                    if (this.islayoutChanged) {
                        this.removeAllViews();
                        var shapeList_3 = [];
                        this.__scalePairs = [];
                        this._layouts.length = 0;
                        if (this._datamodel.chartType == test.ChartType.Sunburst) {
                            var sunburstLayout = new hierarchical.SunburstLayout(this.getContext(), 0, Math.PI * 2, 0);
                            this._currentRect = new Rect(l, t, r, b);
                            sunburstLayout.convert(this._datamodel.root, this._datamodel.encoding, this._currentRect, canvas);
                            shapeList_3 = (sunburstLayout.shapeList);
                        }
                        else if (this._datamodel.chartType == test.ChartType.TreeMap) {
                            var treemapLayout = new hierarchical.TreeMapLayout(this.getContext(), this.layoutInfo.innerrect);
                            this._currentRect = new Rect(l, t, r, b);
                            treemapLayout.convert(this._datamodel.root, this._datamodel.encoding, this._currentRect, canvas);
                            // let rect: Rect = this.layoutInfo.innerrect;
                            // treemapLayout.convert(this._datamodel.root, this._datamodel.encoding, new Rect(rect.left - rect.width / 2, rect.top - rect.height / 2, rect.right + rect.width / 2, rect.bottom + rect.height / 2), this._canvas);
                            shapeList_3 = (treemapLayout.shapeList);
                            console.log("before shape list size " + shapeList_3.length);
                            if (this.__comparedAnimationCache != null) {
                                setTimeout(function () {
                                    _this.__comparedAnimationCache.startCompare(shapeList_3);
                                });
                            }
                        }
                        for (var _i = 0, shapeList_4 = shapeList_3; _i < shapeList_4.length; _i++) {
                            var shape = shapeList_4[_i];
                            this.addViewWithOutReLayout(shape);
                            if (shape instanceof test.PlotShape && shape.label != null) {
                                this.addViewWithOutReLayout(shape.label);
                            }
                        }
                    }
                };
                HierarchicalPlot.prototype.beginLoadingAnimation = function () {
                    var step = 500 / this.children.length;
                    var _loop_3 = function (i) {
                        var shape = this_3.children[i];
                        if (shape instanceof test.CubeShape) {
                            setTimeout(function () {
                                // console.log("index  " + i);
                                var animation = new test.CubeAnimation(null);
                                animation.duration = 500;
                                animation.from = 0.2;
                                animation.to = 1;
                                animation.fillAfter = false;
                                shape.startAnimation(animation);
                            }, step * i);
                        }
                        else if (shape instanceof test.SunburstShape) {
                            // console.log("index  " + i);
                            var animation = new test.SweepAnimation();
                            animation.duration = 1500;
                            animation.from = 0.2;
                            animation.to = 1;
                            animation.fillAfter = false;
                            shape.startAnimation(animation);
                        }
                    };
                    var this_3 = this;
                    for (var i = 0; i < this.children.length; ++i) {
                        _loop_3(i);
                    }
                };
                /**
                 * merage the scales which is  x / y
                 */
                HierarchicalPlot.prototype.__merageScale = function () {
                };
                HierarchicalPlot.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                };
                HierarchicalPlot.prototype.dispatchDraw = function (canvas) {
                    canvas.save();
                    canvas.clip(this.layoutInfo.innerrect);
                    _super.prototype.dispatchDraw.call(this, canvas);
                    canvas.restore();
                };
                Object.defineProperty(HierarchicalPlot.prototype, "layouts", {
                    get: function () {
                        return this._layouts;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(HierarchicalPlot.prototype, "scalePairs", {
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                return HierarchicalPlot;
            }(test.BasePlot));
            hierarchical.HierarchicalPlot = HierarchicalPlot;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            'use strict';
            var Size = android.graphics.Size;
            var LayoutParams = android.view.LayoutParams;
            var FrameLayout = android.widget.FrameLayout;
            // export const StartAngle:number = Math.PI;
            // import ScrollLayout = android.widget.ScrollLayout
            var HierarchicalChart = /** @class */ (function (_super) {
                __extends(HierarchicalChart, _super);
                function HierarchicalChart(context, option, chartType) {
                    var _this = _super.call(this, context) || this;
                    _this._option = option;
                    _this._chartType = chartType;
                    return _this;
                }
                Object.defineProperty(HierarchicalChart.prototype, "option", {
                    get: function () {
                        return this._option;
                    },
                    set: function (value) {
                        this._option = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(HierarchicalChart.prototype, "chartType", {
                    get: function () {
                        return this._chartType;
                    },
                    set: function (value) {
                        if (value != null && value != this._chartType) {
                            this._chartType = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(HierarchicalChart.prototype, "datamodel", {
                    get: function () {
                        return this._dataModel;
                    },
                    set: function (value) {
                        this._dataModel = value;
                        this._loadView();
                    },
                    enumerable: true,
                    configurable: true
                });
                HierarchicalChart.prototype._loadView = function () {
                    var plot = new hierarchical.HierarchicalPlot(this.getContext(), this.datamodel);
                    plot.layoutParams.width = LayoutParams.MATCH_PARENT;
                    plot.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._plot = plot;
                    this.addView(plot);
                };
                HierarchicalChart.prototype.beginLoadingAnimation = function () {
                    this.plot.beginLoadingAnimation();
                };
                HierarchicalChart.prototype.onMeasure = function (width, height, canvas) {
                    // return super.onMeasure(width,height,canvas);
                    var maxsize = new Size(0, 0);
                    var loff = 0, toff = 0, roff = 0, boff = 0;
                    for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                        var view_3 = _a[_i];
                        var size = new Size(0, 0);
                        if (view_3 instanceof test.BasePlot) {
                            view_3.layoutParams.margin.marginLeft = loff;
                            view_3.layoutParams.margin.marginRight = roff;
                            view_3.layoutParams.margin.marginTop = toff;
                            view_3.layoutParams.margin.marginBottom = boff;
                            size = view_3.onMeasure(width, height, canvas);
                        }
                        else {
                            size = view_3.onMeasure(width, height, canvas);
                        }
                        if (size.width > maxsize.width) {
                            maxsize.width = size.width;
                        }
                        if (size.height > maxsize.height) {
                            maxsize.height = size.height;
                        }
                    }
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                HierarchicalChart.prototype.onLayout = function (l, t, r, b, canvas) {
                    this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                    this.layoutItem(this.plot, l, t, r, b, canvas);
                };
                Object.defineProperty(HierarchicalChart.prototype, "plot", {
                    get: function () {
                        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                            var plot = _a[_i];
                            if (plot instanceof test.BasePlot) {
                                return plot;
                            }
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                HierarchicalChart.prototype.dispatchDraw = function (canvas) {
                    _super.prototype.dispatchDraw.call(this, canvas);
                };
                return HierarchicalChart;
            }(FrameLayout));
            hierarchical.HierarchicalChart = HierarchicalChart;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var hierarchical;
        (function (hierarchical) {
            var Padding = android.graphics.Padding;
            var Gravity = android.graphics.Gravity;
            var LayoutParams = android.view.LayoutParams;
            var RenderType = android.graphics.RenderType;
            var RootView = android.widget.RootView;
            var Util = android.graphics.Util;
            var ChartLayout = /** @class */ (function (_super) {
                __extends(ChartLayout, _super);
                function ChartLayout(context) {
                    var _this = _super.call(this, context) || this;
                    _this.clip = false;
                    var EventHandler = function (pt, types, info) {
                        console.log(" " + pt.toString() + ", type " + types + " , info " + info);
                    };
                    window['EventHandler'] = EventHandler;
                    return _this;
                }
                ChartLayout.prototype.attachElement = function (element, renderType, datamodel) {
                    _super.prototype.attachElement.call(this, element, Util.asEnum(renderType, RenderType));
                    this.padding = new Padding(20);
                    this._dataModel = datamodel;
                    this.setChart();
                };
                ChartLayout.prototype.beginLoadingAnimation = function () {
                    this._chart.beginLoadingAnimation();
                };
                ChartLayout.prototype.setChart = function () {
                    this.removeAllViews();
                    this._chart = new hierarchical.HierarchicalChart(this.getContext(), null, test.ChartType.Bar);
                    this._chart.layoutParams.width = LayoutParams.MATCH_PARENT;
                    this._chart.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._chart.datamodel = this._dataModel;
                    this._chart.gravity = Gravity.Center;
                    this.addView(this._chart, 0);
                };
                ChartLayout.prototype.dispatchDraw = function (canvas) {
                    _super.prototype.dispatchDraw.call(this, canvas);
                    var rect = this.layoutInfo.outterrect;
                    canvas.drawRect(rect.startPoint, rect.endPoint, false, this.background);
                };
                ChartLayout.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                ChartLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                };
                ChartLayout.prototype.addView = function (view, index) {
                    _super.prototype.addView.call(this, view, index);
                    return 0;
                };
                return ChartLayout;
            }(RootView));
            hierarchical.ChartLayout = ChartLayout;
        })(hierarchical = test.hierarchical || (test.hierarchical = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            // export const EQUATOR: number = 200;
            var PointList = /** @class */ (function () {
                function PointList() {
                    this.__xs = [];
                    this.__ys = [];
                    this.__ptlist = [];
                }
                PointList.prototype.push = function (point) {
                    this.__ptlist.push(point);
                    this.__xs.push(point.x);
                    this.__ys.push(point.y);
                };
                PointList.prototype.pop = function () {
                    this.__xs.pop();
                    this.__ys.pop();
                    return this.__ptlist.pop();
                };
                Object.defineProperty(PointList.prototype, "xs", {
                    get: function () {
                        return this.__xs;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PointList.prototype, "ys", {
                    get: function () {
                        return this.__ys;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PointList.prototype, "points", {
                    get: function () {
                        return this.__ptlist;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PointList;
            }());
            map.PointList = PointList;
            var Stream = /** @class */ (function () {
                function Stream() {
                    this._pointList = new PointList();
                }
                Stream.prototype.setProjection = function (projection) {
                    this._projection = projection;
                };
                Object.defineProperty(Stream.prototype, "result", {
                    // static lonLat2Mercator(lon: number, lat: number): Point {
                    //     let pt: Point = new Point();
                    //     let x: number = lon * EQUATOR / 180;
                    //     let y: number = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
                    //     y = y * EQUATOR / 180;
                    //     pt.x = x;
                    //     pt.y = y;
                    //     return pt;
                    // }
                    // static mercator2LonLat(x: number, y: number): { lon: number, lat: number } {
                    //     let mercatorPt: { lon: number, lat: number } = { lon: 0, lat: 0 };
                    //     let lon: number = x / EQUATOR * 180;
                    //     let lat: number = y / EQUATOR * 180;
                    //     lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180)) - Math.PI / 2);
                    //     mercatorPt.lon = lon;
                    //     mercatorPt.lat = lat;
                    //     return mercatorPt;
                    // }
                    get: function () {
                        return this._pointList;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Stream;
            }());
            map.Stream = Stream;
            var AreaStream = /** @class */ (function (_super) {
                __extends(AreaStream, _super);
                function AreaStream() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AreaStream.prototype.parseStream = function (coordinates) {
                    var startPt = null;
                    if (coordinates != null && coordinates instanceof Array) {
                        for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
                            var coordinate = coordinates_1[_i];
                            for (var _a = 0, coordinate_1 = coordinate; _a < coordinate_1.length; _a++) {
                                var cpt = coordinate_1[_a];
                                if (cpt instanceof Array && cpt.length === 2) {
                                    var pt = this._projection.lonLat2xy(cpt[0], cpt[1]);
                                    if (pt != null) {
                                        this._pointList.push(pt);
                                        if (startPt == null) {
                                            startPt = pt.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                return AreaStream;
            }(Stream));
            map.AreaStream = AreaStream;
            var LineStream = /** @class */ (function (_super) {
                __extends(LineStream, _super);
                function LineStream() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                LineStream.prototype.parseStream = function (coordinates) {
                    if (coordinates != null && coordinates instanceof Array) {
                        for (var _i = 0, coordinates_2 = coordinates; _i < coordinates_2.length; _i++) {
                            var cpt = coordinates_2[_i];
                            if (cpt instanceof Array && cpt.length === 2) {
                                var pt = this._projection.lonLat2xy(cpt[0], cpt[1]);
                                if (pt != null) {
                                    this._pointList.push(pt);
                                }
                            }
                        }
                    }
                };
                return LineStream;
            }(Stream));
            map.LineStream = LineStream;
            var PointStream = /** @class */ (function (_super) {
                __extends(PointStream, _super);
                function PointStream() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                PointStream.prototype.parseStream = function (coordinates) {
                    if (coordinates != null && coordinates instanceof Array) {
                        var pt = this._projection.lonLat2xy(coordinates[0], coordinates[1]);
                        if (pt != null) {
                            this._pointList.push(pt);
                        }
                    }
                };
                return PointStream;
            }(Stream));
            map.PointStream = PointStream;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var StreamFactory = /** @class */ (function () {
                function StreamFactory() {
                }
                StreamFactory.streamLine = function (coordinates, stream) { };
                StreamFactory.streamArea = function (coordinates, stream) { };
                return StreamFactory;
            }());
            map.StreamFactory = StreamFactory;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Util = android.graphics.Util;
            var GeoType;
            (function (GeoType) {
                GeoType[GeoType["Point"] = 0] = "Point";
                GeoType[GeoType["MultiPoint"] = 1] = "MultiPoint";
                GeoType[GeoType["LineString"] = 2] = "LineString";
                GeoType[GeoType["MultiLineString"] = 3] = "MultiLineString";
                GeoType[GeoType["Polygon"] = 4] = "Polygon";
                GeoType[GeoType["MultiPolygon"] = 5] = "MultiPolygon";
                GeoType[GeoType["GeometryCollection"] = 6] = "GeometryCollection";
                GeoType[GeoType["Feature"] = 7] = "Feature";
                GeoType[GeoType["FeatureCollection"] = 8] = "FeatureCollection";
            })(GeoType = map.GeoType || (map.GeoType = {}));
            var Feature = /** @class */ (function () {
                function Feature() {
                }
                Feature.prototype.parseFeature = function (feature) {
                    if (this.projection != null) {
                        this.properties = feature.properties;
                        var geometry = feature.geometry;
                        this.parseName(this.properties);
                        this.streams = [];
                        if (geometry != null) {
                            var geometry_type = Util.asEnum(geometry.type, GeoType, true);
                            var coordinates = geometry.coordinates;
                            switch (geometry_type) {
                                case GeoType.Point:
                                    this.streams.push(this._createPointStream(coordinates));
                                    break;
                                case GeoType.MultiPoint:
                                    this.streams = this.streams.concat(this._createMultiPointStream(coordinates));
                                    break;
                                case GeoType.LineString:
                                    this.streams.push(this._createLineStream(coordinates));
                                    break;
                                case GeoType.MultiLineString:
                                    this.streams = this.streams.concat(this._createMultiLineStream(coordinates));
                                    break;
                                case GeoType.Polygon:
                                    this.streams.push(this._createAreaStream(coordinates));
                                    break;
                                case GeoType.MultiPolygon:
                                    this.streams = this.streams.concat(this._createMultiAreaStream(coordinates));
                                    break;
                            }
                        }
                    }
                };
                Feature.prototype.parseName = function (prop) {
                    if (prop != null) {
                        this.name = prop.name;
                        if (this.name == null) {
                            this.name = prop.NAME;
                        }
                    }
                };
                Feature.prototype._createPointStream = function (coordinates) {
                    var pointStream = new map.PointStream();
                    pointStream.setProjection(this.projection);
                    pointStream.parseStream(coordinates);
                    return pointStream;
                };
                Feature.prototype._createLineStream = function (coordinates) {
                    var lineStream = new map.LineStream();
                    lineStream.setProjection(this.projection);
                    lineStream.parseStream(coordinates);
                    return lineStream;
                };
                Feature.prototype._createAreaStream = function (coordinates) {
                    var areaStream = new map.AreaStream();
                    areaStream.setProjection(this.projection);
                    areaStream.parseStream(coordinates);
                    return areaStream;
                };
                Feature.prototype._createMultiPointStream = function (coordinates) {
                    var list = [];
                    if (coordinates != null && coordinates instanceof Array) {
                        for (var _i = 0, coordinates_3 = coordinates; _i < coordinates_3.length; _i++) {
                            var coorpt = coordinates_3[_i];
                            list.push(this._createPointStream(coorpt));
                        }
                    }
                    return list;
                };
                Feature.prototype._createMultiLineStream = function (coordinates) {
                    var list = [];
                    if (coordinates != null && coordinates instanceof Array) {
                        for (var _i = 0, coordinates_4 = coordinates; _i < coordinates_4.length; _i++) {
                            var coorpt = coordinates_4[_i];
                            list.push(this._createLineStream(coorpt));
                        }
                    }
                    return list;
                };
                Feature.prototype._createMultiAreaStream = function (coordinates) {
                    var list = [];
                    if (coordinates != null && coordinates instanceof Array) {
                        for (var _i = 0, coordinates_5 = coordinates; _i < coordinates_5.length; _i++) {
                            var coorpt = coordinates_5[_i];
                            list.push(this._createAreaStream(coorpt));
                        }
                    }
                    return list;
                };
                return Feature;
            }());
            map.Feature = Feature;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var ParseFactory = /** @class */ (function () {
                function ParseFactory() {
                }
                return ParseFactory;
            }());
            map.ParseFactory = ParseFactory;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Projection = /** @class */ (function () {
                function Projection() {
                }
                return Projection;
            }());
            map.Projection = Projection;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Point = android.graphics.Point;
            map.EARTH_RADIUS = 6378137;
            map.EQUATOR = map.EARTH_RADIUS * 2 * Math.PI; // 赤道,在这里假设地球是一个正球
            var MercatorProjection = /** @class */ (function (_super) {
                __extends(MercatorProjection, _super);
                function MercatorProjection() {
                    var _this = _super.call(this) || this;
                    _this.__centerlon = 0;
                    _this.__centerlat = 0;
                    _this.__xoffset = 0;
                    _this.__yoffset = 0;
                    _this._scale = 1;
                    if (_this.__circumference == null) {
                        _this.__circumference = 1000;
                    }
                    _this._scale = 1;
                    return _this;
                }
                MercatorProjection.prototype.begin = function () {
                    this._max = 0;
                    this._min = 0;
                    this._maxy = 0;
                    this._miny = 0;
                    var minPt = this.lonLat2xy(-180, -90);
                    var maxPt = this.lonLat2xy(180, 90);
                };
                MercatorProjection.prototype.end = function () {
                    this._max = 0;
                    this._min = 0;
                    this._maxy = 0;
                    this._miny = 0;
                };
                Object.defineProperty(MercatorProjection.prototype, "maxx", {
                    get: function () {
                        return this._max;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MercatorProjection.prototype, "minx", {
                    get: function () {
                        return this._min;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MercatorProjection.prototype, "maxy", {
                    get: function () {
                        return this._max;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MercatorProjection.prototype, "miny", {
                    get: function () {
                        return this._min;
                    },
                    enumerable: true,
                    configurable: true
                });
                MercatorProjection.prototype.scale = function (rate) {
                    this._scale = rate;
                };
                MercatorProjection.prototype.rotate = function (lambda, phi, gamma) {
                    this.__lambda = lambda;
                    this.__phi = phi;
                    this.__gamma = gamma;
                };
                MercatorProjection.prototype.translate = function (xoffset, yoffset) {
                    if (xoffset != null && !isNaN(xoffset)) {
                        this.__xoffset += xoffset;
                    }
                    if (yoffset != null && !isNaN(yoffset)) {
                        this.__yoffset += yoffset;
                    }
                };
                MercatorProjection.prototype.center = function (lon, lat) {
                    this.__centerlon = lon;
                    this.__centerlat = lat;
                };
                MercatorProjection.prototype.xy2LonLat = function (x, y) {
                    var circumference = this.__circumference * this._scale;
                    var mercatorPt = { lon: 0, lat: 0 };
                    var lon = x / circumference * 180;
                    var lat = y / circumference * 180;
                    lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180)) - Math.PI / 2);
                    mercatorPt.lon = lon;
                    mercatorPt.lat = lat;
                    return mercatorPt;
                };
                MercatorProjection.prototype.lonLat2xy = function (lon, lat) {
                    var circumference = this.__circumference * this._scale;
                    lon = lon - this.__centerlon;
                    lat = lat - this.__centerlat;
                    var lambda = (this.__lambda == null || isNaN(this.__lambda)) ? 0 : this.__lambda;
                    var phi = (this.__phi == null || isNaN(this.__phi)) ? 0 : this.__phi;
                    var gamma = (this.__gamma == null || isNaN(this.__gamma)) ? 0 : this.__gamma;
                    lon = lambda + lon;
                    lat = phi + lat;
                    if (Math.abs(lat) > MercatorProjection.MAX_LAT) {
                        return;
                    }
                    var x = lon * circumference / 180;
                    var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
                    y = y * circumference / 180;
                    if (gamma > 0) {
                        var a = x == 0 ? 0 : Math.atan(y / x);
                        var newa = a + gamma * Math.PI / 180;
                        var radius = Math.sqrt(x * x + y * y);
                        x = Math.cos(newa) * radius;
                        y = Math.sin(newa) * radius;
                    }
                    var pt = new Point(x, y);
                    pt.offset(this.__xoffset, this.__yoffset);
                    pt.offset(0, -circumference / 2);
                    pt.y = -pt.y;
                    return pt;
                };
                MercatorProjection.prototype.refresh = function () {
                };
                MercatorProjection.MAX_LAT = 85.05112877980659;
                return MercatorProjection;
            }(map.Projection));
            map.MercatorProjection = MercatorProjection;
            // export class OrthographicProjection extends Projection {
            //     private __centerlon: number;
            //     private __centerlat: number;
            //     private __xoffset: number;
            //     private __yoffset: number;
            //     private __lambda: number;
            //     private __phi: number;
            //     private __gamma: number;
            //     rotate(lambda: number, phi: number, gamma: number): void {
            //         this.__lambda = lambda;
            //         this.__phi = phi;
            //         this.__gamma = gamma;
            //     }
            //     translate(xoffset: number, yoffset): void {
            //         this.__xoffset = xoffset;
            //         this.__yoffset = yoffset;
            //     }
            //     center(lon: number, lat: number): void {
            //         this.__centerlon = lon;
            //         this.__centerlat = lat;
            //     }
            //     xy2LonLat(x: number, y: number): { lon: number, lat: number } {
            //         let mercatorPt: { lon: number, lat: number } = { lon: 0, lat: 0 };
            //         let lon: number = x / EQUATOR * 180;
            //         let lat: number = y / EQUATOR * 180;
            //         lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180)) - Math.PI / 2);
            //         mercatorPt.lon = lon;
            //         mercatorPt.lat = lat;
            //         return mercatorPt;
            //     }
            //     lonLat2xy(lon: number, lat: number): Point {
            //         let lambda: number = (this.__lambda == null || isNaN(this.__lambda)) ? 0 : this.__lambda;
            //         let phi: number = (this.__phi == null || isNaN(this.__phi)) ? 0 : this.__phi;
            //         let gamma: number = (this.__gamma == null || isNaN(this.__gamma)) ? 0 : this.__gamma;
            //         if (gamma > 0) {
            //             let a: number = Math.atan(lat / lon);
            //             let newa: number = a + gamma * Math.PI / 180;
            //             let radius = Math.sqrt(lat * lat + lon * lon);
            //             lon = Math.cos(newa) * radius;
            //             lat = Math.sin(newa) * radius;
            //         }
            //         lon = lambda + lon;
            //         lat = phi + lat;
            //         let x: number = lon * EQUATOR / 180;
            //         let y: number = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
            //         y = y * EQUATOR / 180;
            //         return new Point(x, y);
            //     }
            //     refresh(): void {
            //     }
            // }
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var ProjectionFactory = /** @class */ (function () {
                function ProjectionFactory() {
                }
                ProjectionFactory.create = function (name) {
                    if (name === void 0) { name = null; }
                    if (name == null) {
                    }
                    return null;
                };
                return ProjectionFactory;
            }());
            map.ProjectionFactory = ProjectionFactory;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Util = android.graphics.Util;
            var Series = android.test.cartesian.Series;
            var Filter = android.test.cartesian.Filter;
            var Encoding = android.test.cartesian.Encoding;
            var Point = android.graphics.Point;
            var DataModel = /** @class */ (function () {
                function DataModel(data) {
                    this.__chartTypes = [];
                    DataModel.id = 0;
                    this.__data = data;
                    this.projection = new map.MercatorProjection();
                    if (data.config != null) {
                        this.__config = new test.GeoConfig(data.config);
                        if (this.__config.center != null) {
                            this.projection.center(this.__config.center.x, this.__config.center.y);
                        }
                        if (this.__config.translate != null) {
                            this.projection.translate(this.__config.translate.x, this.__config.translate.y);
                        }
                        if (this.__config.scale != null) {
                            this.projection.scale(this.__config.scale);
                        }
                    }
                    this.__encoding = this._analyseEncoding(this.__data.encoding);
                    this._analyseFilter(data.filter);
                    this.refresh();
                }
                Object.defineProperty(DataModel.prototype, "config", {
                    get: function () {
                        return this.__config;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.prototype._analyseEncoding = function (encode) {
                    return new Encoding(encode);
                };
                DataModel.prototype.refresh = function () {
                    DataModel.id = 0;
                    this.__analyseGeoData(this.__data.geo);
                    this._analyseSeries(this.__data.series, this.__encoding);
                    this._createLayoutScales(this.__encoding);
                };
                Object.defineProperty(DataModel.prototype, "chartTypes", {
                    get: function () {
                        return this.__chartTypes;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.prototype._analyseSeries = function (series_data, encoding) {
                    this.__series = [];
                    this.__allSeries = [];
                    for (var i = 0; i < series_data.length; ++i) {
                        var seriesitem = series_data[i];
                        var ser = new Series(encoding, seriesitem, i, null);
                        if (this.__filter != null && this.__filter.series.indexOf(seriesitem.name) > -1) {
                            ser.enable = true;
                            this.__series.push(ser);
                            if (this.__chartTypes.indexOf(ser.chartType) < 0) {
                                this.__chartTypes.push(ser.chartType);
                            }
                        }
                        else {
                            ser.enable = false;
                        }
                        this.__allSeries.push(ser);
                    }
                };
                DataModel.prototype._analyseFilter = function (filter) {
                    if (filter != null && filter.series != null && filter.rules != null) {
                        this.__filter = new Filter(filter.series, filter.rules);
                    }
                };
                DataModel.prototype.__analyseGeoData = function (geodata) {
                    this.projection.begin();
                    var type = Util.asEnum(geodata.type, map.GeoType, true);
                    this.featureList = [];
                    if (type == map.GeoType.FeatureCollection) {
                        var features = geodata.features;
                        if (features != null && features instanceof Array) {
                            for (var _i = 0, features_1 = features; _i < features_1.length; _i++) {
                                var feature = features_1[_i];
                                var f = new map.Feature();
                                f.id = (++DataModel.id).toFixed();
                                if (this.projection != null) {
                                    f.projection = this.projection;
                                }
                                f.parseFeature(feature);
                                this.featureList.push(f);
                            }
                        }
                    }
                    this.projection.end();
                };
                DataModel.prototype._createLayoutScales = function (encoding) {
                    var _this = this;
                    this.__scalePairs = [];
                    if (this.__series.length > 1) {
                        for (var i = 0; i < this.__series.length - 1; ++i) {
                            var series = this.__series[i];
                            var next_series = this.__series[i + 1];
                            for (var _i = 0, _a = series.scalePairs; _i < _a.length; _i++) {
                                var pairA = _a[_i];
                                for (var _b = 0, _c = next_series.scalePairs; _b < _c.length; _b++) {
                                    var pairB = _c[_b];
                                    if (pairA.filed.equals(pairB.filed)) {
                                        var filed = pairA.filed;
                                        var force = true;
                                        var infoA = this.__getScaleInfobyname(pairA.filed.name, series.name);
                                        var infoB = this.__getScaleInfobyname(pairB.filed.name, next_series.name);
                                        if (infoA == null && infoB == null) {
                                            var scale = test.Utility.mergeScale(pairA.scale, pairB.scale, force);
                                            if (scale != null) {
                                                this.__scalePairs.push({ series: [series.name, next_series.name], filed: filed, scale: scale });
                                            }
                                            else {
                                                this.__scalePairs.push({ series: [series.name], filed: pairA.filed, scale: pairA.scale });
                                                this.__scalePairs.push({ series: [next_series.name], filed: pairB.filed, scale: pairB.scale });
                                            }
                                        }
                                        else if (infoA == null && infoB != null) {
                                            var scale = test.Utility.mergeScale(pairA.scale, infoB.scale, force);
                                            if (scale != null) {
                                                infoB.scale = scale;
                                                infoB.series.push(series.name);
                                            }
                                        }
                                        else if (infoA != null && infoB == null) {
                                            var scale = test.Utility.mergeScale(pairB.scale, infoA.scale, force);
                                            if (scale != null) {
                                                infoA.scale = scale;
                                                infoA.series.push(next_series.name);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        for (var _d = 0, _e = this.__series; _d < _e.length; _d++) {
                            var ser = _e[_d];
                            for (var _f = 0, _g = ser.scalePairs; _f < _g.length; _f++) {
                                var pair = _g[_f];
                                var scale = this._getScaleByName(pair.filed.name, ser.name);
                                if (scale != null) {
                                    pair.scale = scale;
                                }
                            }
                        }
                    }
                    else if (this.__series.length == 1) {
                        for (var _h = 0, _j = this.__series[0].scalePairs; _h < _j.length; _h++) {
                            var pair = _j[_h];
                            this.__scalePairs.push({ series: [this.__series[0].name], filed: pair.filed, scale: pair.scale.clone() });
                        }
                    }
                    // this.nameScale.ranges
                    var namescale = this.nameScale;
                    if (namescale != null && namescale.domains != null) {
                        namescale.domains.map(function (pt) {
                            if (pt instanceof Point) {
                                return _this.projection.lonLat2xy(pt.x, pt.y);
                            }
                            else {
                                return pt;
                            }
                        });
                    }
                };
                Object.defineProperty(DataModel.prototype, "nameScale", {
                    get: function () {
                        var scale = _.result(_.find(this.__scalePairs, function (item) {
                            return 'geoposition' == item.filed.name;
                        }), "scale");
                        if (scale instanceof map.MapOrdinalScale) {
                            return scale;
                        }
                        else {
                            return null;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.prototype.__getScaleInfobyname = function (filedname, seriesname) {
                    var info = _.find(this.__scalePairs, function (item) {
                        return item.series.indexOf(seriesname) >= 0 && filedname == item.filed.name;
                    });
                    return info;
                };
                DataModel.prototype._getScaleByName = function (filedname, seriesname) {
                    return _.result(_.find(this.__scalePairs, function (item) {
                        return item.series.indexOf(seriesname) >= 0 && filedname == item.filed.name;
                    }), "scale");
                };
                DataModel.prototype.getSeriesByType = function (charttype) {
                    var series = _.filter(this.__series, function (ser) { return ser.chartType === charttype; });
                    return series;
                };
                Object.defineProperty(DataModel.prototype, "series", {
                    get: function () {
                        return this.__series;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "allSeries", {
                    get: function () {
                        return this.__allSeries;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "encoding", {
                    get: function () {
                        return this.__encoding;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "filter", {
                    get: function () {
                        return this.__filter;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DataModel.prototype, "scalePairs", {
                    get: function () {
                        return this.__scalePairs;
                    },
                    enumerable: true,
                    configurable: true
                });
                DataModel.id = 0;
                return DataModel;
            }());
            map.DataModel = DataModel;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            var relation;
            (function (relation) {
                'use strict';
                var Field = android.test.cartesian.Field;
                var Encoding = /** @class */ (function () {
                    function Encoding(encoding) {
                        // if (encoding.start&& encoding.start.field != null) {
                        //     if (encoding.start.field.includes(',')) {
                        //         this.start = [];
                        //         let start: any[] = encoding.start.split(',');
                        //         for (let i = 0; i < start.length; ++i) {
                        //             this.start.push(new Field(start[i], 'start', i));
                        //         }
                        //     } else {
                        //         this.start = new Field(encoding.start, "start");
                        //     }
                        // }
                        // if (encoding.end && encoding.end.field != null) {
                        //     if (encoding.end.field.includes(',')) {
                        //         this.end = [];
                        //         let end: any[] = encoding.end.split(',');
                        //         for (let i:number = 0; i < end.length; ++i) {
                        //             this.end.push(new Field(end[i], 'start',i));
                        //         }
                        //     } else {
                        //         this.end = new Field(encoding.shape, 'end');
                        //     }
                        // }
                        if (encoding.color) {
                            this.color = new Field(encoding.color, 'color');
                        }
                        if (encoding.tooltip) {
                            this.tooltip = new Field(encoding.tooltip, 'tooltip');
                        }
                        if (encoding.text) {
                            this.text = new Field(encoding.text, 'text');
                        }
                        if (encoding.values && encoding.values instanceof Array) {
                            this.values = [];
                            for (var i = 0; i < encoding.values.length; ++i) {
                                var value = encoding.values[i];
                                this.values.push(new Field(value, value.name));
                            }
                        }
                    }
                    return Encoding;
                }());
                relation.Encoding = Encoding;
            })(relation = map.relation || (map.relation = {}));
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            var relation;
            (function (relation) {
                'use strict';
                var Util = android.graphics.Util;
                var Encoding = android.test.map.relation.Encoding;
                var Item = /** @class */ (function () {
                    function Item() {
                    }
                    return Item;
                }());
                relation.Item = Item;
                var DataModel = /** @class */ (function () {
                    function DataModel(data) {
                        this.__chartTypes = [];
                        this._points = [];
                        DataModel.id = 0;
                        this.__data = data;
                        this.projection = new map.MercatorProjection();
                        if (data.config != null) {
                            this.__config = new test.GeoConfig(data.config);
                            if (this.__config.center != null) {
                                this.projection.center(this.__config.center.x, this.__config.center.y);
                            }
                            if (this.__config.translate != null) {
                                this.projection.translate(this.__config.translate.x, this.__config.translate.y);
                            }
                            if (this.__config.scale != null) {
                                this.projection.scale(this.__config.scale);
                            }
                        }
                        this.__encoding = this._analyseEncoding(this.__data.encoding);
                        this.refresh();
                    }
                    Object.defineProperty(DataModel.prototype, "points", {
                        get: function () {
                            return this._points;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(DataModel.prototype, "config", {
                        get: function () {
                            return this.__config;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DataModel.prototype._analysePathValue = function (data_arr) {
                        for (var _i = 0, data_arr_1 = data_arr; _i < data_arr_1.length; _i++) {
                            var point = data_arr_1[_i];
                            var item = new Item();
                            // for(let key in this.__encoding){
                            //     item[key]
                            // }
                            item.start = this.projection.lonLat2xy(point.start.longitude, point.start.latitude);
                            item.end = this.projection.lonLat2xy(point.end.longitude, point.end.latitude);
                            item.value = point;
                            this._points.push(item);
                        }
                    };
                    DataModel.prototype._analyseEncoding = function (encode) {
                        return new Encoding(encode);
                    };
                    DataModel.prototype.refresh = function () {
                        DataModel.id = 0;
                        this.projection.begin();
                        this.__analyseGeoData(this.__data.geo);
                        this._analysePathValue(this.__data.values);
                        this.projection.end();
                    };
                    Object.defineProperty(DataModel.prototype, "chartTypes", {
                        get: function () {
                            return this.__chartTypes;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DataModel.prototype.__analyseGeoData = function (geodata) {
                        var type = Util.asEnum(geodata.type, map.GeoType, true);
                        this.featureList = [];
                        if (type == map.GeoType.FeatureCollection) {
                            var features = geodata.features;
                            if (features != null && features instanceof Array) {
                                for (var _i = 0, features_2 = features; _i < features_2.length; _i++) {
                                    var feature = features_2[_i];
                                    var f = new map.Feature();
                                    f.id = (++DataModel.id).toFixed();
                                    if (this.projection != null) {
                                        f.projection = this.projection;
                                    }
                                    f.parseFeature(feature);
                                    this.featureList.push(f);
                                }
                            }
                        }
                    };
                    Object.defineProperty(DataModel.prototype, "encoding", {
                        get: function () {
                            return this.__encoding;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(DataModel.prototype, "scalePairs", {
                        get: function () {
                            return this.__scalePairs;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    DataModel.id = 0;
                    return DataModel;
                }());
                relation.DataModel = DataModel;
            })(relation = map.relation || (map.relation = {}));
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var FlightParser = /** @class */ (function () {
                function FlightParser(originaldata) {
                    this.__airportsFields = _.cloneDeep(originaldata.airportsFields);
                    this.__airlinesFields = _.cloneDeep(originaldata.airlineFields);
                    this.__airports = _.cloneDeep(originaldata.airports);
                    this.__airlines = _.cloneDeep(originaldata.airlines);
                    this.__routes = _.cloneDeep(originaldata.routes);
                    this._analyse();
                }
                Object.defineProperty(FlightParser.prototype, "data", {
                    get: function () {
                        return this.__data;
                    },
                    enumerable: true,
                    configurable: true
                });
                FlightParser.prototype._analyse = function () {
                    var _this = this;
                    var airlines = this.__airlines.map(function (item) {
                        var result = {};
                        for (var i = 0; i < item.length; ++i) {
                            result[_this.__airlinesFields[i]] = item[i];
                        }
                        return result;
                    });
                    var airports = this.__airports.map(function (item) {
                        var result = {};
                        for (var i = 0; i < item.length; ++i) {
                            result[_this.__airportsFields[i]] = item[i];
                        }
                        return result;
                    });
                    this.__data = this.__routes.map(function (item) {
                        var result = { start: {}, end: {} };
                        var line = airlines[item[0]];
                        var port1 = airports[item[1]];
                        var port2 = airports[item[2]];
                        for (var key in line) {
                            result['start'][key] = line[key];
                            result['end'][key] = line[key];
                        }
                        for (var key in port1) {
                            result['start'][key] = port1[key];
                        }
                        for (var key in port2) {
                            result['end'][key] = port2[key];
                        }
                        return result;
                    });
                };
                return FlightParser;
            }());
            map.FlightParser = FlightParser;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Default = android.device.Default;
            var MotionEvent = android.view.event.MotionEvent;
            var Point = android.graphics.Point;
            var Rect = android.graphics.Rect;
            var GeoPlot = /** @class */ (function (_super) {
                __extends(GeoPlot, _super);
                function GeoPlot(context) {
                    var _this = _super.call(this, context) || this;
                    _this._layouts = [];
                    _this.__shapeList = [];
                    _this._ofx = 0;
                    _this._ofy = 0;
                    _this._style = Default.style;
                    _this._style.background = '#333';
                    return _this;
                }
                Object.defineProperty(GeoPlot.prototype, "datamodel", {
                    get: function () {
                        return this._dataModel;
                    },
                    set: function (value) {
                        this._dataModel = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                GeoPlot.prototype.onMouseEvent = function (event) {
                    // if(event.action == MotionEvent.ACTION_MOUSE_MOVE){
                    //     return true;
                    // }
                    switch (event.action) {
                        case MotionEvent.ACTION_MOUSE_DOWN:
                            this._startPt = new Point(event.x, event.y);
                            return true;
                        case MotionEvent.ACTION_MOUSE_UP:
                        case MotionEvent.ACTION_CANCEL:
                        case MotionEvent.ACTION_MOUSE_OUT:
                            this._startPt = null;
                            return true;
                        case MotionEvent.ACTION_MOUSE_MOVE:
                            if (this._startPt != null) {
                                var ofx = event.x - this._startPt.x; // - this.datamodel.config.translate.x;
                                var ofy = this._startPt.y - event.y; // - this.datamodel.config.translate.y;
                                this._startPt.x = event.x;
                                this._startPt.y = event.y;
                                // this._ofx += ofx;
                                // this._ofy -= ofy;
                                if (this.datamodel.projection == null) {
                                    this.datamodel.projection = new map.MercatorProjection();
                                }
                                console.log("ofx " + ofx + " , ofy " + ofy);
                                this.datamodel.projection.translate(ofx, ofy);
                                this.datamodel.refresh();
                                // this.offset(this._ofx,this._ofy);
                                // this.cleanAnimation();
                                this.requestLayout();
                                // this.invalidate(false);
                                return true;
                            }
                    }
                    return false;
                };
                GeoPlot.prototype.onInterceptMouseEvent = function (event) {
                    return true;
                };
                GeoPlot.prototype.beginLoadingAnimation = function () {
                    var step = 500 / this.children.length;
                    var _loop_4 = function (i) {
                        var view_4 = this_4.children[i];
                        var animation = new test.FlightAnimationTo();
                        animation.duration = Math.random() * 1000 + 1500;
                        animation.from = 0;
                        animation.to = 1;
                        animation.repeate = true;
                        setTimeout(function () {
                            if (view_4 instanceof test.FlightShape) {
                                view_4.startAnimation(animation);
                            }
                        }, step * i);
                    };
                    var this_4 = this;
                    for (var i = 0; i < this.children.length; ++i) {
                        _loop_4(i);
                    }
                };
                // onMeasure(width: MeasureSpec, height: MeasureSpec, canvas: Canvas): Size {
                //     let w: number = width.getMeasureValue();
                //     let h: number = height.getMeasureValue();
                //     let radius: number = w < h ? w : h;
                //     return super.onMeasure(new MeasureSpec(radius, width.mode), new MeasureSpec(radius, height.mode), canvas);
                // }
                GeoPlot.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                    if (this.islayoutChanged) {
                        this.removeAllViews();
                        this.__shapeList = [];
                        this._layouts = [];
                        var geolayout = new map.GeoLayout(this.getContext());
                        geolayout.convert(this._dataModel.featureList, new Rect(l, t, r, b), canvas);
                        this.__shapeList = this.__shapeList.concat(geolayout.shapeList);
                        var namescale = null;
                        if (this.datamodel instanceof map.DataModel) {
                            namescale = this.datamodel.nameScale;
                        }
                        if (namescale == null) {
                            namescale = geolayout.nameScale;
                        }
                        if (this._dataModel instanceof map.DataModel) {
                            for (var _i = 0, _a = this._dataModel.chartTypes; _i < _a.length; _i++) {
                                var type = _a[_i];
                                switch (type) {
                                    case test.ChartType.Scatter:
                                        var scatterLayout = new map.MapScatterLayout(this.getContext());
                                        scatterLayout.convert(this._dataModel.getSeriesByType(test.ChartType.Scatter), this._dataModel.projection, namescale, this._dataModel.encoding, new Rect(l, t, r, b), canvas);
                                        this.__shapeList = this.__shapeList.concat(scatterLayout.shapeList);
                                        this._layouts.push(scatterLayout);
                                        break;
                                }
                            }
                        }
                        else if (this._dataModel instanceof map.relation.DataModel) {
                            var relationlayout = new map.relation.MapRelationLayout(this.getContext());
                            relationlayout.convert(this._dataModel.points, new Rect(l, t, r, b), canvas);
                            this.__shapeList = this.__shapeList.concat(relationlayout.shapeList);
                            this._layouts.push(relationlayout);
                        }
                        for (var _b = 0, _c = this.__shapeList; _b < _c.length; _b++) {
                            var shape = _c[_b];
                            this.addViewWithOutReLayout(shape);
                            if (shape instanceof test.PlotShape && shape.label != null) {
                                this.addViewWithOutReLayout(shape.label);
                            }
                        }
                    }
                };
                GeoPlot.prototype.onDraw = function (canvas) {
                    _super.prototype.onDraw.call(this, canvas);
                };
                return GeoPlot;
            }(test.BasePlot));
            map.GeoPlot = GeoPlot;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            var Padding = android.graphics.Padding;
            var Gravity = android.graphics.Gravity;
            var LayoutParams = android.view.LayoutParams;
            var RenderType = android.graphics.RenderType;
            var RootView = android.widget.RootView;
            var Util = android.graphics.Util;
            var ChartLayout = /** @class */ (function (_super) {
                __extends(ChartLayout, _super);
                function ChartLayout(context) {
                    var _this = _super.call(this, context) || this;
                    _this.clip = false;
                    var EventHandler = function (pt, types, info) {
                        console.log(" " + pt.toString() + ", type " + types + " , info " + info);
                    };
                    window['EventHandler'] = EventHandler;
                    _this.background.background = "#333";
                    return _this;
                }
                ChartLayout.prototype.attachElement = function (element, renderType, datamodel) {
                    _super.prototype.attachElement.call(this, element, Util.asEnum(renderType, RenderType));
                    this.padding = new Padding(20);
                    this._dataModel = datamodel;
                    this.setChart();
                };
                ChartLayout.prototype.beginLoadingAnimation = function () {
                    this._chart.beginLoadingAnimation();
                };
                ChartLayout.prototype.setChart = function () {
                    this.removeAllViews();
                    this._chart = new map.GeoPlot(this.getContext());
                    this._chart.layoutParams.width = LayoutParams.MATCH_PARENT;
                    this._chart.layoutParams.height = LayoutParams.MATCH_PARENT;
                    this._chart.datamodel = this._dataModel;
                    this._chart.gravity = Gravity.Center;
                    this.addView(this._chart, 0);
                };
                ChartLayout.prototype.dispatchDraw = function (canvas) {
                    var rect = this.layoutInfo.outterrect;
                    canvas.drawRect(rect.startPoint, rect.endPoint, true, this.background);
                    _super.prototype.dispatchDraw.call(this, canvas);
                };
                ChartLayout.prototype.onMeasure = function (width, height, canvas) {
                    return _super.prototype.onMeasure.call(this, width, height, canvas);
                };
                ChartLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                    _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                };
                ChartLayout.prototype.addView = function (view, index) {
                    _super.prototype.addView.call(this, view, index);
                    return 0;
                };
                return ChartLayout;
            }(RootView));
            map.ChartLayout = ChartLayout;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../node_modules/@types/lodash/index.d.ts" />
/// <reference path="../node_modules/@types/mathjs/index.d.ts" />
//// / <reference path="../typings/index.d.ts" />
/// <reference path="../dst/android.d.ts" />
/// <reference path="./config/ViewConfig.ts" />
/// <reference path="./config/cartesian/Config.ts" />
/// <reference path="./message/MessageKey.ts" />
/// <reference path="./message/MessageCenter.ts" />
/// <reference path="./util/Utility.ts" />
/// <reference path="./util/ColorUtils.ts" />
/// <reference path="./util/RotatedRect.ts" />
/// <reference path="./model/enum/AnimationType.ts" />
/// <reference path="./model/enum/Agg.ts" />
/// <reference path="./model/enum/Order.ts" />
/// <reference path="./model/enum/ScaleType.ts" />
/// <reference path="./model/enum/DataType.ts" />
/// <reference path="./model/enum/ChartType.ts" />
/// <reference path="./model/enum/AxisType.ts" />
/// <reference path="./model/cartesian/Value.ts" />
/// <reference path="./model/cartesian/Field.ts" />
/// <reference path="./model/cartesian/Filter.ts" />
/// <reference path="./model/cartesian/Encoding.ts" />
/// <reference path="./model/cartesian/Item.ts" />
/// <reference path="./model/cartesian/TransForm.ts" />
/// <reference path="./model/cartesian/Series.ts" />
/// <reference path="./model/cartesian/DataModel.ts" />
/// <reference path="./model/hierarchical/Value.ts" />
/// <reference path="./model/hierarchical/Field.ts" />
/// <reference path="./model/hierarchical/Item.ts" />
/// <reference path="./model/hierarchical/Encoding.ts" />
/// <reference path="./model/hierarchical/DataModel.ts" />
/// <reference path="./scale/IScale.ts" />
/// <reference path="./scale/Scale.ts" />
/// <reference path="./scale/LinearScale.ts" />
/// <reference path="./scale/OrdinalScale.ts" />
/// <reference path="./scale/LogScale.ts" />
/// <reference path="./scale/ColorScale.ts" />
/// <reference path="./view/ElementType.ts" />
/// <reference path="./view/legend/LegendType.ts" />
/// <reference path="./view/legend/ILegend.ts" />
/// <reference path="./view/legend/LinearScaleLegend.ts" />
/// <reference path="./view/legend/OrdinalScaleLegend.ts" />
/// <reference path="./view/legend/SeriesLegend.ts" />
/// <reference path="./view/shape/Shape.ts" />
/// <reference path="./view/shape/Lable.ts" />
/// <reference path="./view/shape/PlotShape.ts" />
/// <reference path="./view/shape/BarShape.ts" />
/// <reference path="./view/shape/CubeShape.ts" />
/// <reference path="./view/shape/RadialBarShape.ts" />
/// <reference path="./view/shape/SunburstShape.ts" />
/// <reference path="./view/shape/ScatterShape.ts" />
/// <reference path="./view/shape/LinesShape.ts" />
/// <reference path="./view/shape/AreaShape.ts" />
/// <reference path="./view/shape/AxisLineShape.ts" />
/// <reference path="./view/layout/BaseLayout.ts" />
/// <reference path="./view/layout/cartesian/CartesianBaseLayout.ts" />
/// <reference path="./view/layout/cartesian/CartesianLayout.ts" />
/// <reference path="./view/layout/cartesian/BarLayout.ts" />
/// <reference path="./view/layout/cartesian/ScatterLayout.ts" />
/// <reference path="./view/layout/cartesian/RadialCartesianLayout.ts" />
/// <reference path="./view/layout/cartesian/RadialBarLayout.ts" />
/// <reference path="./view/layout/cartesian/RadialLineLayout.ts" />
/// <reference path="./view/layout/cartesian/RadialAreaLayout.ts" />
/// <reference path="./view/layout/cartesian/RadialScatterLayout.ts" />
/// <reference path="./view/layout/cartesian/LineLayout.ts" />
/// <reference path="./view/layout/cartesian/AreaLayout.ts" />
/// <reference path="./view/layout/hierarchical/HierarchicalLayout.ts" />
/// <reference path="./view/layout/hierarchical/SunburstLayout.ts" />
/// <reference path="./view/layout/hierarchical/TreeMapLayout.ts" />
/// <reference path="./view/axis/ticks/Ticks.ts" />
/// <reference path="./view/axis/ticks/LinearTicks.ts" />
/// <reference path="./view/axis/ticks/LogTicks.ts" />
/// <reference path="./view/axis/ticks/OrdinalTicks.ts" />
/// <reference path="./view/axis/shape/AxisShape.ts" />
/// <reference path="./view/axis/BaseAxis.ts" />
/// <reference path="./view/axis/LineAxis.ts" />
/// <reference path="./view/axis/RadialLineAxis.ts" />
/// <reference path="./view/plot/BasePlot.ts" />
/// <reference path="./view/plot/CartesianPlot.ts" />
/// <reference path="./view/chart/cartesian/CartesianChart.ts" />
/// <reference path="./view/BaseChartLayout.ts" />
/// <reference path="./view/chart/cartesian/ChartLayout.ts" />
/// <reference path="./view/plot/HierarchicalPlot.ts" />
/// <reference path="./view/chart/hierarchical/HierarchicalChart.ts" />
/// <reference path="./view/chart/hierarchical/ChartLayout.ts" />
///// <reference path="./view/chart/hierarchical/HierarchicalChart.ts" />
// HierarchicalChart
/// <reference path="./model/geo/path/Stream.ts" />
/// <reference path="./model/geo/path/StreamFactory.ts" />
/// <reference path="./model/geo/path/Feature.ts" />
/// <reference path="./model/geo/path/ParseFactory.ts" />
/// <reference path="./model/geo/projection/Projection.ts"/>
/// <reference path="./model/geo/projection/MercatorProjection.ts" />
/// <reference path="./model/geo/projection/ProjectionFactory.ts"/>
/// <reference path="./model/geo/DataModel.ts" />
/// <reference path="./model/geo/relation/Encoding.ts" />
/// <reference path="./model/geo/relation/DataModel.ts" />
/// <reference path="./model/geo/FlightParser.ts" />
/// <reference path="./view/chart/geo/GeoPlot.ts" />
/// <reference path="./view/chart/geo/ChartLayout.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var ConfigFactory = /** @class */ (function () {
            function ConfigFactory() {
            }
            ConfigFactory.exportConfig = function (view) {
            };
            return ConfigFactory;
        }());
        test.ConfigFactory = ConfigFactory;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Point = android.graphics.Point;
        var GeoConfig = /** @class */ (function () {
            function GeoConfig(config) {
                var geo = config.geo;
                if (geo != null) {
                    if (geo.center != null) {
                        this.center = new Point(geo.center[0], geo.center[1]);
                    }
                    if (geo.translate != null) {
                        this.translate = new Point(geo.translate[0], geo.translate[1]);
                    }
                    if (geo.scale) {
                        this.scale = geo.scale;
                    }
                }
            }
            return GeoConfig;
        }());
        test.GeoConfig = GeoConfig;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var EventHandler = /** @class */ (function () {
            function EventHandler() {
            }
            return EventHandler;
        }());
        test.EventHandler = EventHandler;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var cartesian;
        (function (cartesian) {
            'use strict';
            var AggregateCache = /** @class */ (function () {
                function AggregateCache(agg) {
                    this.__agg = agg;
                }
                AggregateCache.prototype.put = function (key, value) {
                    if (this.__domains[key] == null) {
                        this.__domains[key] = [];
                    }
                    this.__domains[key].push(value);
                };
                AggregateCache.prototype.get = function (key) {
                    var list = this.__domains[key];
                    if (list != null) {
                        var count = 0;
                        var sum = 0;
                        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                            var item = list_1[_i];
                            if (typeof item == 'number') {
                                sum += item;
                                count++;
                            }
                        }
                        switch (this.__agg) {
                            case test.Agg.AVERAGE:
                                return sum / count;
                            case test.Agg.COUNT:
                                return count;
                            case test.Agg.SUM:
                                return sum;
                            case test.Agg.NONE:
                                return list[0];
                        }
                    }
                    return 0;
                };
                return AggregateCache;
            }());
            cartesian.AggregateCache = AggregateCache;
        })(cartesian = test.cartesian || (test.cartesian = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
// /// <reference path="../../base.ts" />
// namespace android.test.map {
//     'use strict';
//     import Field = android.test.cartesian.Field;
//     export class Encoding {
//         public name:Field;
//         public color: Field;
//         public size: Field;
//         public shape: Field;
//         public group: Field;
//         public text:Field;
//         public tooltip:Field;
//         public values:Field[];
//         public _stack:boolean = false;
//         public _radial:boolean = false;
//         constructor(encoding: any) {
//             if(encoding.name){
//                 this.name  = new Field(encoding.name,"name");
//             }
//             if (encoding.color) {
//                 this.color = new Field(encoding.color, 'color');
//             }
//             if (encoding.shape) {
//                 this.shape = new Field(encoding.shape, 'shape');
//             }
//             if (encoding.size) {
//                 this.size = new Field(encoding.size, 'size');
//             }
//             if(encoding.tooltip){
//                 this.tooltip = new Field(encoding.tooltip,'tooltip');
//             }
//             if(encoding.text){
//                 this.text = new Field(encoding.text,'text');
//             }
//             if (encoding.group) {
//                 this.group = new Field(encoding.group, 'group');
//             }
//             if (encoding.values && encoding.values instanceof Array){
//                 this.values =[];
//                 for(var i = 0; i <encoding.values.length; ++i){
//                     var value = encoding.values[i];
//                     this.values.push(new Field(value,value.name));
//                 }
//             }
//             if(encoding.stack != null){
//                 this._stack = encoding.stack ;
//             }
//             if(encoding.radial != null){
//                 this._radial = encoding.radial;
//             }
//         }
//     }
// }
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var PADDING = 5;
        var View = android.view.View;
        var MeasureSpec = android.view.MeasureSpec;
        var Size = android.graphics.Size;
        var Rect = android.graphics.Rect;
        var Default = android.device.Default;
        var LayoutParams = android.view.LayoutParams;
        var MotionEvent = android.view.event.MotionEvent;
        var Message = android.util.Message;
        var LegendItem = /** @class */ (function (_super) {
            __extends(LegendItem, _super);
            function LegendItem(c, option) {
                var _this = _super.call(this, c) || this;
                _this.enable = true;
                _this.font = Default.font;
                _this.font.fontColor = 'black';
                if (option != null && option.enable != null) {
                    _this.enable = option.enable;
                }
                return _this;
            }
            LegendItem.prototype.onMeasure = function (width, height, canvas) {
                var w = width.getMeasureValue();
                var h = height.getMeasureValue();
                var size = new Size(0, 0);
                size = canvas.measureString(this.name, this.font);
                this.__fontRect = new Rect(0, 0, size.width, size.height);
                var iconsize = size.height * 2;
                this.__iconRect = new Rect(0, 0, iconsize, size.height);
                size.width = size.width + PADDING + iconsize + this._padding.leftPadding + this._padding.rightPadding;
                size.height += (this._padding.topPadding + this._padding.bottomPadding);
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            LegendItem.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
                this.__fontRect.translate(l, t + this._padding.topPadding);
                this.__iconRect.translate(l + PADDING + this.__fontRect.width, t + this._padding.topPadding);
            };
            LegendItem.prototype.onDraw = function (canvas) {
                if (!this.enable) {
                    this.icon.color = 'gray';
                }
                canvas.drawText(this.name, this.__fontRect.startPoint, this.font);
                this.icon.draw(this.__iconRect, canvas);
            };
            LegendItem.prototype.onMouseEvent = function (event) {
                var handler = this.getContext().getArgs(test.EventMessage);
                switch (event.action) {
                    case MotionEvent.ACTION_CLICK:
                        // window['EventHandler'](new Point(event.x, event.y), ElementType.SeriesLegend, { 'series': this.series.name, 'enable': this.series.enable ,action:"enableseries"});
                        var msg = new Message();
                        msg.args['types'] = test.ElementType.SeriesLegend;
                        this.enable = !this.enable;
                        msg.args['info'] = { 'name': this.name, action: "enable", value: this.enable };
                        handler.sendMessage(msg);
                        break;
                    case MotionEvent.ACTION_MOUSE_ON:
                        // this.series.showlabels = true;
                        // window['EventHandler'](new Point(event.x, event.y), ElementType.SeriesLegend, { 'series': this.series.name, 'showlabel': this.series.showlabels,action:"showlabel" });
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        // this.series.showlabels = false;
                        // window['EventHandler'](new Point(event.x, event.y), ElementType.SeriesLegend, { 'series': this.series.name, 'showlabel': this.series.showlabels ,action:"showlabel"});
                        break;
                }
                return false;
            };
            return LegendItem;
        }(View));
        test.LegendItem = LegendItem;
        var Icon = /** @class */ (function () {
            function Icon() {
            }
            return Icon;
        }());
        test.Icon = Icon;
        var BarIcon = /** @class */ (function (_super) {
            __extends(BarIcon, _super);
            function BarIcon() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BarIcon.prototype.draw = function (rect, canvas) {
                var style = Default.style;
                style.background = this.color;
                canvas.drawRect(rect.startPoint, rect.endPoint, true, style);
            };
            return BarIcon;
        }(Icon));
        test.BarIcon = BarIcon;
        var CircleIcon = /** @class */ (function (_super) {
            __extends(CircleIcon, _super);
            function CircleIcon() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CircleIcon.prototype.draw = function (rect, canvas) {
                var style = Default.style;
                style.background = this.color;
                canvas.drawArc(rect, 0, 2 * 180, style);
            };
            return CircleIcon;
        }(Icon));
        test.CircleIcon = CircleIcon;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var Animation = android.view.animation.Animation;
        var FlightShape = /** @class */ (function (_super) {
            __extends(FlightShape, _super);
            function FlightShape(c, xs, ys, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.priority = ++test.LinesShape.LinesPrority;
                _this.__xs = xs;
                _this.__ys = ys;
                var l = test.Utility.min(xs);
                var t = test.Utility.min(ys);
                var r = test.Utility.max(xs);
                var b = test.Utility.max(ys);
                _this.__renderXs = [];
                _this.__renderYs = [];
                _this.layoutInfo.reset(l, t, r, b, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this._style = style;
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            Object.defineProperty(FlightShape.prototype, "xs", {
                get: function () {
                    return this.__xs;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FlightShape.prototype, "ys", {
                get: function () {
                    return this.__ys;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FlightShape.prototype, "renderXs", {
                set: function (value) {
                    this.__renderXs = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FlightShape.prototype, "renderYs", {
                set: function (value) {
                    this.__renderYs = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FlightShape.prototype, "strokeStyle", {
                get: function () {
                    return this._strokeStyle;
                },
                set: function (value) {
                    this._strokeStyle = value;
                },
                enumerable: true,
                configurable: true
            });
            FlightShape.prototype.onDrawShape = function (canvas) {
                // canvas.save();
                // canvas.clip(this.layoutInfo.innerrect);
                // canvas.drawLines(this.__xs,this.__ys,this._strokeStyle);
                // canvas.restore();
                canvas.drawLines(this.__renderXs, this.__renderYs, this._strokeStyle);
                // let context = canvas.canvas;
                // context.fillStyle = 'rgba(0,0,0,0.05)';
                // context.beginPath();
                // context.fillStyle = '#ac6318';
                // context.strokeStyle = '#ac6318';
                // context.lineWidth = 6;
                // context.moveTo(this.__renderXs[0], this.__renderYs[0]);
                // context.lineTo(this.__renderXs[1], this.__renderYs[1]);
                // context.stroke();
                // context.arc(this.__renderXs[0], this.__renderYs[0], 3, 0, Math.PI*2, true);
                // context.fill();
            };
            FlightShape.LinesPrority = test.PlotShape.PRIORITY * 4;
            return FlightShape;
        }(test.PlotShape));
        test.FlightShape = FlightShape;
        var FlightAnimationTo = /** @class */ (function (_super) {
            __extends(FlightAnimationTo, _super);
            function FlightAnimationTo() {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.AnimationEase();
                return _this;
            }
            FlightAnimationTo.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof FlightShape) {
                    var xs = view.xs;
                    var ys = view.ys;
                    var last = xs.length - 1;
                    // console.log("interpolated Time  "+ interpolatedTime);
                    var txs = [(xs[last] - xs[0]) * interpolatedTime + xs[0], (xs[last] - xs[0]) * (interpolatedTime + 0.1) + xs[0]];
                    var tys = [(ys[last] - ys[0]) * interpolatedTime + ys[0], (ys[last] - ys[0]) * (interpolatedTime + 0.1) + ys[0]];
                    view.renderXs = txs;
                    view.renderYs = tys;
                }
            };
            FlightAnimationTo.prototype.onStartAniamtion = function (canvas, view) {
                _super.prototype.onStartAniamtion.call(this, canvas, view);
            };
            FlightAnimationTo.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
                // console.log("onEndAnimation ");
            };
            return FlightAnimationTo;
        }(Animation));
        test.FlightAnimationTo = FlightAnimationTo;
        var FlightAnimationBack = /** @class */ (function (_super) {
            __extends(FlightAnimationBack, _super);
            function FlightAnimationBack() {
                var _this = _super.call(this) || this;
                _this.ease = new android.view.animation.AnimationEase();
                return _this;
            }
            FlightAnimationBack.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                if (view instanceof FlightShape) {
                    var xs = view.xs;
                    var ys = view.ys;
                    var last = xs.length - 1;
                    // console.log("interpolated Time  "+ interpolatedTime);
                    var txs = [xs[last] - (xs[last] - xs[0]) * (interpolatedTime), xs[last] - (xs[last] - xs[0]) * (interpolatedTime + 0.1)];
                    var tys = [ys[last] - (ys[last] - ys[0]) * (interpolatedTime), ys[last] - (ys[last] - ys[0]) * (interpolatedTime + 0.1)];
                    view.renderXs = txs;
                    view.renderYs = tys;
                }
            };
            FlightAnimationBack.prototype.onStartAniamtion = function (canvas, view) {
                _super.prototype.onStartAniamtion.call(this, canvas, view);
            };
            FlightAnimationBack.prototype.onEndAnimation = function (canvas, view) {
                _super.prototype.onEndAnimation.call(this, canvas, view);
            };
            return FlightAnimationBack;
        }(Animation));
        test.FlightAnimationBack = FlightAnimationBack;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var Default = android.device.Default;
        var MotionEvent = android.view.event.MotionEvent;
        var Util = android.graphics.Util;
        var MapItemShape = /** @class */ (function (_super) {
            __extends(MapItemShape, _super);
            function MapItemShape(c, xs, ys, style, strokeStyle) {
                var _this = _super.call(this, c) || this;
                _this.priority = test.Shape.PRIORITY + 1;
                _this.__xs = xs;
                _this.__ys = ys;
                _this._style = style;
                var l = Math.min.apply(Math, xs);
                var t = Math.min.apply(Math, ys);
                var r = Math.max.apply(Math, xs);
                var b = Math.max.apply(Math, ys);
                _this.layoutInfo.reset(l, t, r, b, _this.padding, 0);
                _this._oldLayoutInfo = _this.layoutInfo.clone();
                _this.__center = Util.CenterOfPolygon(_this.__xs, _this.__ys);
                _this.__area = Util.Area(_this.__xs, _this.__ys);
                if (style == null) {
                    _this._style = Default.style;
                }
                _this._strokeStyle = strokeStyle;
                if (strokeStyle == null) {
                    _this._strokeStyle = Default.strokestyle;
                }
                return _this;
            }
            Object.defineProperty(MapItemShape.prototype, "center", {
                get: function () {
                    return this.__center;
                },
                set: function (value) {
                    this.__center = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MapItemShape.prototype, "area", {
                get: function () {
                    return this.__area;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MapItemShape.prototype, "strokeStyle", {
                get: function () {
                    return this._strokeStyle;
                },
                set: function (value) {
                    this._strokeStyle = value;
                },
                enumerable: true,
                configurable: true
            });
            MapItemShape.prototype.onDrawShape = function (canvas) {
                canvas.save();
                canvas.clip(this.layoutInfo.innerrect);
                canvas.drawPolygon(this.__xs, this.__ys, this.style);
                canvas.restore();
            };
            MapItemShape.prototype.onMouseEvent = function (event) {
                switch (event.action) {
                    case MotionEvent.ACTION_MOUSE_ON:
                        console.log("mouse on ");
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        console.log("mouse out ");
                        break;
                    case MotionEvent.ACTION_MOUSE_MOVE:
                        break;
                    case MotionEvent.ACTION_MOUSE_OUT:
                        break;
                }
                return true;
            };
            return MapItemShape;
        }(test.PlotShape));
        test.MapItemShape = MapItemShape;
        // export class MapItemShapeAnimation extends Animation {
        //     private rect: Rect;
        //     constructor(rect: Rect) {
        //         super();
        //         this.ease = new android.view.animation.AnimationEase();
        //     }
        //     applyTransformation(interpolatedTime: number, canvas: Canvas, view: View) {
        //         let scale: number = this.from + (this.to - this.from) * interpolatedTime;
        //         let rect: Rect = this.rect.clone();
        //         view.layoutInfo.innerrect.width = this.rect.width * scale;
        //     }
        //     onStartAniamtion(canvas: Canvas, view: View): void {
        //         this.rect = view.layoutInfo.innerrect.clone();
        //     }
        //     onEndAnimation(canvas: Canvas, view: View): void {
        //     }
        // }
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        'use strict';
        var TextView = android.widget.TextView;
        var ToolTips = /** @class */ (function (_super) {
            __extends(ToolTips, _super);
            function ToolTips() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ToolTips.prototype.onDraw = function (canvas) {
            };
            return ToolTips;
        }(TextView));
        test.ToolTips = ToolTips;
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var GeoLayout = /** @class */ (function (_super) {
                __extends(GeoLayout, _super);
                function GeoLayout(c) {
                    var _this = _super.call(this, c) || this;
                    _this.__namescale = new map.MapOrdinalScale("name");
                    return _this;
                }
                GeoLayout.prototype.convert = function (featurelist, rect, canvas) {
                    this.__shapelist.length = 0;
                    for (var _i = 0, featurelist_1 = featurelist; _i < featurelist_1.length; _i++) {
                        var feature = featurelist_1[_i];
                        var max = null;
                        for (var _a = 0, _b = feature.streams; _a < _b.length; _a++) {
                            var stream = _b[_a];
                            var pointlist = stream.result;
                            var mapshape = new test.MapItemShape(this.context, pointlist.xs, pointlist.ys);
                            if (max == null) {
                                max = mapshape;
                            }
                            if (max.area < mapshape.area) {
                                max = mapshape;
                            }
                            // mapshape.style.background = ColorUtils.indexColor(parseInt(feature.id));
                            mapshape.style.background = "#000";
                            // mapshape.style.background =
                            mapshape.style.strokeStyle.strokeColor = '#cbcbcb';
                            // 'gray'
                            mapshape.style.strokeStyle.strokeWidth = 1;
                            this.shapeList.push(mapshape);
                        }
                        if (max != null) {
                            this.__namescale.domains.push(feature.name);
                            this.__namescale.ranges.push(max.center);
                        }
                    }
                    this.__namescale.refresh();
                    return this.shapeList;
                };
                Object.defineProperty(GeoLayout.prototype, "nameScale", {
                    get: function () {
                        return this.__namescale;
                    },
                    enumerable: true,
                    configurable: true
                });
                return GeoLayout;
            }(test.BaseLayout));
            map.GeoLayout = GeoLayout;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var MapBaseLayout = /** @class */ (function (_super) {
                __extends(MapBaseLayout, _super);
                function MapBaseLayout() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this._rect = null;
                    return _this;
                }
                MapBaseLayout.prototype.convert = function (serieslist, projection, nameScale, encoding, rect, canvas) {
                    this.__shapelist = [];
                    this._serieslist = [];
                    this._projection = projection;
                    this._nameScale = nameScale;
                    for (var _i = 0, serieslist_3 = serieslist; _i < serieslist_3.length; _i++) {
                        var ser = serieslist_3[_i];
                        this._serieslist.push(ser.clone());
                    }
                    this._encoding = encoding;
                    this._rect = rect;
                    for (var _a = 0, _b = this._serieslist; _a < _b.length; _a++) {
                        var ser = _b[_a];
                        this._layoutSeries(ser, nameScale, canvas);
                    }
                    return this.__shapelist;
                };
                MapBaseLayout.prototype._layoutSeries = function (ser, nameScale, canvas) {
                };
                return MapBaseLayout;
            }(test.BaseLayout));
            map.MapBaseLayout = MapBaseLayout;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var MapOrdinalScale = /** @class */ (function (_super) {
                __extends(MapOrdinalScale, _super);
                function MapOrdinalScale() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                MapOrdinalScale.prototype.getScaleValue = function (v) {
                    var index = this._domainCache[v];
                    if (isNaN(index)) {
                        index = 0;
                    }
                    return this.__ranges[index];
                };
                Object.defineProperty(MapOrdinalScale.prototype, "ranges", {
                    get: function () {
                        return this.__ranges;
                    },
                    enumerable: true,
                    configurable: true
                });
                return MapOrdinalScale;
            }(test.OrdinalScale));
            map.MapOrdinalScale = MapOrdinalScale;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            'use strict';
            var Default = android.device.Default;
            var MapScatterLayout = /** @class */ (function (_super) {
                __extends(MapScatterLayout, _super);
                function MapScatterLayout() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                MapScatterLayout.prototype._layoutSeries = function (series, nameScale, canvas) {
                    var size = this._serieslist.length;
                    var xScale = series.getScale('x');
                    var yScale = series.getScale('y');
                    var colorScale = series.getScale('color');
                    var sizeScale = series.getScale('size');
                    var defaultcolor = test.ColorUtils.indexColor(series.index);
                    var colorArray = [];
                    if (colorScale instanceof test.OrdinalScale) {
                        colorScale = colorScale.clone();
                        colorArray = test.ColorUtils.gradientColor(colorScale.startPosition, colorScale.endPosition, colorScale.domains.length);
                        colorScale.range([0, colorScale.domains.length - 1]);
                    }
                    var defaultsize = 10;
                    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {
                        var pt = _a[_i];
                        if (pt != null) {
                            var colorValue = pt.color;
                            var shapeValue = pt.shape;
                            var sizeValue = pt.size;
                            var tooltip = pt.tooltip;
                            var text = pt.text;
                            // let name:Value= pt.x;
                            var name_1 = pt.geoposition;
                            var point = null;
                            if (pt.geoposition.scaleType === test.ScaleType.LatLon) {
                                point = this._projection.lonLat2xy(pt.geoposition.value[0], pt.geoposition.value[1]);
                            }
                            else {
                                point = nameScale.getScaleValue(pt.geoposition.value);
                            }
                            var s = sizeScale.getScaleValue(sizeValue.value);
                            if (isNaN(s) || s == null || s <= 0) {
                                s = defaultsize;
                            }
                            var color = defaultcolor;
                            if (colorScale instanceof test.OrdinalScale) {
                                var colorindex = colorScale.getScaleValue(colorValue.value);
                                color = colorArray[colorindex];
                            }
                            else if (colorScale instanceof test.LinearScale) {
                                color = test.ColorUtils.getColor(colorScale.startPosition, colorScale.endPosition, colorValue.value, colorScale.min, colorScale.max);
                            }
                            var scatterShape = new test.ScatterShape(this.context, point.x - s / 2, point.y - s / 2, s, s, Default.style);
                            if (color != null) {
                                scatterShape.style.background = color;
                            }
                            else {
                                scatterShape.style.background = defaultcolor;
                            }
                            if (series.showlabels && text != null) {
                                var textstr = text.value;
                                var font = Default.font;
                                font.fontColor = 'black';
                                font.fontSize = 12;
                                var textsize = canvas.measureString(textstr, font);
                                var width = textsize.width;
                                var height = textsize.height;
                                scatterShape.label = new test.Label(this.context, textstr, point.x, point.y - s / 2 - 3, width, height, 0, 3);
                                scatterShape.label.background = Default.style;
                                scatterShape.label._font = font;
                                scatterShape.label.background.strokeStyle.strokeColor = 'gray';
                                scatterShape.label.background.background = 'lightblue';
                            }
                            this.__shapelist.push(scatterShape);
                        }
                    }
                };
                return MapScatterLayout;
            }(map.MapBaseLayout));
            map.MapScatterLayout = MapScatterLayout;
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));
/// <reference path="../../../../base.ts" />
var android;
(function (android) {
    var test;
    (function (test) {
        var map;
        (function (map) {
            var relation;
            (function (relation) {
                'use strict';
                var MapRelationLayout = /** @class */ (function (_super) {
                    __extends(MapRelationLayout, _super);
                    function MapRelationLayout(c) {
                        return _super.call(this, c) || this;
                    }
                    MapRelationLayout.prototype.convert = function (items, rect, canvas) {
                        this.__shapelist.length = 0;
                        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                            var item = items_2[_i];
                            var max = null;
                            var shape = new test.FlightShape(this.context, [item.start.x, item.end.x], [item.start.y, item.end.y]);
                            shape.strokeStyle.strokeColor = 'red';
                            // 'gray'
                            shape.strokeStyle.strokeWidth = 0.5;
                            this.shapeList.push(shape);
                        }
                        return this.shapeList;
                    };
                    return MapRelationLayout;
                }(test.BaseLayout));
                relation.MapRelationLayout = MapRelationLayout;
            })(relation = map.relation || (map.relation = {}));
        })(map = test.map || (test.map = {}));
    })(test = android.test || (android.test = {}));
})(android || (android = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25maWcvVmlld0NvbmZpZy50cyIsInNyYy9jb25maWcvY2FydGVzaWFuL0NvbmZpZy50cyIsInNyYy9tZXNzYWdlL01lc3NhZ2VLZXkudHMiLCJzcmMvbWVzc2FnZS9NZXNzYWdlQ2VudGVyLnRzIiwic3JjL3V0aWwvVXRpbGl0eS50cyIsInNyYy91dGlsL0NvbG9yVXRpbHMudHMiLCJzcmMvdXRpbC9Sb3RhdGVkUmVjdC50cyIsInNyYy9tb2RlbC9lbnVtL0FuaW1hdGlvblR5cGUudHMiLCJzcmMvbW9kZWwvZW51bS9BZ2cudHMiLCJzcmMvbW9kZWwvZW51bS9PcmRlci50cyIsInNyYy9tb2RlbC9lbnVtL1NjYWxlVHlwZS50cyIsInNyYy9tb2RlbC9lbnVtL0RhdGFUeXBlLnRzIiwic3JjL21vZGVsL2VudW0vQ2hhcnRUeXBlLnRzIiwic3JjL21vZGVsL2VudW0vQXhpc1R5cGUudHMiLCJzcmMvbW9kZWwvY2FydGVzaWFuL1ZhbHVlLnRzIiwic3JjL21vZGVsL2NhcnRlc2lhbi9GaWVsZC50cyIsInNyYy9tb2RlbC9jYXJ0ZXNpYW4vRmlsdGVyLnRzIiwic3JjL21vZGVsL2NhcnRlc2lhbi9FbmNvZGluZy50cyIsInNyYy9tb2RlbC9jYXJ0ZXNpYW4vSXRlbS50cyIsInNyYy9tb2RlbC9jYXJ0ZXNpYW4vVHJhbnNGb3JtLnRzIiwic3JjL21vZGVsL2NhcnRlc2lhbi9TZXJpZXMudHMiLCJzcmMvbW9kZWwvY2FydGVzaWFuL0RhdGFNb2RlbC50cyIsInNyYy9tb2RlbC9oaWVyYXJjaGljYWwvVmFsdWUudHMiLCJzcmMvbW9kZWwvaGllcmFyY2hpY2FsL0ZpZWxkLnRzIiwic3JjL21vZGVsL2hpZXJhcmNoaWNhbC9JdGVtLnRzIiwic3JjL21vZGVsL2hpZXJhcmNoaWNhbC9FbmNvZGluZy50cyIsInNyYy9tb2RlbC9oaWVyYXJjaGljYWwvRGF0YU1vZGVsLnRzIiwic3JjL3NjYWxlL0lTY2FsZS50cyIsInNyYy9zY2FsZS9TY2FsZS50cyIsInNyYy9zY2FsZS9MaW5lYXJTY2FsZS50cyIsInNyYy9zY2FsZS9PcmRpbmFsU2NhbGUudHMiLCJzcmMvc2NhbGUvTG9nU2NhbGUudHMiLCJzcmMvc2NhbGUvQ29sb3JTY2FsZS50cyIsInNyYy92aWV3L0VsZW1lbnRUeXBlLnRzIiwic3JjL3ZpZXcvbGVnZW5kL0xlZ2VuZFR5cGUudHMiLCJzcmMvdmlldy9sZWdlbmQvSUxlZ2VuZC50cyIsInNyYy92aWV3L2xlZ2VuZC9MaW5lYXJTY2FsZUxlZ2VuZC50cyIsInNyYy92aWV3L2xlZ2VuZC9PcmRpbmFsU2NhbGVMZWdlbmQudHMiLCJzcmMvdmlldy9sZWdlbmQvU2VyaWVzTGVnZW5kLnRzIiwic3JjL3ZpZXcvc2hhcGUvU2hhcGUudHMiLCJzcmMvdmlldy9zaGFwZS9MYWJsZS50cyIsInNyYy92aWV3L3NoYXBlL1Bsb3RTaGFwZS50cyIsInNyYy92aWV3L3NoYXBlL0JhclNoYXBlLnRzIiwic3JjL3ZpZXcvc2hhcGUvQ3ViZVNoYXBlLnRzIiwic3JjL3ZpZXcvc2hhcGUvUmFkaWFsQmFyU2hhcGUudHMiLCJzcmMvdmlldy9zaGFwZS9TdW5idXJzdFNoYXBlLnRzIiwic3JjL3ZpZXcvc2hhcGUvU2NhdHRlclNoYXBlLnRzIiwic3JjL3ZpZXcvc2hhcGUvTGluZXNTaGFwZS50cyIsInNyYy92aWV3L3NoYXBlL0FyZWFTaGFwZS50cyIsInNyYy92aWV3L3NoYXBlL0F4aXNMaW5lU2hhcGUudHMiLCJzcmMvdmlldy9sYXlvdXQvQmFzZUxheW91dC50cyIsInNyYy92aWV3L2xheW91dC9jYXJ0ZXNpYW4vQ2FydGVzaWFuQmFzZUxheW91dC50cyIsInNyYy92aWV3L2xheW91dC9jYXJ0ZXNpYW4vQ2FydGVzaWFuTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9CYXJMYXlvdXQudHMiLCJzcmMvdmlldy9sYXlvdXQvY2FydGVzaWFuL1NjYXR0ZXJMYXlvdXQudHMiLCJzcmMvdmlldy9sYXlvdXQvY2FydGVzaWFuL1JhZGlhbENhcnRlc2lhbkxheW91dC50cyIsInNyYy92aWV3L2xheW91dC9jYXJ0ZXNpYW4vUmFkaWFsQmFyTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9SYWRpYWxMaW5lTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9SYWRpYWxBcmVhTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9SYWRpYWxTY2F0dGVyTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9MaW5lTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9BcmVhTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2hpZXJhcmNoaWNhbC9IaWVyYXJjaGljYWxMYXlvdXQudHMiLCJzcmMvdmlldy9sYXlvdXQvaGllcmFyY2hpY2FsL1N1bmJ1cnN0TGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2hpZXJhcmNoaWNhbC9UcmVlTWFwTGF5b3V0LnRzIiwic3JjL3ZpZXcvYXhpcy90aWNrcy9UaWNrcy50cyIsInNyYy92aWV3L2F4aXMvdGlja3MvTGluZWFyVGlja3MudHMiLCJzcmMvdmlldy9heGlzL3RpY2tzL0xvZ1RpY2tzLnRzIiwic3JjL3ZpZXcvYXhpcy90aWNrcy9PcmRpbmFsVGlja3MudHMiLCJzcmMvdmlldy9heGlzL3NoYXBlL0F4aXNTaGFwZS50cyIsInNyYy92aWV3L2F4aXMvQmFzZUF4aXMudHMiLCJzcmMvdmlldy9heGlzL0xpbmVBeGlzLnRzIiwic3JjL3ZpZXcvYXhpcy9SYWRpYWxMaW5lQXhpcy50cyIsInNyYy92aWV3L3Bsb3QvQmFzZVBsb3QudHMiLCJzcmMvdmlldy9wbG90L0NhcnRlc2lhblBsb3QudHMiLCJzcmMvdmlldy9jaGFydC9jYXJ0ZXNpYW4vQ2FydGVzaWFuQ2hhcnQudHMiLCJzcmMvdmlldy9CYXNlQ2hhcnRMYXlvdXQudHMiLCJzcmMvdmlldy9jaGFydC9jYXJ0ZXNpYW4vQ2hhcnRMYXlvdXQudHMiLCJzcmMvdmlldy9wbG90L0hpZXJhcmNoaWNhbFBsb3QudHMiLCJzcmMvdmlldy9jaGFydC9oaWVyYXJjaGljYWwvSGllcmFyY2hpY2FsQ2hhcnQudHMiLCJzcmMvdmlldy9jaGFydC9oaWVyYXJjaGljYWwvQ2hhcnRMYXlvdXQudHMiLCJzcmMvbW9kZWwvZ2VvL3BhdGgvU3RyZWFtLnRzIiwic3JjL21vZGVsL2dlby9wYXRoL1N0cmVhbUZhY3RvcnkudHMiLCJzcmMvbW9kZWwvZ2VvL3BhdGgvRmVhdHVyZS50cyIsInNyYy9tb2RlbC9nZW8vcGF0aC9QYXJzZUZhY3RvcnkudHMiLCJzcmMvbW9kZWwvZ2VvL3Byb2plY3Rpb24vUHJvamVjdGlvbi50cyIsInNyYy9tb2RlbC9nZW8vcHJvamVjdGlvbi9NZXJjYXRvclByb2plY3Rpb24udHMiLCJzcmMvbW9kZWwvZ2VvL3Byb2plY3Rpb24vUHJvamVjdGlvbkZhY3RvcnkudHMiLCJzcmMvbW9kZWwvZ2VvL0RhdGFNb2RlbC50cyIsInNyYy9tb2RlbC9nZW8vcmVsYXRpb24vRW5jb2RpbmcudHMiLCJzcmMvbW9kZWwvZ2VvL3JlbGF0aW9uL0RhdGFNb2RlbC50cyIsInNyYy9tb2RlbC9nZW8vRmxpZ2h0UGFyc2VyLnRzIiwic3JjL3ZpZXcvY2hhcnQvZ2VvL0dlb1Bsb3QudHMiLCJzcmMvdmlldy9jaGFydC9nZW8vQ2hhcnRMYXlvdXQudHMiLCJzcmMvYmFzZS50cyIsInNyYy9jb25maWcvQ29uZmlnRmFjdG9yeS50cyIsInNyYy9tb2RlbC9HZW9Db25maWcudHMiLCJzcmMvdXRpbC9FdmVudEhhbmRsZXIudHMiLCJzcmMvbW9kZWwvY2FydGVzaWFuL0FnZ3JlZ2F0ZUNhY2hlLnRzIiwic3JjL21vZGVsL2dlby9FbmNvZGluZy50cyIsInNyYy92aWV3L2xlZ2VuZC9MZWdlbmRJdGVtLnRzIiwic3JjL3ZpZXcvc2hhcGUvRmxpZ2h0U2hhcGUudHMiLCJzcmMvdmlldy9zaGFwZS9NYXBJdGVtU2hhcGUudHMiLCJzcmMvdmlldy9zaGFwZS9Ub29sVGlwcy50cyIsInNyYy92aWV3L2xheW91dC9nZW8vR2VvTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2dlby9NYXBCYXNlTGF5b3V0LnRzIiwic3JjL3ZpZXcvbGF5b3V0L2dlby9NYXBPcmRpbmFsU2NhbGUudHMiLCJzcmMvdmlldy9sYXlvdXQvZ2VvL01hcFNjYXR0ZXJMYXlvdXQudHMiLCJzcmMvdmlldy9sYXlvdXQvZ2VvL3JlbGF0aW9uL01hcFJlbGF0aW9uTGF5b3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxtQ0FBbUM7QUFDbkMsSUFBVSxPQUFPLENBb0RoQjtBQXBERCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0FvRHJCO0lBcERpQixXQUFBLElBQUk7UUFBQyxJQUFBLE1BQU0sQ0FvRDVCO1FBcERzQixXQUFBLE1BQU07WUFFekIsSUFBTyxTQUFTLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFDOUMsSUFBTyxXQUFXLEdBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFFakQsSUFBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDMUMsSUFBTyxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDcEM7Z0JBb0JJLG9CQUFZLE1BQVU7b0JBQ2xCLEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDO3dCQUVsQixFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsVUFBVSxZQUFZLE1BQU0sQ0FBQyxDQUFBLENBQUM7NEJBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQzs0QkFDbkMsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFlBQVksTUFBTSxDQUFDLENBQUEsQ0FBQztnQ0FDekMsT0FBTzs0QkFDWCxDQUFDOzRCQUNELEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxZQUFZLE1BQU0sQ0FBQyxD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SyxFQUFFLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUNwSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUV4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUV4QixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQzVELEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztvQkFFNUQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMvQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBRS9CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztvQkFDckQsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNyRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFFdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNyRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7b0JBRXJELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUV2QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN6QixFQUFFLENBQUMsQ0FBQyxHQUFH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LEdBQUcsSUFBSSxVQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDcEQsQ0FBQzt3QkFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzt3QkFDM0IsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUNsQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBQSxXQUFXLENBQUMsQ0FBQyxDQUFDO2dDQUMvQixJQUFJLEdBQUcsR0FBVyxLQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dDQUM3RCxJQUFJLEdBQUcsR0FBVyxLQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dDQUM3RCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQzdCLENBQUM7NEJBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFBLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0NBQ25DLElBQUksR0FBRyxHQUFXLEtBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0NBQzdELElBQUksR0FBRyxHQUFXLEtBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0NBQzdELEtB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QUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ3JHLENBQUM7d0JBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ0osTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzNHLENBQUM7b0JBQ0wsQ0FBQztvQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxVQUFBLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs0QkFDYixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDekcsQ0FBQzt3QkFBQyxJQUFJLENBQUMsQ0FBQzs0QkFDSixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDdkcsQ0FBQztvQkFDTCxDQUFDO2dCQUNMLENB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O3dCQUMvRCxJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQzt3QkFDL0QsSUFBSSxFQUFFLEdBQVcsR0FBRyxDQUFDO3dCQUNyQixJQUFJLEVBQUUsR0FBVyxHQUFHLENBQUM7d0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDOzRCQUNwQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQzs0QkFDckQsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFDOzRCQUN4RCxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxVQUFVLENBQUM7d0JBQzVELENBQUM7d0JBRUQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDcEcsSUFBSSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFFcEcsSUFBSSxNQUFNLEdBQVcsQ0FBQyxDQUFDO3dCQUN2QixJQUFJLE1BQU0sR0FBVyxDQUFDLEdBQUcsVUFBVSxHQUFHLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzt3QkFDM0UsSUFBSSxLQUFL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TSxHQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3Q0FDakUsSUFBSSxXQUFXLEdBQVcsQ0FBQyxDQUFDO3dDQUM1QixJQUFJLFVBQVUsR0FBVyxVQUFBLFVBQVUsQ0FBQzt3Q0FDcEMsSUFBSSxRQUFRLEdBQVcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFDO3dDQUNoRCxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEtBQUEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7d0NBQy9JLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dDQUNoRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQ0FDbEMsQ0FBQztvQ0FBQyxJQUFJLENBQUMsQ0FBQzt3Q0FDSixJQUFJLFNBQVMsR0FBYyxJQUFJLFVBQUEsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO3dDQUM1RCxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEtBQUEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLE1BQU0s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QUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0RBQzFGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzs0Q0FDbkcsQ0FBQzt3Q0FDTCxDQUFDO3dDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDOzRDQUN4QyxJQUFJLEtBQUssR0FBRyxLQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDOzRDQUNoRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnREFDaEIsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0RBQ3BCLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs0Q0FDbkMsQ0FBQzt3Q0FDTCxDQUFDO3dDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDOzRDQUN4QyxJQUFJLEtBQUssR0FBRyxLQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDOzRDQUNoRSxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnREFDaEIsS0FB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QUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUM3QyxDQUFDO3dCQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7b0JBQ2xCLENBQUMsQ0FBQyxDQUFDO29CQUNILElBQUksQ0FBQyxNQUFNLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO3dCQUNsQyxJQUFJLE1BQU0sR0FBc0IsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsQ0FBQzt3QkFDbEQsSUFBSSxJQUFJLEdBQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNqQyxJQUFJLEtBQUssR0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2xDLElBQUksS0FBSyxHQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbEMsR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQzs0QkFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDbkMsQ0FBQzt3QkFDRCxHQUFHLENBQUEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQSxDQUFDOzRCQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNyQyxDQUFDO3dCQUNELEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFBLENBQUM7NEJBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRSxLQUFLLENBQUMsR0FBRyxD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QUFhLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLOzRCQUFqQixJQUFJLElBQUksY0FBQTs0QkFDVCxJQUFJLEdBQUcsR0FBZSxJQUFJLENBQUM7NEJBQzNCLElBQUksS0FBSyxHQUFjLElBQUksS0FBQSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBRXJHLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFFLEtBQUssQ0FBQzs0QkFDckMsU0FBUzs0QkFDVCxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBRSxHQUFHLENBQUM7NEJBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUNsQzt3QkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDMUIsQ0FBQztvQkFDTCx3QkFBQztnQkFBRCxDQWxCQSxBQWtCQyxDQWxCc0MsS0FBQSxVQUFVLEdBa0JoRDtnQkFsQlksMEJBQWlCLG9CQWtCN0IsQ0FBQTtZQUNMLENBQUMsRUExQjBCLFFBQVEsR0FBUixZQUFRLEtBQVIsWUFBUSxRQTBCbEM7UUFBRCxDQUFDLEVBMUJzQixHQUFHLEdBQUgsUUFBRyxLQUFILFFBQUcsUUEwQnpCO0lBQUQsQ0FBQyxFQTFCaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBMEJyQjtBQUFELENBQUMsRUExQlMsT0FBTyxLQUFQLE9BQU8sUUEwQmhCIiwiZmlsZSI6InZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNvbmZpZ3tcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBGaWxsU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLkZpbGxTdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGU9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IExpbmVhckdyYWRpZW50ID0gYW5kcm9pZC5ncmFwaGljcy5MaW5lYXJHcmFkaWVudDtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgVmlld0NvbmZpZ3tcbiAgICAgICAgcHJpdmF0ZSBfZ3Jhdml0eTpHcmF2aXR5O1xuICAgICAgICBwcml2YXRlIF9iYWNrZ3JvdW5kOnN0cmluZ3xGaWxsU3R5bGU7XG4gICAgICAgIHByaXZhdGUgX3N0cm9rZTpTdHJva2VTdHlsZTtcbiAgICAgICAgXG4gICAgICAgIGdldCBiYWNrZ3JvdW5kKCk6c3RyaW5nfEZpbGxTdHlsZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGdldCBzdHJva2UoKTpTdHJva2VTdHlsZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHJva2U7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGdyYXZpdHkoKTpHcmF2aXR5e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyYXZpdHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGdyYXZpdHkodmFsOkdyYXZpdHkpe1xuICAgICAgICAgICAgaWYodmFsICE9IG51bGwgJiYgdmFsICE9IHRoaXMuX2dyYXZpdHkpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2dyYXZpdHkgPSBVdGlsLmFzRW51bSh2YWwsR3Jhdml0eSxudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbjphbnkpe1xuICAgICAgICAgICAgaWYob3B0aW9uLmJhY2tncm91bmQpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbi5iYWNrZ3JvdW5kIGluc3RhbmNlb2YgT2JqZWN0KXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZCA9IG5ldyBGaWxsU3R5bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9uLmJhY2tncm91bmQuZmlsbCBpbnN0YW5jZW9mIE9iamVjdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RPIERPXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9uLmJhY2tncm91bmQuc2hhZG93IGluc3RhbmNlb2YgT2JqZWN0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE8gRE9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kID0gb3B0aW9uLmJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYob3B0aW9uLnN0cm9rZSl7XG4gICAgICAgICAgICAgICAgaWYob3B0aW9uLnN0cm9rZSApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2UgPSBuZXcgU3Ryb2tlU3R5bGUob3B0aW9uLnN0cm9rZS53aWR0aCxvcHRpb24uc3Ryb2tlLmNvbG9yLG9wdGlvbi5zdHJva2UuZGFzaCxvcHRpb24uc3Ryb2tlLmRhc2hvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IG9wdGlvbi5ncmF2aXR5O1xuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jb25maWcuY2FydGVzaWFue1xuICAgIGltcG9ydCBMZWdlbmRUeXBlID0gYW5kcm9pZC50ZXN0LkxlZ2VuZFR5cGU7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IFV0aWwgPWFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcblxuICAgIGV4cG9ydCBjbGFzcyBDb25maWd7XG4gICAgICAgIHByaXZhdGUgX2F4aXM6QXhpc0NvbmZpZ1tdO1xuICAgICAgICBwcml2YXRlIF9sZWdlbmQ6TGVnZW5kQ29uZmlnW107XG4gICAgICAgIHByaXZhdGUgX3Bsb3Q6Vmlld0NvbmZpZztcblxuICAgICAgICBwdWJsaWMgZ2V0IGF4aXMoKTpBeGlzQ29uZmlnW117XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXhpcztcbiAgICAgICAgfVxuICAgICAgXG4gICAgICAgIHB1YmxpYyBnZXQgbGVnZW5kKCk6TGVnZW5kQ29uZmlnW117XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGVnZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldCBwbG90KCk6Vmlld0NvbmZpZ3tcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wbG90O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbjphbnkpe1xuICAgICAgICAgICAgaWYob3B0aW9uLmF4aXMgIT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9heGlzID1bXTtcbiAgICAgICAgICAgICAgICBvcHRpb24uYXhpcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9heGlzLnB1c2gobmV3IEF4aXNDb25maWcoZWxlbWVudCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYob3B0aW9uLmxlZ2VuZCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWdlbmQgPVtdO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5sZWdlbmQuZm9yRWFjaChlbGVtZW50PT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xlZ2VuZC5wdXNoKG5ldyBMZWdlbmRDb25maWcoZWxlbWVudCkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihvcHRpb24ucGxvdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbG90ID0gbmV3IFZpZXdDb25maWcob3B0aW9uLnBsb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEF4aXNDb25maWcgZXh0ZW5kcyBWaWV3Q29uZmlne1xuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb246YW55KXtcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbik7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBMZWdlbmRDb25maWcgZXh0ZW5kcyBWaWV3Q29uZmlne1xuICAgICAgICBwcml2YXRlIF9fdHlwZTpMZWdlbmRUeXBlO1xuICAgICAgICBnZXQgdHlwZSgpOkxlZ2VuZFR5cGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHR5cGUodmFsOkxlZ2VuZFR5cGUpe1xuICAgICAgICAgICAgaWYodmFsICE9IG51bGwgJiYgdmFsICE9IHRoaXMuX190eXBlKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9fdHlwZSA9IFV0aWwuYXNFbnVtKHZhbCxhbmRyb2lkLnRlc3QuTGVnZW5kVHlwZSxudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb246YW55KXtcbiAgICAgICAgICAgIHN1cGVyKG9wdGlvbik7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBvcHRpb24udHlwZTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIFxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLnRlc3R7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBjb25zdCBFdmVudE1lc3NhZ2U6c3RyaW5nID0gJ0V2ZW50TWVzc2FnZSc7XG5cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3R7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZXhwb3J0IGNsYXNzIE1lc3NhZ2VDZW50ZXJ7XG4gICAgICAgIHByaXZhdGUgX21lc3NhZ2VUYWJsZTp7W25hbWU6c3RyaW5nXTpBY3Rpb259XG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBBY3Rpb257XG4gICAgICAgIFxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgVXRpbGl0eSB7XG4gICAgICAgIHN0YXRpYyBtYXgoYXJyOiBudW1iZXJbXSkge1xuICAgICAgICAgICAgdmFyIHZzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB2IG9mIGFycikge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odikgJiYgdiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZzLnB1c2godik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KHRoaXMsIHZzKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgbWluKGFycjogbnVtYmVyW10pIHtcbiAgICAgICAgICAgIHZhciB2cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgdiBvZiBhcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHYpICYmIHYgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2cy5wdXNoKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseSh0aGlzLCB2cyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGlza2V5KGtleTogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5ICE9PSB1bmRlZmluZWQgJiYga2V5ICE9PSBudWxsICYmIHR5cGVvZiAoa2V5KSA9PSAnc3RyaW5nJyAmJiBrZXlbMF0gIT0gJ18nO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNoZWNrQXJyYXlUeXBlKGFycjogYW55W10pOiBib29sZWFuIHtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChhcnIgIT0gbnVsbCk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoYXJyLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgbGV0IHR5cGUgPSB0eXBlb2YgYXJyWzBdO1xuICAgICAgICAgICAgZm9yIChsZXQgdiBvZiBhcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAhPSB0eXBlb2Ygdikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdldFR5cGUodjogYW55KTogRGF0YVR5cGUge1xuICAgICAgICAgICAgbGV0IGRhdGF0eXBlOiBEYXRhVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHYgIT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHYubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgZGF0YXR5cGUgPSBEYXRhVHlwZS5BcnJheTtcbiAgICAgICAgICAgICAgICBpZiAoVXRpbGl0eS5jaGVja0FycmF5VHlwZSh2KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbGl0eS5nZXRUeXBlKHZbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBkYXRhdHlwZSA9IERhdGFUeXBlLk51bWJlcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBkYXRhdHlwZSA9IERhdGFUeXBlLlN0cmluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgZGF0YXR5cGUgPSBEYXRhVHlwZS5Cb29sZWFuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy5hc3NlcnQodHJ1ZSwgXCJWYWx1ZSBjYW4ndCBiZSBPYmplY3QgZXhjZXB0IEFycmF5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGF0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBtZXJnZVNjYWxlKHNjYWxlQTogU2NhbGUsIHNjYWxlQjogU2NhbGUsIGZvcmNlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxldCBzY2FsZTogU2NhbGUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHNjYWxlQS5pZCA9PSBzY2FsZUIuaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NhbGVBIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlICYmIHNjYWxlQiBpbnN0YW5jZW9mIE9yZGluYWxTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZG9tYWludW5pb25zOiBzdHJpbmdbXSA9IF8udW5pb24oc2NhbGVBLmRvbWFpbnMsIHNjYWxlQi5kb21haW5zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlIHx8IChzY2FsZUEuZG9tYWlucy5sZW5ndGggLyBkb21haW51bmlvbnMubGVuZ3RoID4gMC41ICYmIHNjYWxlQi5kb21haW5zLmxlbmd0aCAvIGRvbWFpbnVuaW9ucy5sZW5ndGggPiAwLjUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlQS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUuZG9tYWluKGRvbWFpbnVuaW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChzY2FsZUEgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSAmJiBzY2FsZUIgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSkpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbWluOiBudW1iZXIgPSBNYXRoLm1pbihzY2FsZUEubWluLCBzY2FsZUIubWluKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heDogbnVtYmVyID0gTWF0aC5tYXgoc2NhbGVBLm1heCwgc2NhbGVCLm1heCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYXRlMTogbnVtYmVyID0gTWF0aC5hYnMobWF4IC0gbWluKSAvIChNYXRoLmFicyhzY2FsZUEubWF4IC0gc2NhbGVBLm1pbikpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmF0ZTI6IG51bWJlciA9IE1hdGguYWJzKG1heCAtIG1pbikgLyAoTWF0aC5hYnMoc2NhbGVCLm1heCAtIHNjYWxlQi5taW4pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlIHx8IChyYXRlMSA8IDEwICYmIHJhdGUyIDwgMTApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlQS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUuZG9tYWluKFttaW4sIG1heF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY2FsZUEgaW5zdGFuY2VvZiBMb2dTY2FsZSAmJiBzY2FsZUIgaW5zdGFuY2VvZiBMb2dTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGVBLmxvZ0Jhc2UgPT0gc2NhbGVCLmxvZ0Jhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gc2NhbGVBLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5kb21haW4oW01hdGgubWluKHNjYWxlQS5taW4sIHNjYWxlQi5taW4pLCBNYXRoLm1heChzY2FsZUEubWF4LCBzY2FsZUIubWF4KV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzTWl4ZWRSb3RhdGVkUmVjdChyMTogUm90YXRlUmVjdCwgcjI6IFJvdGF0ZVJlY3QpIHtcbiAgICAgICAgICAgIHZhciBpc21peGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocjEuYW5nbGUgPT0gcjIuYW5nbGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwdCBvZiByMS5wb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWwuSXNQb2ludEluUG9seWdvbihwdCwgcjIucG9pbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNtaXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKE1hdGguc3FydChNYXRoLnBvdyhyMS5jZW50ZXIueCAtIHIyLmNlbnRlci54LCAyKSArIE1hdGgucG93KHIxLmNlbnRlci55IC0gcjIuY2VudGVyLnksIDIpKSA8PSByMS5yYWlkaXVzICsgcjIucmFpZGl1cykge1xuICAgICAgICAgICAgICAgICAgICBpc21peGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNtaXhlZDtcbiAgICAgICAgfVxuXG4gICAgICAgXG5cblxuICAgIH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICBleHBvcnQgY2xhc3MgQ29sb3JVdGlscyB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIF9jb2xvcmluZGV4Om51bWJlciA9IC0xO1xuICAgIHB1YmxpYyBzdGF0aWMgQ29sb3IgOnN0cmluZ1tdPVsncmdiKDI1MSwgMTE4LCAxMjMpJywncmdiKDEyOSwgMjI3LCAyMzgpJywnIzg4YmRlNicsICcjZmJiMjU4JywgJyM5MGNkOTcnLCAnI2Y2YWFjOScsICcjYmZhNTU0JywgJyNiYzk5YzcnLCAnI2VkZGQ0NicsICcjZjA3ZTZlJywgJyM4YzhjOGMnXTtcbiAgICAgICAgLy8gW1wiI0ZGRkZGMFwiLCBcIiNGRkZGRTBcIiwgXCIjRkZGRjAwIFwiLCBcIiNGRkZBRkFcIiwgXCIjRkZGQUYwXCIsIFwiI0ZGRkFDRFwiLCBcIiNGRkY4REMgXCIsIFwiI0ZGRjY4RlwiLCBcIiNGRkY1RUVcIiwgXCIjRkZGMEY1XCIsIFwiI0ZGRUZEQiBcIiwgXCIjRkZFRkQ1XCIsIFwiI0ZGRUM4QlwiLCBcIiNGRkVCQ0RcIiwgXCIjRkZFN0JBIFwiLCBcIiNGRkU0RTFcIiwgXCIjRkZFNEM0XCIsIFwiI0ZGRTRCNVwiLCBcIiNGRkUxRkYgXCIsIFwiI0ZGREVBRFwiLCBcIiNGRkRBQjlcIiwgXCIjRkZENzAwXCIsIFwiI0ZGRDM5QiBcIiwgXCIjRkZDMUMxXCIsIFwiI0ZGQzEyNVwiLCBcIiNGRkMwQ0JcIiwgXCIjRkZCQkZGIFwiLCBcIiNGRkI5MEZcIiwgXCIjRkZCNkMxXCIsIFwiI0ZGQjVDNVwiLCBcIiNGRkFFQjkgXCIsIFwiI0ZGQTU0RlwiLCBcIiNGRkE1MDBcIiwgXCIjRkZBMDdBXCIsIFwiI0ZGOEM2OSBcIiwgXCIjRkY4QzAwXCIsIFwiI0ZGODNGQVwiLCBcIiNGRjgyQUJcIiwgXCIjRkY4MjQ3IFwiLCBcIiNGRjdGNTBcIiwgXCIjRkY3RjI0XCIsIFwiI0ZGN0YwMFwiLCBcIiNGRjcyNTYgXCIsIFwiI0ZGNkVCNFwiLCBcIiNGRjZBNkFcIiwgXCIjRkY2OUI0XCIsIFwiI0ZGNjM0NyBcIiwgXCIjRkY0NTAwXCIsIFwiI0ZGNDA0MFwiLCBcIiNGRjNFOTZcIiwgXCIjRkYzNEIzIFwiLCBcIiNGRjMwMzBcIiwgXCIjRkYxNDkzXCIsIFwiI0ZGMDBGRlwiLCBcIiNGRjAwMDAgXCIsIFwiI0ZERjVFNlwiLCBcIiNGQ0ZDRkNcIiwgXCIjRkFGQUZBXCIsIFwiI0ZBRkFEMiBcIiwgXCIjRkFGMEU2XCIsIFwiI0ZBRUJEN1wiLCBcIiNGQTgwNzJcIiwgXCIjRjhGOEZGIFwiLCBcIiNGN0Y3RjdcIiwgXCIjRjVGRkZBXCIsIFwiI0Y1RjVGNVwiLCBcIiNGNUY1REMgXCIsIFwiI0Y1REVCM1wiLCBcIiNGNEY0RjRcIiwgXCIjRjRBNDYwXCIsIFwiI0YyRjJGMiBcIiwgXCIjRjBGRkZGXCIsIFwiI0YwRkZGMFwiLCBcIiNGMEY4RkZcIiwgXCIjRjBGMEYwIFwiLCBcIiNGMEU2OENcIiwgXCIjRjA4MDgwXCIsIFwiI0VFRUVFMFwiLCBcIiNFRUVFRDEgXCIsIFwiI0VFRUUwMFwiLCBcIiNFRUU5RTlcIiwgXCIjRUVFOUJGXCIsIFwiI0VFRThDRCBcIiwgXCIjRUVFOEFBXCIsIFwiI0VFRTY4NVwiLCBcIiNFRUU1REVcIiwgXCIjRUVFMEU1IFwiLCBcIiNFRURGQ0NcIiwgXCIjRUVEQzgyXCIsIFwiI0VFRDhBRVwiLCBcIiNFRUQ1RDIgXCIsIFwiI0VFRDVCN1wiLCBcIiNFRUQyRUVcIiwgXCIjRUVDRkExXCIsIFwiI0VFQ0JBRCBcIiwgXCIjRUVDOTAwXCIsIFwiI0VFQzU5MVwiLCBcIiNFRUI0QjRcIiwgXCIjRUVCNDIyIFwiLCBcIiNFRUFFRUVcIiwgXCIjRUVBRDBFXCIsIFwiI0VFQTlCOFwiLCBcIiNFRUEyQUQgXCIsIFwiI0VFOUE0OVwiLCBcIiNFRTlBMDBcIiwgXCIjRUU5NTcyXCIsIFwiI0VFODJFRSBcIiwgXCIjRUU4MjYyXCIsIFwiI0VFN0FFOVwiLCBcIiNFRTc5OUZcIiwgXCIjRUU3OTQyIFwiLCBcIiNFRTc2MjFcIiwgXCIjRUU3NjAwXCIsIFwiI0VFNkFBN1wiLCBcIiNFRTZBNTAgXCIsIFwiI0VFNjM2M1wiLCBcIiNFRTVDNDJcIiwgXCIjRUU0MDAwXCIsIFwiI0VFM0IzQiBcIiwgXCIjRUUzQThDXCIsIFwiI0VFMzBBN1wiLCBcIiNFRTJDMkNcIiwgXCIjRUUxMjg5IFwiLCBcIiNFRTAwRUVcIiwgXCIjRUUwMDAwXCIsIFwiI0VERURFRFwiLCBcIiNFQkVCRUIgXCIsIFwiI0VBRUFFQVwiLCBcIiNFOTk2N0FcIiwgXCIjRThFOEU4XCIsIFwiI0U2RTZGQSBcIiwgXCIjRTVFNUU1XCIsIFwiI0UzRTNFM1wiLCBcIiNFMEZGRkZcIiwgXCIjRTBFRUVFIFwiLCBcIiNFMEVFRTBcIiwgXCIjRTBFMEUwXCIsIFwiI0UwNjZGRlwiLCBcIiNERURFREUgXCIsIFwiI0RFQjg4N1wiLCBcIiNEREEwRERcIiwgXCIjRENEQ0RDXCIsIFwiI0RDMTQzQyBcIiwgXCIjREJEQkRCXCIsIFwiI0RCNzA5M1wiLCBcIiNEQUE1MjBcIiwgXCIjREE3MEQ2IFwiLCBcIiNEOUQ5RDlcIiwgXCIjRDhCRkQ4XCIsIFwiI0Q2RDZENlwiLCBcIiNENEQ0RDQgXCIsIFwiI0QzRDNEM1wiLCBcIiNEMkI0OENcIiwgXCIjRDI2OTFFXCIsIFwiI0QxRUVFRSBcIiwgXCIjRDFEMUQxXCIsIFwiI0QxNUZFRVwiLCBcIiNEMDIwOTBcIiwgXCIjQ0ZDRkNGIFwiLCBcIiNDRENEQzFcIiwgXCIjQ0RDREI0XCIsIFwiI0NEQ0QwMFwiLCBcIiNDREM5QzkgXCIsIFwiI0NEQzlBNVwiLCBcIiNDREM4QjFcIiwgXCIjQ0RDNjczXCIsIFwiI0NEQzVCRiBcIiwgXCIjQ0RDMUM1XCIsIFwiI0NEQzBCMFwiLCBcIiNDREJFNzBcIiwgXCIjQ0RCQTk2IFwiLCBcIiNDREI3QjVcIiwgXCIjQ0RCNzlFXCIsIFwiI0NEQjVDRFwiLCBcIiNDREIzOEIgXCIsIFwiI0NEQUY5NVwiLCBcIiNDREFEMDBcIiwgXCIjQ0RBQTdEXCIsIFwiI0NEOUI5QiBcIiwgXCIjQ0Q5QjFEXCIsIFwiI0NEOTZDRFwiLCBcIiNDRDk1MENcIiwgXCIjQ0Q5MTlFIFwiLCBcIiNDRDhDOTVcIiwgXCIjQ0Q4NTNGXCIsIFwiI0NEODUwMFwiLCBcIiNDRDgxNjIgXCIsIFwiI0NENzA1NFwiLCBcIiNDRDY5QzlcIiwgXCIjQ0Q2ODg5XCIsIFwiI0NENjgzOSBcIiwgXCIjQ0Q2NjFEXCIsIFwiI0NENjYwMFwiLCBcIiNDRDYwOTBcIiwgXCIjQ0Q1QzVDIFwiLCBcIiNDRDVCNDVcIiwgXCIjQ0Q1NTU1XCIsIFwiI0NENEYzOVwiLCBcIiNDRDM3MDAgXCIsIFwiI0NEMzMzM1wiLCBcIiNDRDMyNzhcIiwgXCIjQ0QyOTkwXCIsIFwiI0NEMjYyNiBcIiwgXCIjQ0QxMDc2XCIsIFwiI0NEMDBDRFwiLCBcIiNDRDAwMDBcIiwgXCIjQ0NDQ0NDIFwiLCBcIiNDQUZGNzBcIiwgXCIjQ0FFMUZGXCIsIFwiI0M5QzlDOVwiLCBcIiNDN0M3QzcgXCIsIFwiI0M3MTU4NVwiLCBcIiNDNkUyRkZcIiwgXCIjQzY3MTcxXCIsIFwiI0M1QzFBQSBcIiwgXCIjQzRDNEM0XCIsIFwiI0MyQzJDMlwiLCBcIiNDMUZGQzFcIiwgXCIjQzFDRENEIFwiLCBcIiNDMUNEQzFcIiwgXCIjQzFDMUMxXCIsIFwiI0MwRkYzRVwiLCBcIiNCRkVGRkYgXCIsIFwiI0JGQkZCRlwiLCBcIiNCRjNFRkZcIiwgXCIjQkVCRUJFXCIsIFwiI0JEQkRCRCBcIiwgXCIjQkRCNzZCXCIsIFwiI0JDRUU2OFwiLCBcIiNCQ0QyRUVcIiwgXCIjQkM4RjhGIFwiLCBcIiNCQkZGRkZcIiwgXCIjQkFCQUJBXCIsIFwiI0JBNTVEM1wiLCBcIiNCOUQzRUUgXCIsIFwiI0I4QjhCOFwiLCBcIiNCODg2MEJcIiwgXCIjQjdCN0I3XCIsIFwiI0I1QjVCNSBcIiwgXCIjQjRFRUI0XCIsIFwiI0I0Q0RDRFwiLCBcIiNCNDUyQ0RcIiwgXCIjQjNFRTNBIFwiLCBcIiNCM0IzQjNcIiwgXCIjQjJERkVFXCIsIFwiI0IyM0FFRVwiLCBcIiNCMjIyMjIgXCIsIFwiI0IwRTJGRlwiLCBcIiNCMEUwRTZcIiwgXCIjQjBDNERFXCIsIFwiI0IwQjBCMCBcIiwgXCIjQjAzMDYwXCIsIFwiI0FFRUVFRVwiLCBcIiNBREZGMkZcIiwgXCIjQUREOEU2IFwiLCBcIiNBREFEQURcIiwgXCIjQUJBQkFCXCIsIFwiI0FCODJGRlwiLCBcIiNBQUFBQUEgXCIsIFwiI0E5QTlBOVwiLCBcIiNBOEE4QThcIiwgXCIjQTZBNkE2XCIsIFwiI0E1MkEyQSBcIiwgXCIjQTREM0VFXCIsIFwiI0EzQTNBM1wiLCBcIiNBMkNENUFcIiwgXCIjQTJCNUNEIFwiLCBcIiNBMUExQTFcIiwgXCIjQTA1MjJEXCIsIFwiI0EwMjBGMFwiLCBcIiM5RkI2Q0QgXCIsIFwiIzlGNzlFRVwiLCBcIiM5RTlFOUVcIiwgXCIjOUM5QzlDXCIsIFwiIzlCQ0Q5QiBcIiwgXCIjOUIzMEZGXCIsIFwiIzlBRkY5QVwiLCBcIiM5QUNEMzJcIiwgXCIjOUFDMENEIFwiLCBcIiM5QTMyQ0RcIiwgXCIjOTk5OTk5XCIsIFwiIzk5MzJDQ1wiLCBcIiM5OEZCOTggXCIsIFwiIzk4RjVGRlwiLCBcIiM5N0ZGRkZcIiwgXCIjOTZDRENEXCIsIFwiIzk2OTY5NiBcIiwgXCIjOTQ5NDk0XCIsIFwiIzk0MDBEM1wiLCBcIiM5MzcwREJcIiwgXCIjOTE5MTkxIFwiLCBcIiM5MTJDRUVcIiwgXCIjOTBFRTkwXCIsIFwiIzhGQkM4RlwiLCBcIiM4RjhGOEYgXCIsIFwiIzhFRTVFRVwiLCBcIiM4RThFOEVcIiwgXCIjOEU4RTM4XCIsIFwiIzhFMzg4RSBcIiwgXCIjOERFRUVFXCIsIFwiIzhEQjZDRFwiLCBcIiM4QzhDOENcIiwgXCIjOEI4QjgzIFwiLCBcIiM4QjhCN0FcIiwgXCIjOEI4QjAwXCIsIFwiIzhCODk4OVwiLCBcIiM4Qjg5NzAgXCIsIFwiIzhCODg3OFwiLCBcIiM4Qjg2ODJcIiwgXCIjOEI4NjRFXCIsIFwiIzhCODM4NiBcIiwgXCIjOEI4Mzc4XCIsIFwiIzhCODE0Q1wiLCBcIiM4QjdFNjZcIiwgXCIjOEI3RDdCIFwiLCBcIiM4QjdENkJcIiwgXCIjOEI3QjhCXCIsIFwiIzhCNzk1RVwiLCBcIiM4Qjc3NjUgXCIsIFwiIzhCNzUwMFwiLCBcIiM4QjczNTVcIiwgXCIjOEI2OTY5XCIsIFwiIzhCNjkxNCBcIiwgXCIjOEI2NjhCXCIsIFwiIzhCNjUwOFwiLCBcIiM4QjYzNkNcIiwgXCIjOEI1RjY1IFwiLCBcIiM4QjVBMkJcIiwgXCIjOEI1QTAwXCIsIFwiIzhCNTc0MlwiLCBcIiM4QjRDMzkgXCIsIFwiIzhCNDc4OVwiLCBcIiM4QjQ3NURcIiwgXCIjOEI0NzI2XCIsIFwiIzhCNDUxMyBcIiwgXCIjOEI0NTAwXCIsIFwiIzhCM0UyRlwiLCBcIiM4QjNBNjJcIiwgXCIjOEIzQTNBIFwiLCBcIiM4QjM2MjZcIiwgXCIjOEIyNTAwXCIsIFwiIzhCMjMyM1wiLCBcIiM4QjIyNTIgXCIsIFwiIzhCMUM2MlwiLCBcIiM4QjFBMUFcIiwgXCIjOEIwQTUwXCIsIFwiIzhCMDA4QiBcIiwgXCIjOEIwMDAwXCIsIFwiIzhBOEE4QVwiLCBcIiM4QTJCRTJcIiwgXCIjODk2OENEIFwiLCBcIiM4N0NFRkZcIiwgXCIjODdDRUZBXCIsIFwiIzg3Q0VFQlwiLCBcIiM4Nzg3ODcgXCIsIFwiIzg1ODU4NVwiLCBcIiM4NDg0ODRcIiwgXCIjODQ3MEZGXCIsIFwiIzgzOEI4QiBcIiwgXCIjODM4QjgzXCIsIFwiIzgzNkZGRlwiLCBcIiM4MjgyODJcIiwgXCIjN0ZGRkQ0IFwiLCBcIiM3RkZGMDBcIiwgXCIjN0Y3RjdGXCIsIFwiIzdFQzBFRVwiLCBcIiM3RDlFQzAgXCIsIFwiIzdEN0Q3RFwiLCBcIiM3RDI2Q0RcIiwgXCIjN0NGQzAwXCIsIFwiIzdDQ0Q3QyBcIiwgXCIjN0I2OEVFXCIsIFwiIzdBQzVDRFwiLCBcIiM3QThCOEJcIiwgXCIjN0E3QTdBIFwiLCBcIiM3QTY3RUVcIiwgXCIjN0EzNzhCXCIsIFwiIzc5Q0RDRFwiLCBcIiM3ODc4NzggXCIsIFwiIzc3ODg5OVwiLCBcIiM3NkVFQzZcIiwgXCIjNzZFRTAwXCIsIFwiIzc1NzU3NSBcIiwgXCIjNzM3MzczXCIsIFwiIzcxQzY3MVwiLCBcIiM3MTcxQzZcIiwgXCIjNzA4MDkwIFwiLCBcIiM3MDcwNzBcIiwgXCIjNkU4QjNEXCIsIFwiIzZFN0I4QlwiLCBcIiM2RTZFNkUgXCIsIFwiIzZDQTZDRFwiLCBcIiM2QzdCOEJcIiwgXCIjNkI4RTIzXCIsIFwiIzZCNkI2QiBcIiwgXCIjNkE1QUNEXCIsIFwiIzY5OEI2OVwiLCBcIiM2OThCMjJcIiwgXCIjNjk2OTY5IFwiLCBcIiM2OTU5Q0RcIiwgXCIjNjg4MzhCXCIsIFwiIzY4MjI4QlwiLCBcIiM2NkNEQUEgXCIsIFwiIzY2Q0QwMFwiLCBcIiM2NjhCOEJcIiwgXCIjNjY2NjY2XCIsIFwiIzY0OTVFRCBcIiwgXCIjNjNCOEZGXCIsIFwiIzYzNjM2M1wiLCBcIiM2MTYxNjFcIiwgXCIjNjA3QjhCIFwiLCBcIiM1RjlFQTBcIiwgXCIjNUU1RTVFXCIsIFwiIzVENDc4QlwiLCBcIiM1Q0FDRUUgXCIsIFwiIzVDNUM1Q1wiLCBcIiM1QjVCNUJcIiwgXCIjNTk1OTU5XCIsIFwiIzU3NTc1NyBcIiwgXCIjNTU2QjJGXCIsIFwiIzU1NTU1NVwiLCBcIiM1NTFBOEJcIiwgXCIjNTRGRjlGIFwiLCBcIiM1NDhCNTRcIiwgXCIjNTQ1NDU0XCIsIFwiIzUzODY4QlwiLCBcIiM1MjhCOEIgXCIsIFwiIzUyNTI1MlwiLCBcIiM1MTUxNTFcIiwgXCIjNEY5NENEXCIsIFwiIzRGNEY0RiBcIiwgXCIjNEVFRTk0XCIsIFwiIzRENEQ0RFwiLCBcIiM0QjAwODJcIiwgXCIjNEE3MDhCIFwiLCBcIiM0QTRBNEFcIiwgXCIjNDhEMUNDXCIsIFwiIzQ4NzZGRlwiLCBcIiM0ODNEOEIgXCIsIFwiIzQ3NDc0N1wiLCBcIiM0NzNDOEJcIiwgXCIjNDY4MkI0XCIsIFwiIzQ1OEI3NCBcIiwgXCIjNDU4QjAwXCIsIFwiIzQ1NDU0NVwiLCBcIiM0M0NEODBcIiwgXCIjNDM2RUVFIFwiLCBcIiM0MjQyNDJcIiwgXCIjNDE2OUUxXCIsIFwiIzQwRTBEMFwiLCBcIiM0MDQwNDAgXCIsIFwiIzNEM0QzRFwiLCBcIiMzQ0IzNzFcIiwgXCIjM0IzQjNCXCIsIFwiIzNBNUZDRCBcIiwgXCIjMzg4RThFXCIsIFwiIzM4MzgzOFwiLCBcIiMzNjY0OEJcIiwgXCIjMzYzNjM2IFwiLCBcIiMzMzMzMzNcIiwgXCIjMzJDRDMyXCIsIFwiIzMwMzAzMFwiLCBcIiMyRjRGNEYgXCIsIFwiIzJFOEI1N1wiLCBcIiMyRTJFMkVcIiwgXCIjMkIyQjJCXCIsIFwiIzI5MjkyOSBcIiwgXCIjMjgyODI4XCIsIFwiIzI3NDA4QlwiLCBcIiMyNjI2MjZcIiwgXCIjMjQyNDI0IFwiLCBcIiMyMjhCMjJcIiwgXCIjMjE4ODY4XCIsIFwiIzIxMjEyMVwiLCBcIiMyMEIyQUEgXCIsIFwiIzFGMUYxRlwiLCBcIiMxRTkwRkZcIiwgXCIjMUUxRTFFXCIsIFwiIzFDODZFRSBcIiwgXCIjMUMxQzFDXCIsIFwiIzFBMUExQVwiLCBcIiMxOTE5NzBcIiwgXCIjMTg3NENEIFwiLCBcIiMxNzE3MTdcIiwgXCIjMTQxNDE0XCIsIFwiIzEyMTIxMlwiLCBcIiMxMDRFOEIgXCIsIFwiIzBGMEYwRlwiLCBcIiMwRDBEMERcIiwgXCIjMEEwQTBBXCIsIFwiIzA4MDgwOCBcIiwgXCIjMDUwNTA1XCIsIFwiIzAzMDMwM1wiLCBcIiMwMEZGRkZcIiwgXCIjMDBGRjdGIFwiLCBcIiMwMEZGMDBcIiwgXCIjMDBGQTlBXCIsIFwiIzAwRjVGRlwiLCBcIiMwMEVFRUUgXCIsIFwiIzAwRUU3NlwiLCBcIiMwMEVFMDBcIiwgXCIjMDBFNUVFXCIsIFwiIzAwQ0VEMSBcIiwgXCIjMDBDRENEXCIsIFwiIzAwQ0Q2NlwiLCBcIiMwMENEMDBcIiwgXCIjMDBDNUNEIFwiLCBcIiMwMEJGRkZcIiwgXCIjMDBCMkVFXCIsIFwiIzAwOUFDRFwiLCBcIiMwMDhCOEIgXCIsIFwiIzAwOEI0NVwiLCBcIiMwMDhCMDBcIiwgXCIjMDA4NjhCXCIsIFwiIzAwNjg4QiBcIiwgXCIjMDA2NDAwXCIsIFwiIzAwMDBGRlwiLCBcIiMwMDAwRUVcIiwgXCIjMDAwMENEIFwiLCBcIiMwMDAwQUFcIiwgXCIjMDAwMDhCXCIsIFwiIzAwMDA4MFwiXTtcbiAgICAgICAgcHVibGljIHN0YXRpYyBuZXh0Q29sb3IoKTpzdHJpbmd7XG4gICAgICAgICAgICByZXR1cm4gQ29sb3JVdGlscy5Db2xvclsrK0NvbG9yVXRpbHMuX2NvbG9yaW5kZXglQ29sb3JVdGlscy5Db2xvci5sZW5ndGggXTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc3RhdGljIGluZGV4Q29sb3IoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgICAgIGxldCByZXN1bHQ9ICBDb2xvclV0aWxzLkNvbG9yW01hdGguYWJzKGluZGV4KSUoQ29sb3JVdGlscy5Db2xvci5sZW5ndGgtMSkgXTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgIHN0YXRpYyBncmFkaWVudENvbG9yKHN0YXJ0Q29sb3I6IHN0cmluZywgZW5kQ29sb3I6IHN0cmluZywgc3RlcDpudW1iZXIpIHtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHN0YXJ0UkdCID1udWxsO1xuXG4gICAgICAgICAgICBpZihzdGFydENvbG9yLmluZGV4T2YoJ3JnYicpPT0wKXtcbiAgICAgICAgICAgICAgICBzdGFydENvbG9yID0gQ29sb3JVdGlscy5jb2xvckhleChzdGFydENvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBzdGFydFJHQj1Db2xvclV0aWxzLmNvbG9yUmdiKHN0YXJ0Q29sb3IpOy8v6L2s5o2i5Li6cmdi5pWw57uE5qih5byPXG4gICAgICAgICAgICBsZXQgc3RhcnRSID0gc3RhcnRSR0JbMF07XG4gICAgICAgICAgICBsZXQgc3RhcnRHID0gc3RhcnRSR0JbMV07XG4gICAgICAgICAgICBsZXQgc3RhcnRCID0gc3RhcnRSR0JbMl07XG5cbiAgICAgICAgICAgIGxldCBlbmRSR0IgPSBudWxsO1xuICAgICAgICAgICAgaWYoZW5kQ29sb3IuaW5kZXhPZigncmdiJyk9PTApe1xuICAgICAgICAgICAgICAgIGVuZENvbG9yPSBDb2xvclV0aWxzLmNvbG9ySGV4KGVuZENvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBlbmRSR0I9Q29sb3JVdGlscy5jb2xvclJnYihlbmRDb2xvcik7XG4gICAgICAgICAgICBsZXQgZW5kUiA9IGVuZFJHQlswXTtcbiAgICAgICAgICAgIGxldCBlbmRHID0gZW5kUkdCWzFdO1xuICAgICAgICAgICAgbGV0IGVuZEIgPSBlbmRSR0JbMl07XG5cbiAgICAgICAgICAgIGxldCBzUiA9IChlbmRSIC0gc3RhcnRSKSAvIHN0ZXA7Ly/mgLvlt67lgLxcbiAgICAgICAgICAgIGxldCBzRyA9IChlbmRHIC0gc3RhcnRHKSAvIHN0ZXA7XG4gICAgICAgICAgICBsZXQgc0IgPSAoZW5kQiAtIHN0YXJ0QikgLyBzdGVwO1xuXG4gICAgICAgICAgICB2YXIgY29sb3JBcnIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy/orqHnrpfmr4/kuIDmraXnmoRoZXjlgLwgXG4gICAgICAgICAgICAgICAgdmFyIGhleCA9IENvbG9yVXRpbHMuY29sb3JIZXgoJ3JnYignICsgcGFyc2VJbnQoKHNSICogaSArIHN0YXJ0UikpICsgJywnICsgcGFyc2VJbnQoKHNHICogaSArIHN0YXJ0RykpICsgJywnICsgcGFyc2VJbnQoKHNCICogaSArIHN0YXJ0QikpICsgJyknKTtcbiAgICAgICAgICAgICAgICBjb2xvckFyci5wdXNoKGhleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29sb3JBcnI7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0Q29sb3Ioc3RhcnRDb2xvcjpzdHJpbmcsIGVuZENvbG9yOnN0cmluZyx2YWx1ZTpudW1iZXIsc3RhcnQ6bnVtYmVyLGVuZDpudW1iZXIpOnN0cmluZ3tcbiAgICAgICAgICAgIGxldCBzdGFydFJHQiA9IENvbG9yVXRpbHMuY29sb3JSZ2Ioc3RhcnRDb2xvcik7Ly/ovazmjaLkuLpyZ2LmlbDnu4TmqKHlvI9cbiAgICAgICAgICAgIGxldCBzdGFydFIgPSBzdGFydFJHQlswXTtcbiAgICAgICAgICAgIGxldCBzdGFydEcgPSBzdGFydFJHQlsxXTtcbiAgICAgICAgICAgIGxldCBzdGFydEIgPSBzdGFydFJHQlsyXTtcblxuICAgICAgICAgICAgbGV0IGVuZFJHQiA9IENvbG9yVXRpbHMuY29sb3JSZ2IoZW5kQ29sb3IpO1xuICAgICAgICAgICAgbGV0IGVuZFIgPSBlbmRSR0JbMF07XG4gICAgICAgICAgICBsZXQgZW5kRyA9IGVuZFJHQlsxXTtcbiAgICAgICAgICAgIGxldCBlbmRCID0gZW5kUkdCWzJdO1xuXG4gICAgICAgICAgICBsZXQgc1IgPSAoZW5kUiAtIHN0YXJ0UikgLyAoZW5kLXN0YXJ0KTsvL+aAu+W3ruWAvFxuICAgICAgICAgICAgbGV0IHNHID0gKGVuZEcgLSBzdGFydEcpIC8gKGVuZC1zdGFydCk7XG4gICAgICAgICAgICBsZXQgc0IgPSAoZW5kQiAtIHN0YXJ0QikgLyAoZW5kLXN0YXJ0KTtcbiAgICAgICAgICAgIHZhciBoZXggPSBDb2xvclV0aWxzLmNvbG9ySGV4KCdyZ2IoJyArIHBhcnNlSW50KChzUiAqIHZhbHVlICsgc3RhcnRSKSkgKyAnLCcgKyBwYXJzZUludCgoc0cgKiB2YWx1ZSArIHN0YXJ0RykpICsgJywnICsgcGFyc2VJbnQoKHNCICogdmFsdWUgKyBzdGFydEIpKSArICcpJyk7XG4gICAgICAgICAgICByZXR1cm4gaGV4O1xuICAgICAgICB9XG5cblxuICAgICAgc3RhdGljICBjb2xvclJnYihzQ29sb3I6IHN0cmluZykge1xuICAgICAgICAgICAgdmFyIHJlZyA9IC9eIyhbMC05YS1mQS1mXXszfXxbMC05YS1mQS1mXXs2fSkkLztcbiAgICAgICAgICAgIHZhciBzQ29sb3IgPSBzQ29sb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChzQ29sb3IgJiYgcmVnLnRlc3Qoc0NvbG9yKSkge1xuICAgICAgICAgICAgICAgIGlmIChzQ29sb3IubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzQ29sb3JOZXcgPSBcIiNcIjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA0OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNDb2xvck5ldyArPSBzQ29sb3Iuc2xpY2UoaSwgaSArIDEpLmNvbmNhdChzQ29sb3Iuc2xpY2UoaSwgaSArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzQ29sb3IgPSBzQ29sb3JOZXc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8v5aSE55CG5YWt5L2N55qE6aKc6Imy5YC8XG4gICAgICAgICAgICAgICAgdmFyIHNDb2xvckNoYW5nZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNzsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNDb2xvckNoYW5nZS5wdXNoKHBhcnNlSW50KFwiMHhcIiArIHNDb2xvci5zbGljZShpLCBpICsgMikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNDb2xvckNoYW5nZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWwhnJnYuihqOekuuaWueW8j+i9rOaNouS4umhleOihqOekuuaWueW8j1xuICAgICAgc3RhdGljICBjb2xvckhleChyZ2I6IGFueSkge1xuICAgICAgICAgICAgbGV0IF90aGlzczogYW55ID0gcmdiO1xuICAgICAgICAgICAgdmFyIHJlZyA9IC9eIyhbMC05YS1mQS1mXXszfXxbMC05YS1mQS1mXXs2fSkkLztcbiAgICAgICAgICAgIGlmICgvXihyZ2J8UkdCKS8udGVzdChfdGhpc3MpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFDb2xvciA9IF90aGlzcy5yZXBsYWNlKC8oPzoofCl8cmdifFJHQikqL2csIFwiXCIpLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RySGV4ID0gXCIjXCI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhQ29sb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhleDogYW55ID0gTnVtYmVyKGFDb2xvcltpXSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgICAgICBoZXggPSBoZXggPCAxMCA/IDAgKyAnJyArIGhleCA6IGhleDsvLyDkv53or4Hmr4/kuKpyZ2LnmoTlgLzkuLoy5L2NXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZXggPT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXggKz0gaGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0ckhleCArPSBoZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdHJIZXgubGVuZ3RoICE9PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ckhleCA9IF90aGlzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ckhleDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVnLnRlc3QoX3RoaXNzKSkge1xuICAgICAgICAgICAgICAgIHZhciBhTnVtID0gX3RoaXNzLnJlcGxhY2UoLyMvLCBcIlwiKS5zcGxpdChcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoYU51bS5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzcztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFOdW0ubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1IZXggPSBcIiNcIjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhTnVtLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1IZXggKz0gKGFOdW1baV0gKyBhTnVtW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtSGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgZXhwb3J0IGNsYXNzIFJvdGF0ZVJlY3Qge1xuICAgICAgICBwdWJsaWMgYW5nbGU6IG51bWJlcjtcbiAgICAgICAgcHVibGljIGNlbnRlcng6IG51bWJlcjtcbiAgICAgICAgcHVibGljIGNlbnRlcnk6IG51bWJlcjtcbiAgICAgICAgcHVibGljIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgcHVibGljIHBvaW50czogUG9pbnRbXTtcbiAgICAgICAgY29uc3RydWN0b3IoY2VudGVyeD86IG51bWJlciwgY2VudGVyeT86IG51bWJlciwgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlciwgYW5nbGU/OiBudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChjZW50ZXJ4ICE9IG51bGwgJiYgY2VudGVyeSAhPSBudWxsICYmIHdpZHRoICE9IG51bGwgJiYgaGVpZ2h0ICE9IG51bGwgJiYgYW5nbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNlbnRlcnggPSBjZW50ZXJ4O1xuICAgICAgICAgICAgICAgIHRoaXMuY2VudGVyeSA9IGNlbnRlcnk7XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzID0gW25ldyBQb2ludCgpLCBuZXcgUG9pbnQoKSwgbmV3IFBvaW50KCksIG5ldyBQb2ludCgpLCBuZXcgUG9pbnQoKSwgbmV3IFBvaW50KCksIG5ldyBQb2ludCgpLCBuZXcgUG9pbnQoKSwgbmV3IFBvaW50KCldO1xuICAgICAgICAgICAgICAgIGxldCBsdCA9IHRoaXMucG9pbnRzWzBdO1xuICAgICAgICAgICAgICAgIGxldCBydCA9IHRoaXMucG9pbnRzWzFdO1xuICAgICAgICAgICAgICAgIGxldCByYiA9IHRoaXMucG9pbnRzWzJdO1xuICAgICAgICAgICAgICAgIGxldCBsYiA9IHRoaXMucG9pbnRzWzNdO1xuICAgICAgICAgICAgICAgIGxldCBjdCA9IHRoaXMucG9pbnRzWzRdO1xuICAgICAgICAgICAgICAgIGxldCBjYiA9IHRoaXMucG9pbnRzWzVdO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNsID0gdGhpcy5wb2ludHNbNl07XG4gICAgICAgICAgICAgICAgbGV0IGNyID0gdGhpcy5wb2ludHNbN107XG5cbiAgICAgICAgICAgICAgICBjci54ID0gdGhpcy5jZW50ZXJ4ICsgTWF0aC5jb3ModGhpcy5hbmdsZSkgKiB0aGlzLndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICBjci55ID0gdGhpcy5jZW50ZXJ5ICsgTWF0aC5zaW4odGhpcy5hbmdsZSkgKiB0aGlzLndpZHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIGNsLnggPSAyICogdGhpcy5jZW50ZXJ4IC0gY3IueDtcbiAgICAgICAgICAgICAgICBjbC55ID0gMiAqIHRoaXMuY2VudGVyeSAtIGNyLnk7XG5cbiAgICAgICAgICAgICAgICBydC54ID0gY3IueCArIE1hdGguc2luKHRoaXMuYW5nbGUpICogdGhpcy5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIHJ0LnkgPSBjci55IC0gTWF0aC5jb3ModGhpcy5hbmdsZSkgKiB0aGlzLmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgcmIueCA9IDIgKiBjci54IC0gcnQueDtcbiAgICAgICAgICAgICAgICByYi55ID0gMiAqIGNyLnkgLSBydC55O1xuXG4gICAgICAgICAgICAgICAgbGIueCA9IGNsLnggLSBNYXRoLnNpbih0aGlzLmFuZ2xlKSAqIHRoaXMuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICBsYi55ID0gY2wueSArIE1hdGguY29zKHRoaXMuYW5nbGUpICogdGhpcy5oZWlnaHQgLyAyO1xuXG4gICAgICAgICAgICAgICAgbHQueCA9IDIgKiBjbC54IC0gbGIueDtcbiAgICAgICAgICAgICAgICBsdC55ID0gMiAqIGNsLnkgLSBsYi55O1xuXG4gICAgICAgICAgICAgICAgY2IueCA9IChsYi54ICsgcmIueCkgLyAyO1xuICAgICAgICAgICAgICAgIGNiLnkgPSAobGIueSArIHJiLnkpIC8gMjtcbiAgICAgICAgICAgICAgICBjdC54ID0gKGx0LnggKyBydC54KSAvIDI7XG4gICAgICAgICAgICAgICAgY3QueSA9IChsdC55ICsgcnQueSkgLyAyO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNlbnRlciA9IHRoaXMucG9pbnRzWzhdO1xuICAgICAgICAgICAgICAgIGNlbnRlci54ID0gdGhpcy5jZW50ZXJ4O1xuICAgICAgICAgICAgICAgIGNlbnRlci55ID0gdGhpcy5jZW50ZXJ5O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHJhaWRpdXMoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5jZW50ZXIueCAtIHRoaXMubGVmdFRvcC54LCAyKSArIE1hdGgucG93KHRoaXMuY2VudGVyLnkgLSB0aGlzLmxlZnRUb3AueSwgMikpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBvZmZzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHQ6IFBvaW50ID0gdGhpcy5wb2ludHNbaV07XG4gICAgICAgICAgICAgICAgcHQueCArPSB4ICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0geSAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXQgbGVmdFRvcCgpOiBQb2ludCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2ludHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHJpZ2h0VG9wKCk6IFBvaW50IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvaW50c1sxXTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgbGVmdEJvdHRvbSgpOiBQb2ludCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2ludHNbM107XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHJpZ2h0Qm90dG9tKCk6IFBvaW50IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvaW50c1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBjZW50ZXJUb3AoKTogUG9pbnQge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzWzRdO1xuICAgICAgICB9XG4gICAgICAgIGdldCBjZW50ZXJCb3R0b20oKTogUG9pbnQge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzWzVdO1xuICAgICAgICB9XG4gICAgICAgIGdldCBjZW50ZXIoKTogUG9pbnQge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzWzhdO1xuICAgICAgICB9XG4gICAgICAgIGdldCBzdGFydFBvaW50KCk6IFBvaW50IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy5jZW50ZXJ4LCB0aGlzLmNlbnRlcnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvbmUoKTogUm90YXRlUmVjdCB7XG4gICAgICAgICAgICBsZXQgcmVjdDogUm90YXRlUmVjdCA9IG5ldyBSb3RhdGVSZWN0KCk7XG4gICAgICAgICAgICByZWN0LmNlbnRlcnggPSB0aGlzLmNlbnRlcng7XG4gICAgICAgICAgICByZWN0LmNlbnRlcnkgPSB0aGlzLmNlbnRlcnk7XG4gICAgICAgICAgICByZWN0LndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICByZWN0LmFuZ2xlID0gdGhpcy5hbmdsZTtcbiAgICAgICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICByZWN0LnBvaW50cy5wdXNoKHRoaXMucG9pbnRzW2ldLmNsb25lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgUm90YXRlTGluZSB7XG4gICAgICAgIHB1YmxpYyBzdGFydFBvaW50OiBQb2ludDtcbiAgICAgICAgcHVibGljIGVuZFBvaW50OiBQb2ludDtcbiAgICAgICAgcHJpdmF0ZSBfYW5nbGU6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfY3g6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfY3k6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfbGVmdHdpZHRoOiBudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX3JpZ2h0d2lkdGg6IG51bWJlcjtcbiAgICAgICAgY29uc3RydWN0b3IoY3g6IG51bWJlciwgY3k6IG51bWJlciwgbGVmdHdpZHRoOiBudW1iZXIsIHJpZ2h0d2lkdGg6IG51bWJlciwgYW5nbGU6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fY3ggPSBjeDtcbiAgICAgICAgICAgIHRoaXMuX2N5ID0gY3k7XG4gICAgICAgICAgICB0aGlzLl9sZWZ0d2lkdGggPSBsZWZ0d2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9yaWdodHdpZHRoID0gcmlnaHR3aWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICB0aGlzLmVuZFBvaW50ID0gbmV3IFBvaW50KCk7XG4gICAgICAgICAgICB0aGlzLmVuZFBvaW50LnggPSBjeCArIE1hdGguc2luKHRoaXMuX2FuZ2xlKSAqIHJpZ2h0d2lkdGg7XG4gICAgICAgICAgICB0aGlzLmVuZFBvaW50LnkgPSBjeSAtIE1hdGguY29zKHRoaXMuX2FuZ2xlKSAqIHJpZ2h0d2lkdGg7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludC54ID0gY3ggLSBNYXRoLnNpbih0aGlzLl9hbmdsZSkgKiBsZWZ0d2lkdGg7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9pbnQueSA9IGN5ICsgTWF0aC5jb3ModGhpcy5fYW5nbGUpICogbGVmdHdpZHRoO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0e1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgZW51bSBBbmltYXRpb25UeXBle1xuICAgICAgICBXaWR0aCxcbiAgICAgICAgSGVpZ2h0LFxuICAgICAgICBTaXplLFxuICAgICAgICBSYWRpdXMsXG4gICAgICAgIFN3ZWVwLFxuICAgICAgICBBbHBoYVxuICAgIH1cbn0iLCJcblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBlbnVtIEFnZyB7XG4gICAgICAgIFNVTSxcbiAgICAgICAgQVZFUkFHRSxcbiAgICAgICAgQ09VTlQsXG4gICAgICAgIE5PTkVcbiAgICB9XG4gICBcbn0iLCJcblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBlbnVtIE9yZGVyIHtcbiAgICAgICAgRGVzYyxcbiAgICAgICAgQXNjLFxuICAgICAgICBOb25lXG4gICAgfVxuICAgXG59IiwiXG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgZW51bSBTY2FsZVR5cGUge1xuICAgICAgICBMaW5lYXIsXG4gICAgICAgIExvZyxcbiAgICAgICAgT3JkaW5hbCxcbiAgICAgICAgTGF0TG9uXG5cbiAgICB9XG4gICAgXG59IiwibmFtZXNwYWNlIGFuZHJvaWQudGVzdHtcbiAgICBleHBvcnQgZW51bSBEYXRhVHlwZXtcbiAgICAgICAgTnVtYmVyLFxuICAgICAgICBTdHJpbmcsXG4gICAgICAgIE9iamVjdCxcbiAgICAgICAgQXJyYXksXG4gICAgICAgIEJvb2xlYW4sXG4gICAgICAgIERhdGVcbiAgICB9XG59IiwiXG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgZW51bSBDaGFydFR5cGUge1xuICAgICAgICBCYXIsXG4gICAgICAgIExpbmUsXG4gICAgICAgIFNjYXR0ZXIsXG4gICAgICAgIEFyZWEsXG4gICAgICAgIFBpZSxcbiAgICAgICAgU3VuYnVyc3QsXG4gICAgICAgIFRyZWVNYXAsXG4gICAgICAgIFJhZGFyLFxuICAgICAgICBDYW5kbGVzdGlja1xuICAgIH1cbiAgIFxufSIsIlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBlbnVtIEF4aXNUeXBlIHtcbiAgICAgICAgWCxcbiAgICAgICAgWVxuICAgIH1cbiAgICBcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBleHBvcnQgY2xhc3MgVmFsdWUge1xuICAgICAgICBfX3ByZVZhbDogYW55O1xuICAgICAgICBfX3ZhbDogYW55O1xuICAgICAgICBfX2RhdGFUeXBlOiBEYXRhVHlwZTtcbiAgICAgICAgX19uZXh0VmFsOiBhbnk7XG4gICAgICAgIF9fc2NhbGVUeXBlOiBTY2FsZVR5cGU7XG4gICAgICAgIF9faXNNdWx0aXBsZTogYm9vbGVhbjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKHY6IGFueSwgc2NhbGVUeXBlOiBTY2FsZVR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuX192YWwgPSB2O1xuICAgICAgICAgICAgaWYodiBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgICAgICB0aGlzLl9faXNNdWx0aXBsZT0gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuX19pc011bHRpcGxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9fc2NhbGVUeXBlID0gc2NhbGVUeXBlO1xuICAgICAgICAgICAgdGhpcy5fX2RhdGFUeXBlID0gVXRpbGl0eS5nZXRUeXBlKHYpO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIGdldCBzY2FsZVR5cGUoKTogU2NhbGVUeXBlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc2NhbGVUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGdldCBkYXRhVHlwZSgpOiBEYXRhVHlwZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFUeXBlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmb3Igd2hhdCA/XG4gICAgICAgICAqIGFycmF5IHZhbHVlIGZvciBoaWdoIGxvdyBvcGVuIGNsb3NlP1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0IGlzTXVsdGlwbGUoKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2lzTXVsdGlwbGU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3ZhbDtcbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9lbnVtL0FnZy50c1wiIC8+XG5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgRmllbGQge1xuICAgICAgICBwdWJsaWMgYWdncmVnYXRlOiBBZ2c7XG4gICAgICAgIHB1YmxpYyBiaW5kOiBzdHJpbmd8c3RyaW5nW107XG4gICAgICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHB1YmxpYyB0eXBlOiBTY2FsZVR5cGU7XG4gICAgICAgIHB1YmxpYyBsb2dCYXNlOiBudW1iZXI7XG4gICAgICAgIHB1YmxpYyByYW5nZTogYW55W107XG4gICAgICAgIHB1YmxpYyBiYW5kOiBib29sZWFuO1xuICAgICAgICBwdWJsaWMgaW5kZXg6IG51bWJlciA9IDA7XG4gICAgICAgIGdldCBpc011bHRpcGxlKCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmluZCBpbnN0YW5jZW9mIEFycmF5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yKGJpbmQ6IGFueSwgbmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyID0gMCkge1xuICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGUgPSBVdGlsLmFzRW51bShiaW5kLmFnZ3JlZ2F0ZSwgQWdnLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFnZ3JlZ2F0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGUgPSBBZ2cuTk9ORTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBiaW5kczpzdHJpbmdbXT1iaW5kLmZpZWxkLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBpZihiaW5kcyAhPSBudWxsICYmIGJpbmRzLmxlbmd0aCA+MSl7XG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kID0gYmluZHM7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZCA9IGJpbmQuZmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBVdGlsLmFzRW51bShiaW5kLnR5cGUsIFNjYWxlVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBTY2FsZVR5cGUuT3JkaW5hbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nQmFzZSA9IGJpbmQubG9nQmFzZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnJhbmdlID0gYmluZC5yYW5nZTtcblxuICAgICAgICAgICAgdGhpcy5iYW5kID0gYmluZC5iYW5kO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCAmJiAhaXNOYU4oaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVxdWFscyhmaWVsZDogRmllbGQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiBfLmlzRXF1YWwodGhpcywgZmllbGQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgRmlsdGVyIHtcbiAgICAgICAgcHVibGljIHNlcmllczogc3RyaW5nW107XG4gICAgICAgIHB1YmxpYyBydWxlczogUnVsZVtdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHNlcmllczogc3RyaW5nLCBydWxlczogYW55KSB7XG4gICAgICAgICAgICB0aGlzLnNlcmllcyA9IHNlcmllcy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgaWYgKHJ1bGVzICE9IG51bGwgJiYgcnVsZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVsZXMucHVzaChuZXcgUnVsZShydWxlLmZpZWxkLCBydWxlLmV4cHJlc3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBlcXVhbHMoZmllbGQ6IEZpZWxkKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gXy5pc0VxdWFsKHRoaXMsIGZpZWxkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgUnVsZSB7XG4gICAgICAgIHB1YmxpYyBleHByZXNzOiBzdHJpbmc7XG4gICAgICAgIHB1YmxpYyBmaWxlZDogc3RyaW5nO1xuICAgICAgICBjb25zdHJ1Y3RvcihmaWxlZDogc3RyaW5nLCBleHByZXNzOiBzdHJpbmcpIHtcblxuICAgICAgICAgICAgdGhpcy5maWxlZCA9IGZpbGVkO1xuICAgICAgICAgICAgdGhpcy5leHByZXNzID0gZXhwcmVzcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0ZpZWxkLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgIFxuICAgIGV4cG9ydCBjbGFzcyBFbmNvZGluZyB7XG4gICAgICAgIHB1YmxpYyB4OiBGaWVsZDtcbiAgICAgICAgcHVibGljIHk6IEZpZWxkO1xuICAgICAgICBwdWJsaWMgZ2VvcG9zaXRpb246RmllbGQ7XG4gICAgICAgIHB1YmxpYyBjb2xvcjogRmllbGQ7XG4gICAgICAgIHB1YmxpYyBzaXplOiBGaWVsZDtcbiAgICAgICAgcHVibGljIHNoYXBlOiBGaWVsZDtcbiAgICAgICAgcHVibGljIGdyb3VwOiBGaWVsZDtcbiAgICAgICAgcHVibGljIHRleHQ6RmllbGQ7XG4gICAgICAgIHB1YmxpYyB0b29sdGlwOkZpZWxkO1xuICAgICAgICBwdWJsaWMgdmFsdWVzOkZpZWxkW107XG4gICAgICAgIHB1YmxpYyBfc3RhY2s6Ym9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwdWJsaWMgX3JhZGlhbDpib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGNvbnN0cnVjdG9yKGVuY29kaW5nOiBhbnkpIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZy54KSB7XG4gICAgICAgICAgICAgICAgdGhpcy54ID0gbmV3IEZpZWxkKGVuY29kaW5nLngsICd4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlbmNvZGluZy5nZW9wb3NpdGlvbil7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW9wb3NpdGlvbiA9IG5ldyBGaWVsZChlbmNvZGluZy5nZW9wb3NpdGlvbiwnZ2VvcG9zaXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmNvZGluZy55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ID0gbmV3IEZpZWxkKGVuY29kaW5nLnksICd5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcuY29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gbmV3IEZpZWxkKGVuY29kaW5nLmNvbG9yLCAnY29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmNvZGluZy5zaGFwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBuZXcgRmllbGQoZW5jb2Rpbmcuc2hhcGUsICdzaGFwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuY29kaW5nLnNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBuZXcgRmllbGQoZW5jb2Rpbmcuc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVuY29kaW5nLnRvb2x0aXApe1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBGaWVsZChlbmNvZGluZy50b29sdGlwLCd0b29sdGlwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlbmNvZGluZy50ZXh0KXtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgRmllbGQoZW5jb2RpbmcudGV4dCwndGV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuY29kaW5nLmdyb3VwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cCA9IG5ldyBGaWVsZChlbmNvZGluZy5ncm91cCwgJ2dyb3VwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcudmFsdWVzICYmIGVuY29kaW5nLnZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcyA9W107XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8ZW5jb2RpbmcudmFsdWVzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZW5jb2RpbmcudmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKG5ldyBGaWVsZCh2YWx1ZSx2YWx1ZS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZW5jb2Rpbmcuc3RhY2sgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhY2sgPSBlbmNvZGluZy5zdGFjayA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihlbmNvZGluZy5yYWRpYWwgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmFkaWFsID0gZW5jb2RpbmcucmFkaWFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgSXRlbSB7XG4gICAgICAgIHB1YmxpYyBnZW9wb3NpdGlvbjpWYWx1ZTtcbiAgICAgICAgcHVibGljIHg6IFZhbHVlO1xuICAgICAgICBwdWJsaWMgeTogVmFsdWU7XG4gICAgICAgIHB1YmxpYyBzaGFwZTogVmFsdWU7XG4gICAgICAgIHB1YmxpYyBjb2xvcjogVmFsdWU7XG4gICAgICAgIHB1YmxpYyBzaXplOiBWYWx1ZTtcbiAgICAgICAgcHVibGljIHRleHQ6IFZhbHVlO1xuICAgICAgICBwdWJsaWMgdG9vbHRpcDogVmFsdWU7XG4gICAgICAgIHB1YmxpYyBncm91cDpWYWx1ZTtcbiAgICAgICAgcHVibGljIGdldCBpZCgpOnN0cmluZ3tcbiAgICAgICAgICAgIC8vIHJldHVybiBVdGlsaXR5Lkhhc2hDb2RlKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWwuSGFzaENvZGUoVXRpbC5IYXNoQ29kZSh0aGlzLngpK1V0aWwuSGFzaENvZGUodGhpcy5ncm91cCkpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMueC52YWx1ZSArXCIgXCIgKyB0aGlzLmdyb3VwLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufSIsIlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbntcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGNsYXNzIFRyYW5zRm9ybXtcbiAgICAgICAgXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBpbXBvcnQgRGVidWcgPSBhbmRyb2lkLkRlYnVnXG4gICAgZXhwb3J0IGNsYXNzIFNlcmllcyB7XG4gICAgICAgIHByaXZhdGUgX19uYW1lOiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgX19pbmRleDogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9fZGF0YTogYW55W107XG4gICAgICAgIHByaXZhdGUgX19lbmNvZGluZzogRW5jb2Rpbmc7XG4gICAgICAgIHByaXZhdGUgX19wYWlyczogeyBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W107XG4gICAgICAgIHByaXZhdGUgX19wb2ludHM6IEl0ZW1bXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9fY2hhcnRUeXBlOiBDaGFydFR5cGUgPSBDaGFydFR5cGUuQmFyO1xuICAgICAgICBwdWJsaWMgZW5hYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcHVibGljIHNob3dsYWJlbHM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgcHVibGljIGdldCBpZCgpOnN0cmluZ3tcbiAgICAgICAgICAgIHJldHVybiBVdGlsLkhhc2hDb2RlKHRoaXMuX19uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3RvcihlbmNvZGluZzogRW5jb2RpbmcsIHNlcmllczogYW55LCBpbmRleDogbnVtYmVyLGNoYXJ0dHlwZTpDaGFydFR5cGUpIHtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChlbmNvZGluZyAhPSBudWxsKTtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChzZXJpZXMgIT0gbnVsbCk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoc2VyaWVzLmRhdGEgaW5zdGFuY2VvZiBBcnJheSwgXCJTZXJpZXMgbXVzdCBiZSBBcnJheVwiKTtcbiAgICAgICAgICAgIHRoaXMuX19kYXRhID0gc2VyaWVzLmRhdGE7XG4gICAgICAgICAgICB0aGlzLl9fbmFtZSA9IHNlcmllcy5uYW1lO1xuICAgICAgICAgICAgdGhpcy5fX2luZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9fY2hhcnRUeXBlID0gVXRpbC5hc0VudW0oc2VyaWVzLmNoYXJ0dHlwZSwgQ2hhcnRUeXBlLG51bGwpO1xuICAgICAgICAgICAgaWYodGhpcy5fX2NoYXJ0VHlwZSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2hhcnRUeXBlID0gY2hhcnR0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgICAgICB0aGlzLl9fcGFpcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9fZW5jb2RpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoVXRpbGl0eS5pc2tleShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlZDogRmllbGQgPSB0aGlzLl9fZW5jb2Rpbmdba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBTY2FsZSA9IHRoaXMuX19jcmVhdGVTY2FsZShmaWxlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19wYWlycy5wdXNoKHsgZmlsZWQ6IGZpbGVkLCBzY2FsZTogc2NhbGV9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX19kYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3BvaW50cy5wdXNoKHRoaXMuX19hbmFseXNlSXRlbSh0aGlzLl9fcGFpcnMsIGl0ZW0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2YgdGhpcy5fX3BhaXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVkOiBGaWVsZCA9IHBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBTY2FsZSA9IHBhaXIuc2NhbGU7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkLm5hbWUgIT0gJ3gnICYmIGZpbGVkLm5hbWUgIT0gJ3knICYmIGZpbGVkLnJhbmdlICE9IG51bGwgJiYgZmlsZWQucmFuZ2UubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSBpbnN0YW5jZW9mIExpbmVhclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5yYW5nZShmaWxlZC5yYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NhbGUgaW5zdGFuY2VvZiBMb2dTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoZmlsZWQucmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZWQuYmFuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLnJhbmdlQm91bmRzKGZpbGVkLnJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoZmlsZWQucmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNjYWxlLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX19hbmFseXNlSXRlbShwYWlyczogeyBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W10sIGl0ZW06IGFueSk6IEl0ZW0ge1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGl0ZW0gIT0gbnVsbCk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQodHlwZW9mIGl0ZW0gPT0gJ29iamVjdCcpO1xuICAgICAgICAgICAgbGV0IHZhbHVlczogSXRlbSA9IG5ldyBJdGVtKCk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoIShpdGVtIGluc3RhbmNlb2YgQXJyYXkpKTtcbiAgICAgICAgICAgIHZhbHVlcy5ncm91cCA9IG5ldyBWYWx1ZSh0aGlzLl9fbmFtZSxTY2FsZVR5cGUuT3JkaW5hbCk7XG4gICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVkOiBGaWVsZCA9IHBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBTY2FsZSA9IHBhaXIuc2NhbGU7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlOiBWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkLmJpbmQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBWYWx1ZShbaXRlbVtmaWxlZC5iaW5kWzBdXSwgaXRlbVtmaWxlZC5iaW5kWzFdXV0sIGZpbGVkLnR5cGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3IFZhbHVlKGl0ZW1bZmlsZWQuYmluZF0sIGZpbGVkLnR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZXNbZmlsZWQubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChmaWxlZC5iaW5kKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1heDogbnVtYmVyID0gVXRpbGl0eS5tYXgoW2l0ZW1bZmlsZWQuYmluZF0sIHNjYWxlLm1heF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pbjogbnVtYmVyID0gVXRpbGl0eS5taW4oW2l0ZW1bZmlsZWQuYmluZF0sIHNjYWxlLm1pbl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUuZG9tYWluKFttaW4sIG1heF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjYWxlIGluc3RhbmNlb2YgTG9nU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXg6IG51bWJlciA9IFV0aWxpdHkubWF4KFtpdGVtW2ZpbGVkLmJpbmRdLCBzY2FsZS5tYXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaW46IG51bWJlciA9IFV0aWxpdHkubWluKFtpdGVtW2ZpbGVkLmJpbmRdLCBzY2FsZS5taW5dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLmRvbWFpbihbbWluLCBtYXhdKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZihzY2FsZS5kb21haW5zLmluZGV4T2YoaXRlbVtmaWxlZC5iaW5kXSkgPCAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5kb21haW5zLnB1c2goaXRlbVtmaWxlZC5iaW5kXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVkLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlIGluc3RhbmNlb2YgbWFwLk1hcE9yZGluYWxTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHZhbHVlLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBmb3IgKGxldCB2IG9mIHZhbHVlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHNjYWxlLmRvbWFpbnMucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLmRvbWFpbnMucHVzaCh2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIF9yZWZyZXNoKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgcGFpciBvZiB0aGlzLl9fcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBwYWlyLnNjYWxlLmRvbWFpbihbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBwdCBvZiB0aGlzLl9fcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcGFpciBvZiB0aGlzLl9fcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVkOiBGaWVsZCA9IHBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZTogU2NhbGUgPSBwYWlyLnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcHRbZmlsZWQubmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4OiBudW1iZXIgPSBVdGlsaXR5Lm1heCh2YWx1ZS5pc011bHRpcGxlID8gdmFsdWUudmFsdWUuY29uY2F0KFtzY2FsZS5tYXhdKSA6IFt2YWx1ZS52YWx1ZSwgc2NhbGUubWF4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWluOiBudW1iZXIgPSBVdGlsaXR5Lm1pbih2YWx1ZS5pc011bHRpcGxlID8gdmFsdWUudmFsdWUuY29uY2F0KFtzY2FsZS5taW5dKSA6IFt2YWx1ZS52YWx1ZSwgc2NhbGUubWluXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5kb21haW4oW21pbiwgbWF4XSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NhbGUgaW5zdGFuY2VvZiBMb2dTY2FsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwdFtmaWxlZC5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXg6IG51bWJlciA9IFV0aWxpdHkubWF4KHZhbHVlLmlzTXVsdGlwbGUgPyB2YWx1ZS52YWx1ZS5jb25jYXQoW3NjYWxlLm1heF0pIDogW3ZhbHVlLnZhbHVlLCBzY2FsZS5tYXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaW46IG51bWJlciA9IFV0aWxpdHkubWluKHZhbHVlLmlzTXVsdGlwbGUgPyB2YWx1ZS52YWx1ZS5jb25jYXQoW3NjYWxlLm1pbl0pIDogW3ZhbHVlLnZhbHVlLCBzY2FsZS5taW5dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLmRvbWFpbihbbWluLCBtYXhdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY2FsZSBpbnN0YW5jZW9mIE9yZGluYWxTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcHRbZmlsZWQubmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHYgb2YgdmFsdWUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUuZG9tYWlucy5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUuZG9tYWlucy5wdXNoKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NhbGUgaW5zdGFuY2VvZiBtYXAuTWFwT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwdFtmaWxlZC5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdiBvZiB2YWx1ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5kb21haW5zLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5kb21haW5zLnB1c2godmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19jcmVhdGVTY2FsZShmaWxlZDogRmllbGQpOlNjYWxle1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGZpbGVkICE9IG51bGwpO1xuXG4gICAgICAgICAgICBsZXQgc2NhbGU6IFNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAoZmlsZWQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU2NhbGVUeXBlLkxpbmVhcjpcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBuZXcgTGluZWFyU2NhbGUoZmlsZWQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2NhbGVUeXBlLk9yZGluYWw6XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IE9yZGluYWxTY2FsZShmaWxlZC5uYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNjYWxlVHlwZS5Mb2c6XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IExvZ1NjYWxlKGZpbGVkLmxvZ0Jhc2UsIGZpbGVkLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNjYWxlVHlwZS5MYXRMb246XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IG1hcC5NYXBPcmRpbmFsU2NhbGUoZmlsZWQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmFzc2VydChmYWxzZSwgZmlsZWQudHlwZSArIFwiIFNjYWxlVHlwZSBoYXMgbm90IGJlZW4gaW1wbGVtZW50IVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgZ2V0IGRhdGEoKTogYW55W10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBzY2FsZVBhaXJzKCk6IHsgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfVtdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcGFpcnM7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcG9pbnRzKCk6IEl0ZW1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3BvaW50cztcbiAgICAgICAgfVxuICAgICAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19wb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGdldCBjaGFydFR5cGUoKTogQ2hhcnRUeXBlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY2hhcnRUeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGluZGV4KCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2luZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0U2NhbGUobmFtZTogc3RyaW5nKTogU2NhbGUge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gXy5maW5kSW5kZXgodGhpcy5fX3BhaXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmZpbGVkLm5hbWUgPT0gbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcGFpcnNbaW5kZXhdLnNjYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgY2xvbmUoKTogU2VyaWVzIHtcbiAgICAgICAgICAgIGxldCBzZXJpZXMgPSBfLmNsb25lRGVlcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBzZXJpZXM7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IENvbmZpZyA9IGFuZHJvaWQudGVzdC5jb25maWcuY2FydGVzaWFuLkNvbmZpZztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgRGF0YU1vZGVsIHtcbiAgICAgICAgcHJpdmF0ZSBfX2NvbmZpZzpDb25maWc7XG4gICAgICAgIHByaXZhdGUgX19lbmNvZGluZzogRW5jb2Rpbmc7XG4gICAgICAgIHByaXZhdGUgX19maWx0ZXI6IEZpbHRlcjtcbiAgICAgICAgcHJpdmF0ZSBfX2RhdGE6IGFueTtcbiAgICAgICAgcHJpdmF0ZSBfX3NlcmllczogU2VyaWVzW107XG4gICAgICAgIHByaXZhdGUgX19hbGxTZXJpZXM6IFNlcmllc1tdO1xuICAgICAgICBwcml2YXRlIF9fY2hhcnRUeXBlczogQ2hhcnRUeXBlW10gPSBbXTtcbiAgICAgICAgcHJpdmF0ZSBfX2NoYXJ0VHlwZTpDaGFydFR5cGU7XG4gICAgICAgIHByb3RlY3RlZCBfX3NjYWxlUGFpcnM6IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfVtdO1xuICAgICAgICBcbiAgICAgICAgY29uc3RydWN0b3IoZGF0YTogYW55KSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLl9fY2hhcnRUeXBlID0gVXRpbC5hc0VudW0oZGF0YS5jaGFydHR5cGUsQ2hhcnRUeXBlLG51bGwpO1xuICAgICAgICAgICAgaWYodGhpcy5fX2NoYXJ0VHlwZSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2hhcnRUeXBlID0gQ2hhcnRUeXBlLkJhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19lbmNvZGluZyA9IHRoaXMuX2FuYWx5c2VFbmNvZGluZyh0aGlzLl9fZGF0YS5lbmNvZGluZyk7XG4gICAgICAgICAgICB0aGlzLl9hbmFseXNlQ29uZmlnKHRoaXMuX19kYXRhLmNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLl9hbmFseXNlRmlsdGVyKGRhdGEuZmlsdGVyKTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5hbHlzZUNvbmZpZyhjb25maWc6YW55KXtcbiAgICAgICAgICAgIGlmKGNvbmZpZyE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX19jb25maWcgPSBuZXcgQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hbmFseXNlRW5jb2RpbmcoZW5jb2RlOiBhbnkpOiBFbmNvZGluZyB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVuY29kaW5nKGVuY29kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0IGNoYXJ0VHlwZXMoKTogQ2hhcnRUeXBlW10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jaGFydFR5cGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5hbHlzZVNlcmllcyhzZXJpZXNfZGF0YTogYW55LCBlbmNvZGluZzogRW5jb2RpbmcpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX19zZXJpZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX19hbGxTZXJpZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzX2RhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWVzaXRlbSA9IHNlcmllc19kYXRhW2ldO1xuICAgICAgICAgICAgICAgIGxldCBzZXI6IFNlcmllcyA9IG5ldyBTZXJpZXMoZW5jb2RpbmcsIHNlcmllc2l0ZW0sIGksdGhpcy5fX2NoYXJ0VHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLl9fZmlsdGVyLnNlcmllcy5pbmRleE9mKHNlcmllc2l0ZW0ubmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXIuZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3Nlcmllcy5wdXNoKHNlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fY2hhcnRUeXBlcy5pbmRleE9mKHNlci5jaGFydFR5cGUpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0VHlwZXMucHVzaChzZXIuY2hhcnRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlci5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fX2FsbFNlcmllcy5wdXNoKHNlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgIFxuXG4gICAgICAgIHB1YmxpYyByZWZyZXNoKCkge1xuICAgICAgICAgICAgdGhpcy5fYW5hbHlzZVNlcmllcyh0aGlzLl9fZGF0YS5zZXJpZXMsIHRoaXMuX19lbmNvZGluZyk7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVMYXlvdXRTY2FsZXModGhpcy5lbmNvZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hbmFseXNlRmlsdGVyKGZpbHRlcjogYW55KSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZmlsdGVyID0gbmV3IEZpbHRlcihmaWx0ZXIuc2VyaWVzLCBmaWx0ZXIucnVsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlTGF5b3V0U2NhbGVzKGVuY29kaW5nOiBFbmNvZGluZykge1xuICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9fc2VyaWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFjayhDaGFydFR5cGUuQmFyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFjayhDaGFydFR5cGUuTGluZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhY2soQ2hhcnRUeXBlLkFyZWEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrKENoYXJ0VHlwZS5TY2F0dGVyKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX19zZXJpZXMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXJpZXM6IFNlcmllcyA9IHRoaXMuX19zZXJpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0X3NlcmllczogU2VyaWVzID0gdGhpcy5fX3Nlcmllc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXJBIG9mIHNlcmllcy5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWlyQiBvZiBuZXh0X3Nlcmllcy5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhaXJBLmZpbGVkLmVxdWFscyhwYWlyQi5maWxlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVkID0gcGFpckEuZmlsZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb3JjZTogYm9vbGVhbiA9IHRoaXMuZW5jb2RpbmcuX3N0YWNrICYmIHBhaXJBLmZpbGVkLm5hbWUgPT0gJ3knO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5mb0E6IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfSA9IHRoaXMuX19nZXRTY2FsZUluZm9ieW5hbWUocGFpckEuZmlsZWQubmFtZSwgc2VyaWVzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5mb0I6IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfSA9IHRoaXMuX19nZXRTY2FsZUluZm9ieW5hbWUocGFpckIuZmlsZWQubmFtZSwgbmV4dF9zZXJpZXMubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvQSA9PSBudWxsICYmIGluZm9CID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IFV0aWxpdHkubWVyZ2VTY2FsZShwYWlyQS5zY2FsZSwgcGFpckIuc2NhbGUsIGZvcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7IHNlcmllczogW3Nlcmllcy5uYW1lLCBuZXh0X3Nlcmllcy5uYW1lXSwgZmlsZWQ6IGZpbGVkLCBzY2FsZTogc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtzZXJpZXMubmFtZV0sIGZpbGVkOiBwYWlyQS5maWxlZCwgc2NhbGU6IHBhaXJBLnNjYWxlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtuZXh0X3Nlcmllcy5uYW1lXSwgZmlsZWQ6IHBhaXJCLmZpbGVkLCBzY2FsZTogcGFpckIuc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mb0EgPT0gbnVsbCAmJiBpbmZvQiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGUgPSBVdGlsaXR5Lm1lcmdlU2NhbGUocGFpckEuc2NhbGUsIGluZm9CLnNjYWxlLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9CLnNjYWxlID0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb0Iuc2VyaWVzLnB1c2goc2VyaWVzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycy5wdXNoKHsgc2VyaWVzOiBbc2VyaWVzLm5hbWVdLCBmaWxlZDogcGFpckEuZmlsZWQsIHNjYWxlOiBwYWlyQS5zY2FsZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmZvQSAhPSBudWxsICYmIGluZm9CID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IFV0aWxpdHkubWVyZ2VTY2FsZShwYWlyQi5zY2FsZSwgaW5mb0Euc2NhbGUsIGZvcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb0Euc2NhbGUgPSBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvQS5zZXJpZXMucHVzaChuZXh0X3Nlcmllcy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7IHNlcmllczogW25leHRfc2VyaWVzLm5hbWVdLCBmaWxlZDogcGFpckIuZmlsZWQsIHNjYWxlOiBwYWlyQi5zY2FsZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzZXIgb2YgdGhpcy5fX3Nlcmllcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHNlci5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGUgPSB0aGlzLl9nZXRTY2FsZUJ5TmFtZShwYWlyLmZpbGVkLm5hbWUsIHNlci5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFpci5zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX19zZXJpZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHRoaXMuX19zZXJpZXNbMF0uc2NhbGVQYWlycykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycy5wdXNoKHsgc2VyaWVzOiBbdGhpcy5fX3Nlcmllc1swXS5uYW1lXSwgZmlsZWQ6IHBhaXIuZmlsZWQsIHNjYWxlOiBwYWlyLnNjYWxlLmNsb25lKCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc3RhY2soY2hhcnRUeXBlOiBDaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVuY29kaW5nLl9zdGFjaykge1xuICAgICAgICAgICAgICAgIGxldCBuZWdhdGl2ZTogYW55ID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHBvc2l0aXZlOiBhbnkgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXJBID0gdGhpcy5zZXJpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXJBLmNoYXJ0VHlwZSA9PT0gY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRTZXJpZXNTdGFjayhzZXJBLCBwb3NpdGl2ZSwgbmVnYXRpdmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfX2dldFNjYWxlSW5mb2J5bmFtZShmaWxlZG5hbWU6IHN0cmluZywgc2VyaWVzbmFtZTogc3RyaW5nKTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9IHtcbiAgICAgICAgICAgIGxldCBpbmZvOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH0gPSBfLmZpbmQodGhpcy5fX3NjYWxlUGFpcnMsIChpdGVtOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5zZXJpZXMuaW5kZXhPZihzZXJpZXNuYW1lKSA+PSAwICYmIGZpbGVkbmFtZSA9PSBpdGVtLmZpbGVkLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIF9nZXRTY2FsZUJ5TmFtZShmaWxlZG5hbWU6IHN0cmluZywgc2VyaWVzbmFtZTogc3RyaW5nKTogU2NhbGUge1xuICAgICAgICAgICAgcmV0dXJuIF8ucmVzdWx0KF8uZmluZCh0aGlzLl9fc2NhbGVQYWlycywgKGl0ZW06IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnNlcmllcy5pbmRleE9mKHNlcmllc25hbWUpID49IDAgJiYgZmlsZWRuYW1lID09IGl0ZW0uZmlsZWQubmFtZTtcbiAgICAgICAgICAgIH0pLCBcInNjYWxlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc2V0U2VyaWVzU3RhY2soc2VyaWVzOiBTZXJpZXMsIHBvczogYW55LCBuZWc6IGFueSkge1xuICAgICAgICAgICAgbGV0IHNjYWxlWF9BOiBTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneCcpO1xuXG4gICAgICAgICAgICBpZiAoc2NhbGVYX0EgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwdCBvZiBzZXJpZXMucG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZWd2YWx1ZTogbnVtYmVyID0gbmVnW3B0LngudmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9zdmFsdWU6IG51bWJlciA9IHBvc1twdC54LnZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lZ3ZhbHVlID09IG51bGwpIHsgbmVndmFsdWUgPSAwOyBuZWdbcHQueC52YWx1ZV0gPSAwOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N2YWx1ZSA9PSBudWxsKSB7IHBvc3ZhbHVlID0gMDsgcG9zW3B0LngudmFsdWVdID0gMDsgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBpc05lZzogYm9vbGVhbiA9IHB0LnkudmFsdWUgPCAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRZOiBudW1iZXIgPSBpc05lZyA/IG5lZ3ZhbHVlIDogcG9zdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmRZOiBudW1iZXIgPSBzdGFydFkgKyBwdC55LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpc05lZyA/IG5lZ1twdC54LnZhbHVlXSA9IGVuZFkgOiBwb3NbcHQueC52YWx1ZV0gPSBlbmRZO1xuICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXRQb2ludC55ID0gbmV3IFZhbHVlKFtzdGFydFksIGVuZFldLCB0YXJnZXRQb2ludC55LnNjYWxlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlcmllc0IucG9pbnRzW2luZGV4XSA9IHRhcmdldFBvaW50O1xuICAgICAgICAgICAgICAgICAgICBwdC55ID0gbmV3IFZhbHVlKFtzdGFydFksIGVuZFldLCBwdC55LnNjYWxlVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VyaWVzLl9yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRTZXJpZXNCeVR5cGUoY2hhcnR0eXBlOiBDaGFydFR5cGUpOiBTZXJpZXNbXSB7XG4gICAgICAgICAgICBsZXQgc2VyaWVzOiBTZXJpZXNbXSA9IF8uZmlsdGVyKHRoaXMuX19zZXJpZXMsIChzZXIpID0+IHsgcmV0dXJuIHNlci5jaGFydFR5cGUgPT09IGNoYXJ0dHlwZTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHNlcmllcygpOiBTZXJpZXNbXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NlcmllcztcbiAgICAgICAgfVxuICAgICAgICBnZXQgYWxsU2VyaWVzKCk6IFNlcmllc1tdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fYWxsU2VyaWVzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBlbmNvZGluZygpOiBFbmNvZGluZyB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VuY29kaW5nO1xuICAgICAgICB9XG4gICAgICAgIGdldCBmaWx0ZXIoKTogRmlsdGVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHNjYWxlUGFpcnMoKTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zY2FsZVBhaXJzO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5oaWVyYXJjaGljYWwge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydCBjbGFzcyBWYWx1ZSB7XG4gICAgICAgIF9fdmFsOiBhbnk7XG4gICAgICAgIF9fZGF0YVR5cGU6IERhdGFUeXBlO1xuICAgICAgICBfX3NjYWxlVHlwZTogU2NhbGVUeXBlO1xuICAgICAgICBjb25zdHJ1Y3Rvcih2OiBhbnksIHNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gICAgICAgICAgICB0aGlzLl9fdmFsID0gdjtcbiAgICAgICAgICAgIHRoaXMuX19zY2FsZVR5cGUgPSBzY2FsZVR5cGU7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YVR5cGUgPSBVdGlsaXR5LmdldFR5cGUodik7XG4gICAgICAgICAgICBpZih0aGlzLl9fc2NhbGVUeXBlID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHN3aXRjaCh0aGlzLl9fZGF0YVR5cGUpe1xuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLk51bWJlcjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEYXRhVHlwZS5EYXRlOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2NhbGVUeXBlID0gU2NhbGVUeXBlLkxpbmVhcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRGF0YVR5cGUuU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIERhdGFUeXBlLkJvb2xlYW46XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVR5cGUgPSBTY2FsZVR5cGUuT3JkaW5hbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXQgc2NhbGVUeXBlKCk6IFNjYWxlVHlwZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlVHlwZTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgZGF0YVR5cGUoKTogRGF0YVR5cGUge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhVHlwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB2YWx1ZSgpOiBhbnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX192YWw7XG4gICAgICAgIH1cblxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2FsIHtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGNsYXNzIEZpZWxkIHtcbiAgICAgICAgcHVibGljIGFnZ3JlZ2F0ZTogQWdnO1xuICAgICAgICBwdWJsaWMgYmluZDogc3RyaW5nO1xuICAgICAgICBwdWJsaWMgbmFtZTpzdHJpbmc7XG4gICAgICAgIHB1YmxpYyByYW5nZTphbnlbXTtcbiAgICAgICAgcHVibGljIGJhbmQ6Ym9vbGVhbjtcbiAgICAgICAgcHVibGljIHR5cGU6U2NhbGVUeXBlO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGJpbmQ6IGFueSxuYW1lOnN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGUgPSBVdGlsLmFzRW51bShiaW5kLmFnZ3JlZ2F0ZSxBZ2csdHJ1ZSk7XG4gICAgICAgICAgICBpZih0aGlzLmFnZ3JlZ2F0ZSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFnZ3JlZ2F0ZSA9IEFnZy5OT05FO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iaW5kID0gYmluZC5maWVsZDtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnJhbmdlID0gYmluZC5yYW5nZTtcbiAgICAgICAgICAgIHRoaXMuYmFuZCA9IGJpbmQuYmFuZDtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IFV0aWwuYXNFbnVtKGJpbmQudHlwZSxTY2FsZVR5cGUsdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZXF1YWxzKGZpZWxkOkZpZWxkKTpib29sZWFue1xuICAgICAgICAgICAgcmV0dXJuIF8uaXNFcXVhbCh0aGlzLGZpZWxkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2Fse1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgSXRlbXtcbiAgICAgICAgcHVibGljIGdldCBpZCgpOnN0cmluZ3tcbiAgICAgICAgICAgIC8vIHJldHVybiBVdGlsLkhhc2hDb2RlKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWwuSGFzaENvZGUoVXRpbC5IYXNoQ29kZSh0aGlzLnNpemUpK1V0aWwuSGFzaENvZGUodGhpcy5jb2xvcikrVXRpbC5IYXNoQ29kZSh0aGlzLnRleHQpK1V0aWwuSGFzaENvZGUodGhpcy5kZXB0aCkrVXRpbC5IYXNoQ29kZSh0aGlzLmNvdW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGNoaWxkcmVuOkl0ZW1bXTtcbiAgICAgICAgcHVibGljIHNpemU6VmFsdWU7XG4gICAgICAgIHB1YmxpYyBjb2xvcjpWYWx1ZTtcbiAgICAgICAgcHVibGljIHRleHQ6VmFsdWU7XG5cbiAgICAgICAgcHVibGljIGRlcHRoOlZhbHVlO1xuICAgICAgICBwdWJsaWMgY291bnQ6VmFsdWU7XG4gICAgICAgIFxuICAgICAgICBwdWJsaWMgX2hpZGRlbjpib29sZWFuPWZhbHNlO1xuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2Fse1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgRW5jb2Rpbmd7XG4gICAgICAgIHB1YmxpYyBjb2xvcjpGaWVsZDtcbiAgICAgICAgcHVibGljIHNpemU6RmllbGQ7XG4gICAgICAgIHB1YmxpYyB0b29sdGlwOkZpZWxkO1xuICAgICAgICBwdWJsaWMgdGV4dDpGaWVsZDtcbiAgICAgICAgcHVibGljIGNoaWxkcmVuOkZpZWxkO1xuICAgICAgICBjb25zdHJ1Y3RvcihlbmNvZGluZzphbnkpe1xuICAgICAgICAgICAgaWYoZW5jb2RpbmcuY29sb3IgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBGaWVsZChlbmNvZGluZy5jb2xvciwnY29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVuY29kaW5nLnNpemUgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zaXplID0gbmV3IEZpZWxkKGVuY29kaW5nLnNpemUsJ3NpemUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVuY29kaW5nLnRvb2x0aXAgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IEZpZWxkKGVuY29kaW5nLnRvb2x0aXAsJ3Rvb2x0aXAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVuY29kaW5nLnRleHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IEZpZWxkKGVuY29kaW5nLnRleHQsJ3RleHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGVuY29kaW5nLmNoaWxkcmVuICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgRmllbGQoZW5jb2RpbmcuY2hpbGRyZW4sJ2NoaWxkcmVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2FsIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgaW1wb3J0IERlYnVnID0gYW5kcm9pZC5EZWJ1Z1xuXG4gICAgZXhwb3J0IGNsYXNzIERhdGFNb2RlbCB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIGlkOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9fZW5jb2Rpbmc6IEVuY29kaW5nO1xuICAgICAgICAvLyBwcml2YXRlIF9fcm9vdDpcbiAgICAgICAgcHJpdmF0ZSBfX2RhdGE6IGFueTtcbiAgICAgICAgcHJpdmF0ZSBfX3Jvb3Q6IEl0ZW1bXTtcbiAgICAgICAgcHJpdmF0ZSBfX2NoYXJ0VHlwZTogQ2hhcnRUeXBlO1xuICAgICAgICBwcml2YXRlIF9hbmFseXNlRW5jb2RpbmcoZW5jb2RlOiBhbnkpOiBFbmNvZGluZyB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVuY29kaW5nKGVuY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBjaGFydFR5cGUoKTogQ2hhcnRUeXBlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY2hhcnRUeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJpdmF0ZSBfX2FuYWx5c2VUcmVlKClcbiAgICAgICAgY29uc3RydWN0b3IoZGF0YTogYW55KSB7XG4gICAgICAgICAgICBEYXRhTW9kZWwuaWQgPSAwO1xuICAgICAgICAgICAgdGhpcy5fX2RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5fX2NoYXJ0VHlwZSA9IFV0aWwuYXNFbnVtKGRhdGEuY2hhcnR0eXBlLCBDaGFydFR5cGUpO1xuXG4gICAgICAgICAgICB0aGlzLl9fZW5jb2RpbmcgPSB0aGlzLl9hbmFseXNlRW5jb2RpbmcodGhpcy5fX2RhdGEuZW5jb2RpbmcpO1xuICAgICAgICAgICAgdGhpcy5fX2NyZWF0ZVJvb3QoKTtcblxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19jcmVhdGVNb2RlbChkYXRhOiBhbnksIGRlcHRoOiBudW1iZXIpOiBJdGVtIHtcbiAgICAgICAgICAgIGxldCBpdGVtOiBJdGVtID0gbmV3IEl0ZW0oKTtcbiAgICAgICAgICAgIC8vIGl0ZW0uX2lkID0gKCsrRGF0YU1vZGVsLmlkKS50b0ZpeGVkKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5fX2VuY29kaW5nKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgX2NoaWxkcmVuID0gZGF0YVt0aGlzLl9fZW5jb2RpbmcuY2hpbGRyZW4uYmluZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChfY2hpbGRyZW4gIT0gbnVsbCAmJiBfY2hpbGRyZW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgX2NoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbi5wdXNoKHRoaXMuX19jcmVhdGVNb2RlbChjaGlsZCwgZGVwdGggKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiAodGhpcy5fX2VuY29kaW5nW2tleV0uYmluZCA9PT0gJ2NvdW50JyB8fCB0aGlzLl9fZW5jb2Rpbmdba2V5XS5iaW5kID09PSAnZGVwdGgnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fZW5jb2Rpbmdba2V5XS5iaW5kIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1ba2V5XSA9IG5ldyBWYWx1ZShkYXRhW3RoaXMuX19lbmNvZGluZ1trZXldLmJpbmRdLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fZW5jb2Rpbmdba2V5XS5iaW5kID09ICdjb3VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtW2tleV0gPSBuZXcgVmFsdWUoZGF0YS5jaGlsZHJlbiAhPSBudWxsID8gZGF0YS5jaGlsZHJlbi5sZW5ndGggOiAxLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuX19lbmNvZGluZ1trZXldLmJpbmQgPT0nZGVwdGgnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRlcHRoID0gbmV3IFZhbHVlKGRlcHRoLG51bGwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1ba2V5XSA9IG5ldyBWYWx1ZShkYXRhW3RoaXMuX19lbmNvZGluZ1trZXldLmJpbmRdLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpdGVtLmNvdW50ID0gbmV3IFZhbHVlKGl0ZW0uY2hpbGRyZW4ubGVuZ3RoLG51bGwpO1xuICAgICAgICAgICAgLy8gaXRlbS5kZXB0aCA9IG5ldyBWYWx1ZShkZXB0aCxudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19jcmVhdGVSb290KCkge1xuICAgICAgICAgICAgLy8gdGhpcy5fX3Jvb3QgPSB0aGlzLl9fY3JlYXRlTW9kZWwodGhpcy5fX2RhdGEudmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuX19yb290ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX19kYXRhLnZhbHVlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19yb290LnB1c2godGhpcy5fX2NyZWF0ZU1vZGVsKGl0ZW0sIDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZWZyZXNoKCkge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19jcmVhdGVTY2FsZShmaWxlZDogRmllbGQpOiBTY2FsZSB7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoZmlsZWQgIT0gbnVsbCk7XG4gICAgICAgICAgICBsZXQgc2NhbGU6IFNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAoZmlsZWQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgU2NhbGVUeXBlLkxpbmVhcjpcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBuZXcgTGluZWFyU2NhbGUoZmlsZWQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2NhbGVUeXBlLk9yZGluYWw6XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IE9yZGluYWxTY2FsZShmaWxlZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGZhbHNlLCBmaWxlZC50eXBlICsgXCIgU2NhbGVUeXBlIGhhcyBub3QgYmVlbiBpbXBsZW1lbnQhXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIGdldCByb290KCk6IEl0ZW1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3Jvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBlbmNvZGluZygpOiBFbmNvZGluZyB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VuY29kaW5nO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBJU2NhbGUge1xuICAgICAgICBkb21haW4oZG9tYWluczogYW55W10pOiBJU2NhbGU7XG4gICAgICAgIHJlZnJlc2goKTogSVNjYWxlO1xuICAgICAgICByYW5nZShyYW5nZXM6IGFueVtdKTogSVNjYWxlO1xuICAgICAgICByYW5nZUJvdW5kcyhyYW5nZXM6IGFueVtdKTogSVNjYWxlO1xuICAgICAgICBnZXRTY2FsZVZhbHVlKHZhbHVlOiBhbnkpO1xuICAgICAgICBvcmRlcjogT3JkZXI7XG4gICAgICAgIG1heDogbnVtYmVyO1xuICAgICAgICBtaW46IG51bWJlcjtcbiAgICAgICAgY2xvbmUoKTpJU2NhbGU7XG4gICAgICAgICBlcXVhbCh2YWx1ZTpJU2NhbGUpO1xuICAgICAgICAgICAgXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG5cbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgU2NhbGUgaW1wbGVtZW50cyBJU2NhbGUge1xuICAgICAgICBwcml2YXRlIF9faWQ6IHN0cmluZztcbiAgICAgICAgcHJvdGVjdGVkIF9fc3RhcnQ6IGFueTtcbiAgICAgICAgcHJvdGVjdGVkIF9fZW5kOiBhbnk7XG4gICAgICAgIHByb3RlY3RlZCBfX2JvdW5kOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByb3RlY3RlZCBfb3JkZXI6IE9yZGVyO1xuICAgICAgICByZWFkb25seSBtYXg6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWluOiBudW1iZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKGlkPzogc3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLl9vcmRlciA9IE9yZGVyLk5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICBwcm90ZWN0ZWQgX19kb21haW5zOiBhbnlbXSA9IFtdO1xuICAgICAgICBwcm90ZWN0ZWQgX19yYW5nZXM6IGFueVtdID0gW107XG5cbiAgICAgICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX19pZCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19pZDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZG9tYWluKGRvbWFpbnM6IGFueVtdKTogSVNjYWxlIHtcbiAgICAgICAgICAgIHRoaXMuX19kb21haW5zID0gZG9tYWlucztcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyByYW5nZShyYW5nZXM6IGFueVtdKSB7XG4gICAgICAgICAgICB0aGlzLl9fcmFuZ2VzID0gcmFuZ2VzO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlQm91bmRzKHJhbmdlczogYW55W10pOiBJU2NhbGUge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZWZyZXNoKCk6IElTY2FsZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFNjYWxlVmFsdWUodmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBzdGFydFBvc2l0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgZW5kUG9zaXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VuZDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgb3JkZXIoKTogT3JkZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yZGVyO1xuICAgICAgICB9XG4gICAgICAgIHNldCBvcmRlcih2YWx1ZTogT3JkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX29yZGVyID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGVxdWFsKHZhbHVlOiBTY2FsZSkge1xuICAgICAgICAgICAgaWYodmFsdWUgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWQgPT0gdmFsdWUuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGNsb25lKCk6IFNjYWxle1xuICAgICAgICAgICAgcmV0dXJuIF8uY2xvbmVEZWVwKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnXG4gICAgZXhwb3J0IGNsYXNzIExpbmVhclNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgICAgICBwcm90ZWN0ZWQgX21heDogbnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgX21pbjogbnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgbmljZU1heFZhbHVlOiBudW1iZXI7XG4gICAgICAgIFxuICAgICAgICBnZXQgbWF4KCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgICAgICB9XG4gICAgICAgIGdldCBtaW4oKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9taW47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IoaWQ/OiBhbnkpIHtcbiAgICAgICAgICAgIHN1cGVyKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvbWFpbihkb21haW5zOmFueVtdKXtcbiAgICAgICAgICAgIHN1cGVyLmRvbWFpbihkb21haW5zKTtcbiAgICAgICAgICAgIHRoaXMuX21pbiA9IHRoaXMuX19kb21haW5zWzBdO1xuICAgICAgICAgICAgdGhpcy5fbWF4ID0gdGhpcy5fX2RvbWFpbnNbMV07XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2goKTogSVNjYWxlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9yZGVyID09PSBPcmRlci5Bc2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc3RhcnQgPSB0aGlzLl9fcmFuZ2VzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbmQgPSB0aGlzLl9fcmFuZ2VzWzFdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9yZGVyID09PSBPcmRlci5EZXNjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3N0YXJ0ID0gdGhpcy5fX3Jhbmdlc1sxXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW5kID0gdGhpcy5fX3Jhbmdlc1swXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3N0YXJ0ID0gdGhpcy5fX3Jhbmdlc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW5kID0gdGhpcy5fX3Jhbmdlc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21pbiA9IHRoaXMuX19kb21haW5zWzBdO1xuICAgICAgICAgICAgdGhpcy5fbWF4ID0gdGhpcy5fX2RvbWFpbnNbMV07XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByYW5nZShyYW5nZXM6IGFueVtdKSB7XG4gICAgICAgICAgICB0aGlzLl9fcmFuZ2VzID0gcmFuZ2VzO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnJlZnJlc2goKSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRTY2FsZVZhbHVlKHY6IGFueSkge1xuICAgICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX21heCA9PSB0aGlzLl9taW4pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh0aGlzLl9fZW5kIC0gdGhpcy5fX3N0YXJ0KSAvIDIgKyB0aGlzLl9fc3RhcnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gKHRoaXMuX19lbmQgLSB0aGlzLl9fc3RhcnQpIC8gKHRoaXMuX21heCAtIHRoaXMuX21pbikgKiAodiAtIHRoaXMuX21pbikgKyB0aGlzLl9fc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIFxuXG4gICAgICAgIHB1YmxpYyBlcXVhbCh2YWx1ZTogU2NhbGUpIHtcbiAgICAgICAgICAgIGlmKHZhbHVlICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5pZCA9PSB0aGlzLmlkICYmIHZhbHVlLm1heCA9PSB0aGlzLm1heCAmJiB2YWx1ZS5taW4gPT0gdGhpcy5taW4gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9ICAgICAgICAgICAgXG4gICAgLy8gICAgcHVibGljIGNsb25lKCk6TGluZWFyU2NhbGV7XG4gICAgLy8gICAgICAgIGxldCBzY2FsZSA9ICBuZXcgTGluZWFyU2NhbGUodGhpcy5pZCk7XG4gICAgLy8gICAgICAgIGxldCBkb21haW5zOmFueVtdID1bXTtcbiAgICAvLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl9fZG9tYWlucy5sZW5ndGg7ICsraSl7XG4gICAgLy8gICAgICAgICAgICAgZG9tYWlucy5wdXNoKHRoaXMuX19kb21haW5zW2ldKTtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIC8vIGxldCByYW5nZXMgOmFueVtdID1bXTtcbiAgICAvLyAgICAgICAgIC8vIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7ICsraSl7XG4gICAgLy8gICAgICAgICAvLyAgICAgcmFuZ2VzLnB1c2godGhpcy5yYW5nZXNbaV0pO1xuICAgIC8vICAgICAgICAgLy8gfVxuICAgIC8vICAgICAgICBzY2FsZS5kb21haW4oZG9tYWlucyk7Ly8ucmFuZ2UocmFuZ2VzKS5yZWZyZXNoKCk7XG4gICAgLy8gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAvLyAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuXG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBleHBvcnQgY2xhc3MgT3JkaW5hbFNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgICAgICBwcm90ZWN0ZWQgX2RvbWFpbkNhY2hlOiB7IFtuYW1lOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xuICAgICAgICBwcml2YXRlIF9zaXplOiBudW1iZXIgPSAwO1xuICAgICAgICBjb25zdHJ1Y3RvcihpZD86IGFueSkge1xuICAgICAgICAgICAgc3VwZXIoaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJlZnJlc2goKTogSVNjYWxlIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3JkZXIgPT09IE9yZGVyLkFzYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kb21haW5zLnNvcnQoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcmRlciA9PT0gT3JkZXIuRGVzYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kb21haW5zLnNvcnQoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RvbWFpbkNhY2hlID0ge307XG4gICAgICAgICAgICAvLyBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fX2RvbWFpbnMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgLy8gICAgIGlmKHRoaXMuX2RvbWFpbkNhY2hlW3RoaXMuX19kb21haW5zW2ldXSA9PSBudWxsKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5fZG9tYWluQ2FjaGVbdGhpcy5fX2RvbWFpbnNbaV1dPWk7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgZHMgb2YgdGhpcy5fX2RvbWFpbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZG9tYWluQ2FjaGVbZHNdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9tYWluQ2FjaGVbZHNdID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IGluZGV4O1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHRoaXMuX19yYW5nZXMgIT0gbnVsbCwgXCJcIik7XG4gICAgICAgICAgICAvLyBEZWJ1Zy5hc3NlcnQodGhpcy5fX3Jhbmdlcy5sZW5ndGggPT0gMik7XG4gICAgICAgICAgICBpZiAodGhpcy5fX3Jhbmdlcy5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuX19zdGFydCA9IHRoaXMuX19yYW5nZXNbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5fX2VuZCA9IHRoaXMuX19yYW5nZXNbMV07XG4gICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl9fcmFuZ2VzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc3RhcnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbmQgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBnZXQgbWF4KCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgbWluKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBkb21haW5zKCk6IGFueVtdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZG9tYWlucztcbiAgICAgICAgfVxuICAgICAgICBnZXQgcmFuZ2VzKCk6IGFueVtdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcmFuZ2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFuZ2UocmFuZ2VzOiBhbnlbXSkge1xuICAgICAgICAgICAgaWYocmFuZ2VzLmxlbmd0aD4yICYmIHJhbmdlcy5sZW5ndGggPiB0aGlzLl9fZG9tYWlucy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHRoaXMuX19yYW5nZXMgPSByYW5nZXMuc2xpY2UoMCx0aGlzLl9fZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3JhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnJlZnJlc2goKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmFuZ2VCb3VuZHMocmFuZ2VzOiBhbnlbXSkge1xuICAgICAgICAgICAgaWYocmFuZ2VzLmxlbmd0aD4yICYmIHJhbmdlcy5sZW5ndGggPiB0aGlzLl9fZG9tYWlucy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIHRoaXMuX19yYW5nZXMgPSByYW5nZXMuc2xpY2UoMCx0aGlzLl9fZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3JhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMucmVmcmVzaCgpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZG9tYWluKGRvbWFpbnM6IGFueVtdKTogSVNjYWxlIHtcbiAgICAgICAgICAgIHRoaXMuX19kb21haW5zID0gZG9tYWlucztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U2NhbGVWYWx1ZSh2OiBhbnkpIDpudW1iZXJ8c3RyaW5ne1xuICAgICAgICAgICAgLy8gdmFyIGluZGV4ID0gdGhpcy5fX2RvbWFpbnMuaW5kZXhPZih2KTtcbiAgICAgICAgICAgIC8vIHZhciBpbmRleCA9IF8uaW5kZXhPZih0aGlzLl9fZG9tYWlucyx2KTtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuX2RvbWFpbkNhY2hlW3ZdO1xuICAgICAgICAgICAgaWYgKGlzTmFOKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICAgICAgICBpZiAoc2l6ZSA8IDIpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHRoaXMuX19lbmQpID09ICdudW1iZXInICYmIHR5cGVvZiAodGhpcy5fX3N0YXJ0KSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAoaW5kZXggKyAwLjUpICogKHRoaXMuX19lbmQgLSB0aGlzLl9fc3RhcnQpIC8gc2l6ZSArIHRoaXMuX19zdGFydDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGluZGV4ICogKHRoaXMuX19lbmQgLSB0aGlzLl9fc3RhcnQpIC8gKHNpemUgLSAxKSArIHRoaXMuX19zdGFydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZih0aGlzLl9fcmFuZ2VzLmxlbmd0aCA+IDIpe1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3Jhbmdlc1tpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwdWJsaWMgY2xvbmUoKTpPcmRpbmFsU2NhbGV7XG4gICAgICAgIC8vICAgICBsZXQgc2NhbGUgPSAgbmV3IE9yZGluYWxTY2FsZSh0aGlzLmlkKTtcbiAgICAgICAgLy8gICAgIGxldCBkb21haW5zOmFueVtdID1bXTtcbiAgICAgICAgLy8gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fX2RvbWFpbnMubGVuZ3RoOyArK2kpe1xuICAgICAgICAvLyAgICAgICAgICBkb21haW5zLnB1c2godGhpcy5fX2RvbWFpbnNbaV0pO1xuICAgICAgICAvLyAgICAgIH1cbiAgICAgICAgLy8gICAgIC8vICBsZXQgcmFuZ2VzIDphbnlbXSA9W107XG4gICAgICAgIC8vICAgICAvLyAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgLy8gICAgIC8vICAgICAgcmFuZ2VzLnB1c2godGhpcy5yYW5nZXNbaV0pO1xuICAgICAgICAvLyAgICAgLy8gIH1cbiAgICAgICAgLy8gICAgIHNjYWxlLmRvbWFpbihkb21haW5zKTsvLy5yYW5nZShyYW5nZXMpLnJlZnJlc2goKTtcbiAgICAgICAgLy8gICAgIHJldHVybiBzY2FsZTtcbiAgICAgICAgLy8gfVxuXG4gICAgfVxuXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcblxuXG4gICAgZXhwb3J0IGNsYXNzIExvZ1NjYWxlIGV4dGVuZHMgU2NhbGUge1xuXG4gICAgICAgIHByb3RlY3RlZCBfbWF4OiBudW1iZXI7XG4gICAgICAgIHByb3RlY3RlZCBfbWluOiBudW1iZXI7XG4gICAgICAgIHByb3RlY3RlZCBfbmljZVRpY2s6IG51bWJlcjtcbiAgICAgICAgcHJvdGVjdGVkIF9uaWNlTWF4VmFsdWU6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfdGlja3NpemU6bnVtYmVyID0gNjtcblxuICAgICAgICBwcm90ZWN0ZWQgX2xvZ0Jhc2U6IG51bWJlcjtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihsb2diYXNlOiBudW1iZXIsIGlkPzogYW55KSB7XG4gICAgICAgICAgICBzdXBlcihpZCk7XG4gICAgICAgICAgICB0aGlzLl9sb2dCYXNlID0gbG9nYmFzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZG9tYWluKGRvbWFpbnM6YW55W10pe1xuICAgICAgICAgICAgc3VwZXIuZG9tYWluKGRvbWFpbnMpO1xuICAgICAgICAgICAgdGhpcy5fbWluID0gdGhpcy5fX2RvbWFpbnNbMF07XG4gICAgICAgICAgICB0aGlzLl9tYXggPSB0aGlzLl9fZG9tYWluc1sxXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBsb2dCYXNlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nQmFzZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgdGlja1NpemUodmFsdWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX3RpY2tzaXplID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgbWluKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWluO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCgpOiBJU2NhbGUge1xuICAgICAgICAgICAgaWYgKHRoaXMub3JkZXIgPT09IE9yZGVyLkFzYykge1xuICAgICAgICAgICAgICAgIHRoaXMuX19zdGFydCA9IHRoaXMuX19yYW5nZXNbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5fX2VuZCA9IHRoaXMuX19yYW5nZXNbMV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3JkZXIgPT09IE9yZGVyLkRlc2MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc3RhcnQgPSB0aGlzLl9fcmFuZ2VzWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbmQgPSB0aGlzLl9fcmFuZ2VzWzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc3RhcnQgPSB0aGlzLl9fcmFuZ2VzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbmQgPSB0aGlzLl9fcmFuZ2VzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9taW4gPSB0aGlzLl9fZG9tYWluc1swXTtcbiAgICAgICAgICAgIHRoaXMuX21heCA9IHRoaXMuX19kb21haW5zWzFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xvZ0Jhc2UgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2UgPSB0aGlzLl9sb2dCYXNlO1xuICAgICAgICAgICAgICAgIHZhciBrID0gTWF0aC5sb2coYmFzZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1heCA9IE1hdGguY2VpbChNYXRoLmxvZyh0aGlzLl9tYXgpIC8gayk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4ID0gTWF0aC5wb3coYmFzZSwgaW1heCk7XG4gICAgICAgICAgICAgICAgdmFyIGltaW4gPSBNYXRoLmZsb29yKE1hdGgubG9nKHRoaXMuX21pbikgLyBrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW4gPSBNYXRoLnBvdyhiYXNlLCBpbWluKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9taW4gPD0gMCB8fCBpc05hTih0aGlzLl9taW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21pbiA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXggPCB0aGlzLl9taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWF4ID0gdGhpcy5fbWluICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJhbmdlKHJhbmdlczogYW55W10pIHtcbiAgICAgICAgICAgIHRoaXMuX19yYW5nZXMgPSByYW5nZXM7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMucmVmcmVzaCgpLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCB0aWNrcygpOiBhbnlbXSB7XG4gICAgICAgICAgICB2YXIgdGlja3M6IGFueVtdID0gbmV3IEFycmF5KHRoaXMuX3RpY2tzaXplKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHRoaXMuX3RpY2tzaXplOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aWNrc1tpXSA9IGkgKiB0aGlzLl9uaWNlVGljaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aWNrcztcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFNjYWxlVmFsdWUodjogYW55KSB7XG4gICAgICAgICAgICBpZiAodiA8IHRoaXMuX21pbikge1xuICAgICAgICAgICAgICAgIHYgPSB0aGlzLl9taW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWF4bCA9IE1hdGgubG9nKHRoaXMuX21heCAvIHRoaXMuX21pbik7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLmxvZyh2IC8gdGhpcy5fbWluKSAvIG1heGwgKiAodGhpcy5fX2VuZCAtIHRoaXMuX19zdGFydCkgKyB0aGlzLl9fc3RhcnQ7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHVibGljIGNsb25lKCk6TG9nU2NhbGV7XG4gICAgICAgIC8vICAgICBEZWJ1Zy5hc3NlcnQoZmFsc2UsXCJMb2dTY2FsZSBjbG9uZSBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgIFwiKTtcbiAgICAgICAgLy8gICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG5cblxufSIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9iYXNlLnRzXCIgLz5cbi8vIG5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgIFxuICAgIFxuLy8gICAgICAgICBleHBvcnQgY2xhc3MgQ29sb3JTY2FsZSBleHRlbmRzIE9yZGluYWxTY2FsZSB7XG4vLyAgICAgICAgICAgICBwcml2YXRlIF9fY29sb3JyYW5nZXM6c3RyaW5nW107XG5cbi8vICAgICAgICAgICAgIGNvbnN0cnVjdG9yKGlkPzogYW55KSB7XG4vLyAgICAgICAgICAgICAgICAgc3VwZXIoaWQpO1xuLy8gICAgICAgICAgICAgICAgIHRoaXMuX19jb2xvcnJhbmdlcyA9W107XG5cbi8vICAgICAgICAgICAgIH1cbiAgICAgICAgIFxuLy8gICAgICAgICAgICAgZ2V0IGRvbWFpbnMoKTogYW55W10ge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZG9tYWlucztcbi8vICAgICAgICAgICAgIH1cbiAgICBcbi8vICAgICAgICAgICAgIHJhbmdlKHJhbmdlczogYW55W10pIHtcbi8vICAgICAgICAgICAgICAgICBpZihyYW5nZXMubGVuZ3RoID4gMSl7XG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb2xvcnJhbmdlcyA9Q29sb3JVdGlscy5ncmFkaWVudENvbG9yKHJhbmdlc1swXSxyYW5nZXNbcmFuZ2VzLmxlbmd0aC0xXSx0aGlzLl9fZG9tYWlucy5sZW5ndGgpO1xuXG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci5yYW5nZShbMCx0aGlzLl9fY29sb3JyYW5nZXMubGVuZ3RoLTFdKTtcblxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgIHJhbmdlQm91bmRzKHJhbmdlczogYW55W10pIHtcbi8vICAgICAgICAgICAgICAgICBpZihyYW5nZXMubGVuZ3RoID4gMSl7XG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb2xvcnJhbmdlcyA9Q29sb3JVdGlscy5ncmFkaWVudENvbG9yKHJhbmdlc1swXSxyYW5nZXNbcmFuZ2VzLmxlbmd0aC0xXSx0aGlzLl9fZG9tYWlucy5sZW5ndGgpO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIucmFuZ2UoWzAsdGhpcy5fX2NvbG9ycmFuZ2VzLmxlbmd0aC0xXSk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBnZXRTY2FsZVZhbHVlKHY6IGFueSk6YW55IHtcbi8vICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9fZG9tYWlucy5pbmRleE9mKHYpO1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY29sb3JyYW5nZXNbaW5kZXhdO1xuLy8gICAgICAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgICAgXG4vLyAgICAgICAgIH1cbiAgICBcbi8vICAgICB9IiwibmFtZXNwYWNlIGFuZHJvaWQudGVzdHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGVudW0gRWxlbWVudFR5cGV7XG4gICAgICAgIFNoYXBlLFxuICAgICAgICBTZXJpZXMsXG4gICAgICAgIEF4aXMsXG4gICAgICAgIFNlcmllc0xlZ2VuZCxcbiAgICAgICAgU2NhbGVMZWdlbmRcbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQudGVzdHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGVudW0gTGVnZW5kVHlwZXtcbiAgICAgICAgU2VyaWVzLFxuICAgICAgICBDb2xvciwvLyBTY2FsZSBUeXBlIEZyb20gQ29sb3JTY2FsZVxuICAgICAgICBTaXplLy8gU2NhbGUgVHlwZSBmcm9tIFNpemVTY2FsZSAgICBcbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0e1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSAgYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgTGluZWFyTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0O1xuICAgIGltcG9ydCBGcmFtZWxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkZyYW1lTGF5b3V0O1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBleHBvcnQgaW50ZXJmYWNlIElMZWdlbmR7XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IExpbmVhckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG5cbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG5cbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBMaW5lYXJHcmFkaWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuTGluZWFyR3JhZGllbnQ7XG4gICAgaW1wb3J0IEZpbGxTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuRmlsbFN0eWxlO1xuXG4gICAgZXhwb3J0IGNsYXNzIExpbmVhclNjYWxlTGVnZW5kIGV4dGVuZHMgVmlldyBpbXBsZW1lbnRzIElMZWdlbmR7XG5cbiAgICAgICAgcHJpdmF0ZSBfX3NjYWxlOiBTY2FsZTtcbiAgICAgICAgcHJpdmF0ZSBfX2N1cnJlbnRWYWx1ZTpudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX190eXBlOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQsdHlwZT86ICdzaXplJyB8ICdjb2xvcicpIHtcbiAgICAgICAgICAgIHN1cGVyKGMpO1xuICAgICAgICAgICAgdGhpcy5fX3R5cGUgPSB0eXBlO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgc2V0IHNjYWxlKHNjYWxlOiBTY2FsZSkge1xuICAgICAgICAgICAgdGhpcy5fX3NjYWxlID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBzY2FsZSgpOiBTY2FsZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemV7XG4gICAgICAgIC8vICAgICByZXR1cm4gc3VwZXIub25NZWFzdXJlKHdpZHRoLGhlaWdodCxjYW52YXMpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lke1xuICAgICAgICAvLyAgICAgc3VwZXIub25MYXlvdXQobCx0LHIsYixjYW52YXMpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgb25EcmF3KGNhbnZhczpDYW52YXMpe1xuICAgICAgICAgICAgc3VwZXIub25EcmF3KGNhbnZhcyk7XG4gICAgICAgICAgICBpZih0aGlzLl9fdHlwZSA9PSAnc2l6ZScpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5fX3R5cGUgPT0gJ2NvbG9yJyl7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd0NvbG9yU2NhbGUoY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIF9kcmF3Q29sb3JTY2FsZShjYW52YXM6Q2FudmFzKXtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlID0gdGhpcy5fX3NjYWxlO1xuICAgICAgICAgICAgaWYoY29sb3JTY2FsZSBpbnN0YW5jZW9mIExpbmVhclNjYWxlKXtcbiAgICAgICAgICAgICAgICAvLyBjb2xvciA9IENvbG9yVXRpbHMuZ2V0Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sY29sb3JWYWx1ZS52YWx1ZSxjb2xvclNjYWxlLm1pbixjb2xvclNjYWxlLm1heCk7XG4gICAgICAgICAgICAgICAgbGV0IHN4IDpudW1iZXIgPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmxlZnQrdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aC8yO1xuICAgICAgICAgICAgICAgIGxldCBzeSA6bnVtYmVyID0gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC50b3A7XG4gICAgICAgICAgICAgICAgbGV0IGV4IDpudW1iZXIgPSBzeTtcbiAgICAgICAgICAgICAgICBsZXQgZXkgOm51bWJlciA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QuYm90dG9tO1xuICAgICAgICAgICAgICAgIGxldCBsOkxpbmVhckdyYWRpZW50ID1uZXcgTGluZWFyR3JhZGllbnQoc3gsc3ksZXgsZXksW1xuICAgICAgICAgICAgICAgICAgICB7b2Zmc2V0OjAsY29sb3I6Y29sb3JTY2FsZS5zdGFydFBvc2l0aW9ufSxcbiAgICAgICAgICAgICAgICAgICAge29mZnNldDoxLGNvbG9yOmNvbG9yU2NhbGUuZW5kUG9zaXRpb259XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGwgPW5ldyBGaWxsU3R5bGUoKTtcbiAgICAgICAgICAgICAgICBmaWxsLmZpbGwgPSBsO1xuICAgICAgICAgICAgICAgIGxldCBzdHlsZTpTdHlsZT0gbmV3IFN0eWxlKGZpbGwsbnVsbCk7XG4gICAgICAgICAgICAgICAgY2FudmFzLmRyYXdSZWN0KHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Quc3RhcnRQb2ludCx0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmVuZFBvaW50LHRydWUsc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IExpbmVhckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG5cbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG5cbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBMaW5lYXJHcmFkaWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuTGluZWFyR3JhZGllbnQ7XG4gICAgaW1wb3J0IEZpbGxTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuRmlsbFN0eWxlO1xuXG4gICAgZXhwb3J0IGNsYXNzIE9yZGluYWxTY2FsZUxlZ2VuZCBleHRlbmRzIExpbmVhckxheW91dCBpbXBsZW1lbnRzIElMZWdlbmR7XG5cbiAgICAgICAgcHJpdmF0ZSBfX3NjYWxlOiBTY2FsZTtcbiAgICAgICAgcHJpdmF0ZSBfX2N1cnJlbnRWYWx1ZTpudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX190eXBlOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQsdHlwZT86ICdzaXplJyB8ICdjb2xvcicpIHtcbiAgICAgICAgICAgIHN1cGVyKGMpO1xuICAgICAgICAgICAgdGhpcy5fX3R5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdGhpcy53cmFwID0gdHJ1ZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHNldCBzY2FsZShzY2FsZTogU2NhbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX19zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgdGhpcy5fX2xvYWRJdGVtcygpO1xuXG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBzY2FsZSgpOiBTY2FsZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlO1xuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9fbG9hZEl0ZW1zKCl7XG4gICAgICAgICAgICBsZXQgY29sb3JTY2FsZSA9IHRoaXMuX19zY2FsZTtcbiAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUgKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9fdHlwZSA9PSAnY29sb3InKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yQXJyYXk6c3RyaW5nW10gPW51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbiA9PSBudWxsIHx8IGNvbG9yU2NhbGUuZW5kUG9zaXRpb24gPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvckFycmF5ID0gY29sb3JTY2FsZS5yYW5nZXM7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JBcnJheSA9Q29sb3JVdGlscy5ncmFkaWVudENvbG9yKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbixjb2xvclNjYWxlLmVuZFBvc2l0aW9uLCg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbGVuIDpudW1iZXIgID0gY29sb3JBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGVwOm51bWJlciA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGgvbGVuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVmdDpudW1iZXI9dGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wOm51bWJlciA9dGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC50b3A7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQ6bnVtYmVyID0gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZTpTdHlsZSA9RGVmYXVsdC5zdHlsZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBjb2xvciBvZiBjb2xvckFycmF5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtOiBMZWdlbmRJdGVtID0gbmV3IExlZ2VuZEl0ZW0odGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5uYW1lID1jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucGFkZGluZz0gbmV3IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZyg1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ubGF5b3V0UGFyYW1zLndpZHRoID0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5XUkFQX0NPTlRFTlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmljb24gPSBuZXcgQmFySWNvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pY29uLmNvbG9yID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmNoaWxkcmVuLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG9uTWVhc3VyZSh3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZXtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsaGVpZ2h0LGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWR7XG4gICAgICAgICAgICBzdXBlci5vbkxheW91dChsLHQscixiLGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvbkRyYXcoY2FudmFzOkNhbnZhcyl7XG4gICAgICAgICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgXG5cbiAgICAgICAgLy8gcHJpdmF0ZSBfZHJhd0NvbG9yU2NhbGUoY2FudmFzOkNhbnZhcyl7XG4gICAgICAgIC8vICAgICBsZXQgY29sb3JTY2FsZSA9IHRoaXMuX19zY2FsZTtcbiAgICAgICAgLy8gICAgIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpe1xuICAgICAgICAvLyAgICAgICAgIGxldCBjb2xvckFycmF5OnN0cmluZ1tdID1udWxsO1xuICAgICAgICAvLyAgICAgICAgIGlmKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbiA9PSBudWxsIHx8IGNvbG9yU2NhbGUuZW5kUG9zaXRpb24gPT0gbnVsbCl7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBjb2xvclNjYWxlLnJhbmdlcztcbiAgICAgICAgLy8gICAgICAgICB9ZWxzZXtcbiAgICAgICAgLy8gICAgICAgICAgICAgY29sb3JBcnJheSA9Q29sb3JVdGlscy5ncmFkaWVudENvbG9yKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbixjb2xvclNjYWxlLmVuZFBvc2l0aW9uLCg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoKTtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgbGV0IGxlbiA6bnVtYmVyICA9IGNvbG9yQXJyYXkubGVuZ3RoO1xuICAgICAgICAvLyAgICAgICAgIGxldCBzdGVwOm51bWJlciA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGgvbGVuO1xuICAgICAgICAvLyAgICAgICAgIGxldCBsZWZ0Om51bWJlcj10aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmxlZnQ7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHRvcDpudW1iZXIgPXRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QudG9wO1xuICAgICAgICAvLyAgICAgICAgIGxldCBoZWlnaHQ6bnVtYmVyID0gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQ7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHN0eWxlOlN0eWxlID1EZWZhdWx0LnN0eWxlO1xuXG4gICAgICAgIC8vICAgICAgICAgZm9yKGxldCBjb2xvciBvZiBjb2xvckFycmF5KXtcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHJlY3Q6UmVjdCA9bmV3IFJlY3QobGVmdCx0b3AsbGVmdCtzdGVwLHRvcCtoZWlnaHQpO1xuICAgICAgICAvLyAgICAgICAgICAgICBzdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNhbnZhcy5kcmF3UmVjdChyZWN0LnN0YXJ0UG9pbnQscmVjdC5lbmRQb2ludCx0cnVlLHN0eWxlKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgbGVmdCArPSBzdGVwO1xuXG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IExpbmVhckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG5cbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG5cbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBIYW5kbGVyID0gYW5kcm9pZC51dGlsLkhhbmRsZXI7XG4gICAgaW1wb3J0IE1lc3NhZ2UgPSBhbmRyb2lkLnV0aWwuTWVzc2FnZTtcblxuICAgIGV4cG9ydCBjbGFzcyBTZXJpZXNMZWdlbmQgZXh0ZW5kcyBMaW5lYXJMYXlvdXQgaW1wbGVtZW50cyBJTGVnZW5kIHtcblxuICAgICAgICBwcml2YXRlIF9zZXJpZXM6IFNlcmllc1tdO1xuICAgICAgICBwcml2YXRlIF9fc2hhcGU6IHN0cmluZztcbiAgICAgICAgY29uc3RydWN0b3IoYzogQ29udGV4dCwgc2hhcGU/OiAnYmFyJyB8ICdzY2F0dGVyJykge1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLl9fc2hhcGUgPSBzaGFwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQgc2VyaWVzKHZhbHVlOiBTZXJpZXNbXSkge1xuICAgICAgICAgICAgdGhpcy5fc2VyaWVzID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9fbG9hZEl0ZW1zKCk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBzZXJpZXMoKTogU2VyaWVzW10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmllcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX19sb2FkSXRlbXMoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFZpZXdzKCk7XG5cbiAgICAgICAgICAgIGxldCBjb2xvckFycmF5OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IExlZ2VuZEl0ZW0gPSBuZXcgTGVnZW5kSXRlbSh0aGlzLmdldENvbnRleHQoKSx7ZW5hYmxlOnRoaXMuc2VyaWVzW2ldLmVuYWJsZX0pO1xuICAgICAgICAgICAgICAgIGl0ZW0ubmFtZSA9IHRoaXMuc2VyaWVzW2ldLm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19zaGFwZSA9PSAnYmFyJykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmljb24gPSBuZXcgQmFySWNvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX3NoYXBlID09ICdzY2F0dGVyJykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmljb24gPSBuZXcgQ2lyY2xlSWNvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl0ZW0uaWNvbi5jb2xvciA9IENvbG9yVXRpbHMuaW5kZXhDb2xvcihpKTtcbiAgICAgICAgICAgICAgICBpdGVtLnBhZGRpbmcgPSBuZXcgYW5kcm9pZC5ncmFwaGljcy5QYWRkaW5nKDUpO1xuICAgICAgICAgICAgICAgIGl0ZW0ubGF5b3V0UGFyYW1zLndpZHRoID0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgICAgICBpdGVtLmxheW91dFBhcmFtcy5oZWlnaHQgPSBMYXlvdXRQYXJhbXMuV1JBUF9DT05URU5UO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBBbmltYXRpb24gPSBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbjtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaGFwZSBleHRlbmRzIENvbXBhcmVkVmlld3tcbiAgICAgICAgcHVibGljIHN0YXRpYyAgUFJJT1JJVFkgOm51bWJlcj0gMTAwMDA7XG4gICAgICAgIHByb3RlY3RlZCBfc3Ryb2tlU3R5bGU6U3Ryb2tlU3R5bGU7XG5cbiAgICAgICAgcHJvdGVjdGVkIF9zdHlsZSA6U3R5bGU7XG4gICAgICAgICAgICBcbiAgICAgICAgcHVibGljIHNldCBzdHlsZSh2YWx1ZTpTdHlsZSl7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgc3R5bGUoKTpTdHlsZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29uc3RydWN0b3IoY29udGV4dDpDb250ZXh0KXtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5wcmlvcml0eT0gU2hhcGUuUFJJT1JJVFk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG9uRHJhdyhjYW52YXM6Q2FudmFzKTp2b2lke1xuICAgICAgICAgICAgc3VwZXIub25EcmF3KGNhbnZhcyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uRHJhdyAgXCIgKyB0aGlzLmNvbXBhcmVkQW5pbWF0aW9uRW1wdHkgKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgICAgICAgICAgaWYodGhpcy5jb21wYXJlZEFuaW1hdGlvbkVtcHR5KXtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhd1NoYXBlKGNhbnZhcyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmF3QW5pbWF0aW9uKGNhbnZhcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX2RyYXdBbmltYXRpb24oY2FudmFzOkNhbnZhcyk6dm9pZHtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3UG9seWdvbih0aGlzLmFuaW1hdGlvblhzLHRoaXMuYW5pbWF0aW9uWXMsdGhpcy5zdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhYnN0cmFjdCBvbkRyYXdTaGFwZShjYW52YXM6Q2FudmFzKTp2b2lkO1xuICAgICAgICBcblxuICAgICAgICBhYnN0cmFjdCByZWZyZXNoKCk6IHZvaWQ7XG5cbiAgICAgICAgb25Nb3VzZUV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW57XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgIH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGV4cG9ydCBjbGFzcyBMYWJlbCBleHRlbmRzIFNoYXBlIHtcblxuICAgICAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xuICAgICAgICBwdWJsaWMgbGFiZWxyZWN0OiBSb3RhdGVSZWN0O1xuICAgICAgICBwdWJsaWMgX2ZvbnQ6Rm9udDtcbiAgICAgICAgcHJpdmF0ZSBfX3BhZGRpbmcgOm51bWJlcj0wO1xuICAgICAgICBwcml2YXRlIF94czogbnVtYmVyW107XG4gICAgICAgIHByaXZhdGUgX3lzOiBudW1iZXJbXTtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0LHRleHQ6IHN0cmluZywgY3g6IG51bWJlciwgY3k6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIGFuZ2xlOiBudW1iZXIscGFkZGluZzpudW1iZXIpIHtcbiAgICAgICAgICAgIHN1cGVyKGMpO1xuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9IFNoYXBlLlBSSU9SSVRZICoxMDtcbiAgICAgICAgICAgIHRoaXMuX19wYWRkaW5nID1wYWRkaW5nO1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHRoaXMubGFiZWxyZWN0ID0gbmV3IFJvdGF0ZVJlY3QoY3gsIGN5LCB3K3BhZGRpbmcqMiwgaCtwYWRkaW5nKjIsIChhbmdsZSA9PSBudWxsIHx8IGlzTmFOKGFuZ2xlKSkgPyAwIDogYW5nbGUpO1xuICAgICAgICAgICAgdGhpcy5feHMgPVtdO1xuICAgICAgICAgICAgdGhpcy5feXM9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0ICYmIGkgPCB0aGlzLmxhYmVscmVjdC5wb2ludHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl94c1tpXSA9IHRoaXMubGFiZWxyZWN0LnBvaW50c1tpXS54O1xuICAgICAgICAgICAgICAgIHRoaXMuX3lzW2ldID0gdGhpcy5sYWJlbHJlY3QucG9pbnRzW2ldLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0cHRzKHNpemU6IG51bWJlcik6IHt4czogbnVtYmVyW10seXM6IG51bWJlcltdfXtcbiAgICAgICAgICAgIHJldHVybiB7eHM6dGhpcy5feHMseXM6dGhpcy5feXN9O1xuICAgICAgICB9XG4gICAgICAgIG9uRHJhd1NoYXBlKGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBjYW52YXMuZHJhd1BvbHlnb24odGhpcy5feHMsdGhpcy5feXMsdGhpcy5iYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgIGxldCBwdDpQb2ludCA9dGhpcy5sYWJlbHJlY3QubGVmdFRvcC5jbG9uZSgpO1xuICAgICAgICAgICAgcHQub2Zmc2V0KHRoaXMuX19wYWRkaW5nLHRoaXMuX19wYWRkaW5nKTtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3VGV4dCh0aGlzLnRleHQsIHB0LCB0aGlzLl9mb250KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2goKTogdm9pZCB7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbSA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBsb3RTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgICAgICAgcHVibGljIGRhdGFwb2ludDphbnk7XG4gICAgICAgIHByaXZhdGUgX2xhYmVsOiBMYWJlbDtcbiAgICAgICAgc2V0IGxhYmVsKHZhbHVlOkxhYmVsKXtcbiAgICAgICAgICAgIGlmKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gdGhpcy5fbGFiZWwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhYmVsID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGxhYmVsKCk6TGFiZWx7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25EcmF3KGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgIC8vICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLl9sYWJlbCAhPSBudWxsKSB7XG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fbGFiZWwub25EcmF3KGNhbnZhcyk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICByZWZyZXNoKCk6IHZvaWQge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgKioqIHlvdSwgdGhpcyBmdW5jdGlvbiBpcyBub3QgYmVlbiBpbXBsZW1lbnRlZCB5ZXQhISEgXCIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBBbmltYXRpb24gPSBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbjtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGV4cG9ydCBjbGFzcyBCYXJTaGFwZSBleHRlbmRzIFBsb3RTaGFwZSB7XG4gICAgICAgIHN0YXRpYyBCYXJQcm9yaXR5Om51bWJlciA9U2hhcGUuUFJJT1JJVFkqMjtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0LHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlciwgc3R5bGU/OiBTdHlsZSwgc3Ryb2tlU3R5bGU/OiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICBsZXQgdG9wOiBudW1iZXIgPSB5O1xuICAgICAgICAgICAgbGV0IGxlZnQ6IG51bWJlciA9IHg7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0OiBudW1iZXIgPSBoO1xuICAgICAgICAgICAgbGV0IHdpZHRoOiBudW1iZXIgPSB3O1xuICAgICAgICAgICAgaWYgKGhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICB0b3AgPSB0b3AgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5hYnMoaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHkgPSArK0JhclNoYXBlLkJhclByb3JpdHk7XG4gICAgICAgICAgICB0aGlzLmxheW91dEluZm8ucmVzZXQobGVmdCwgdG9wLCBsZWZ0ICsgd2lkdGgsIHRvcCArIGhlaWdodCwgdGhpcy5wYWRkaW5nLCAwKTtcbiAgICAgICAgICAgIHRoaXMuX29sZExheW91dEluZm8gPSB0aGlzLmxheW91dEluZm8uY2xvbmUoKTtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICBpZiAoc3Ryb2tlU3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvbkRyYXdTaGFwZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgd2luZG93WydyZW5kZXJUaW1lcyddKys7XG4gICAgICAgICAgICBjYW52YXMuZHJhd1JlY3QodGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5zdGFydFBvaW50LCB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmVuZFBvaW50LCB0cnVlLCB0aGlzLl9zdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09OOlxuICAgICAgICAgICAgICAgICAgICBsZXQgYW5pbWF0aW9uX29uOiBCYXJXaWR0aEFuaW1hdGlvbiA9IG5ldyBCYXJXaWR0aEFuaW1hdGlvbih0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX29uLmR1cmF0aW9uID0gNDAwO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fb24uZnJvbSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vbi50byA9IDEuMztcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX29uLmZpbGxBZnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vbi5pZD1cIm1vdXNlT24gQW5pbWF0aW9uIFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uX29uKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbl9vdXQ6IEJhcldpZHRoQW5pbWF0aW9uID0gbmV3IEJhcldpZHRoQW5pbWF0aW9uKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fb3V0LmR1cmF0aW9uID0gMjAwO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fb3V0LmZyb20gPSAxLjM7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vdXQudG8gPSAxO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fb3V0LmlkPVwibW91c2VPdXQgQW5pbWF0aW9uIFwiO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX291dC5maWxsQWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbihhbmltYXRpb25fb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfTU9WRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfT1VUOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEJhckFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIHByaXZhdGUgcmVjdDogUmVjdDtcbiAgICAgICAgY29uc3RydWN0b3IocmVjdDogUmVjdCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZWFzZSA9IG5ldyBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkJvdW5jZUFuaW1hdGlvbkVhc2UoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOiBudW1iZXIsIGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIEJhclNoYXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBudW1iZXIgPSB0aGlzLmZyb20gKyAodGhpcy50byAtIHRoaXMuZnJvbSkgKiBpbnRlcnBvbGF0ZWRUaW1lO1xuICAgICAgICAgICAgICAgIGxldCByZWN0OiBSZWN0ID0gdGhpcy5yZWN0LmNsb25lKCk7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC50b3AgPSB0aGlzLnJlY3QudG9wICt0aGlzLnJlY3QuaGVpZ2h0LXRoaXMucmVjdC5oZWlnaHQgKnNjYWxlO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0ID0gdGhpcy5yZWN0LmhlaWdodCAqc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5yZWN0ID0gdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgIH1cblxuXG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBCYXJXaWR0aEFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIGlkOnN0cmluZz1cIlwiO1xuICAgICAgICBwcml2YXRlIHJlY3Q6IFJlY3Q7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJlY3Q6IFJlY3QpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmVhc2UgPSBuZXcgYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5Cb3VuY2VBbmltYXRpb25FYXNlKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGFwcGx5VHJhbnNmb3JtYXRpb24oaW50ZXJwb2xhdGVkVGltZTogbnVtYmVyLCBjYW52YXM6IENhbnZhcywgdmlldzogVmlldykge1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBCYXJTaGFwZSkge1xuICAgICAgICAgICAgICAgIGxldCBzY2FsZTogbnVtYmVyID0gdGhpcy5mcm9tICsgKHRoaXMudG8gLSB0aGlzLmZyb20pICogaW50ZXJwb2xhdGVkVGltZTtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMucmVjdC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIC8vIHNjYWxlID0gc2NhbGUgLSAxO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QubGVmdCA9IHRoaXMucmVjdC5sZWZ0ICsodGhpcy5yZWN0LndpZHRoLXRoaXMucmVjdC53aWR0aCAqc2NhbGUpLzI7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMucmVjdC53aWR0aCAqc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvblN0YXJ0QW5pYW10aW9uIFwiKTtcbiAgICAgICAgICAgIHN1cGVyLm9uU3RhcnRBbmlhbXRpb24oY2FudmFzLHZpZXcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJlY3QgPSB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LmNsb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgb25FbmRBbmltYXRpb24oY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uRW5kQW5pbWF0aW9uKGNhbnZhcyx2aWV3KTtcbiAgICAgICAgICAgIC8vIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QgPSB0aGlzLnJlY3Q7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uQW5pbWF0aW9uRW5kIFwiICsgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCArIFwiICBcIik7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBWaWV3U3RhdGUgPSBhbmRyb2lkLnZpZXcuVmlld1N0YXRlO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBBbmltYXRpb24gPSBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbjtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGltcG9ydCBEZWJ1ZyA9IGFuZHJvaWQuRGVidWc7XG4gICAgZXhwb3J0IGNsYXNzIEN1YmVTaGFwZSBleHRlbmRzIFBsb3RTaGFwZSB7XG4gICAgICAgIHN0YXRpYyBDdWJlUHJvcml0eTogbnVtYmVyID0gU2hhcGUuUFJJT1JJVFkgKiAxO1xuICAgICAgICBwcml2YXRlIF9fb2xkQ29sb3I6IGFueSA9IG51bGw7XG4gICAgICAgIHB1YmxpYyBzY2FsZUNhbGxCYWNrOiAocmVjdDogUmVjdCkgPT4gdm9pZDtcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZztcblxuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQseDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyLCBzdHlsZT86IFN0eWxlLCBzdHJva2VTdHlsZT86IFN0cm9rZVN0eWxlKSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgICAgIGxldCB0b3A6IG51bWJlciA9IHk7XG4gICAgICAgICAgICBsZXQgbGVmdDogbnVtYmVyID0geDtcbiAgICAgICAgICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IGg7XG4gICAgICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHc7XG4gICAgICAgICAgICBpZiAoaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgICAgIHRvcCA9IHRvcCArIGhlaWdodDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmFicyhoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9ICsrQ3ViZVNoYXBlLkN1YmVQcm9yaXR5O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGxlZnQsIHRvcCwgbGVmdCArIHdpZHRoLCB0b3AgKyBoZWlnaHQsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB0aGlzLl9vbGRMYXlvdXRJbmZvID0gdGhpcy5sYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgaWYgKHN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZSA9IERlZmF1bHQuc3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgaWYgKHN0cm9rZVN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IERlZmF1bHQuc3Ryb2tlc3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIG9uRHJhd1NoYXBlKGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICB3aW5kb3dbJ3JlbmRlclRpbWVzJ10rKztcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3UmVjdCh0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LnN0YXJ0UG9pbnQsIHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QuZW5kUG9pbnQsIHRydWUsIHRoaXMuX3N0eWxlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbiA9PSBudWxsIHx8IHRoaXMuYW5pbWF0aW9uLmlzQW5pYW10aW9uRW5kKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLmRyYXdUZXh0KHRoaXMudGV4dCwgdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5zdGFydFBvaW50LCBEZWZhdWx0LmZvbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgaW52YWxpZGF0ZShmbGc6IGJvb2xlYW4pIHtcbiAgICAgICAgICAgIHN1cGVyLmludmFsaWRhdGUoZmxnKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY3ViZWludmFsaWRhdGUgIFwiICsoIHdpbmRvd1snY3ViZWludmFsaWRhdGUnXSA9PW51bGw/IHdpbmRvd1snY3ViZWludmFsaWRhdGUnXT0wOiB3aW5kb3dbJ2N1YmVpbnZhbGlkYXRlJ10rKykpO1xuICAgICAgICAgICAgRGVidWcubG9nc3RhY2soXCJjdWJlaW52YWxpZGF0ZSAgXCIgKyAod2luZG93WydjdWJlaW52YWxpZGF0ZSddID09IG51bGwgPyB3aW5kb3dbJ2N1YmVpbnZhbGlkYXRlJ10gPSAwIDogd2luZG93WydjdWJlaW52YWxpZGF0ZSddKyspKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgb25Nb3VzZUV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PTjpcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3R5bGUuYmFja2dyb3VuZCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX19vbGRDb2xvciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29sZENvbG9yID0gdGhpcy5zdHlsZS5iYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yczogYW55W10gPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IodGhpcy5fX29sZENvbG9yLCAnI2ZmZmZmZicsIDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3JzWzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibW91c2Ugb24gXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kID0gdGhpcy5fX29sZENvbG9yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibW91c2Ugb3V0IFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfTU9WRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fQ0xJQ0s6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2xpY2sgXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FsZUNhbGxCYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NhbGVDYWxsQmFjayh0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0Q29tcGFyZWRBbmltYXRpb24oZnJvbXZpZXc6IENvbXBhcmVkVmlldyk6IEFuaW1hdGlvbiB7XG4gICAgICAgICAgICBsZXQgYW5pbWF0aW9uID0gbmV3IF9BbmltYXRpb24oZnJvbXZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuY2xvbmUoKSwgdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5jbG9uZSgpKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5kdXJhdGlvbiA9IDUwMDtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5maWxsQWZ0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgYW5pbWF0aW9uLmZyb20gPSAwO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnRvID0gMTtcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRpb247XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGNsYXNzIF9BbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb24ge1xuICAgICAgICBwcml2YXRlIGZyb21yZWN0OiBSZWN0O1xuICAgICAgICBwcml2YXRlIHRvcmVjdDogUmVjdDtcbiAgICAgICAgY29uc3RydWN0b3IoZnJvbXJlY3Q6IFJlY3QsIHRvcmVjdDogUmVjdCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZWFzZSA9IG5ldyBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbkVhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZnJvbXJlY3QgPSBmcm9tcmVjdDtcbiAgICAgICAgICAgIHRoaXMudG9yZWN0ID0gdG9yZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOiBudW1iZXIsIGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG5cbiAgICAgICAgICAgIGxldCBzY2FsZTogbnVtYmVyID0gdGhpcy5mcm9tICsgKHRoaXMudG8gLSB0aGlzLmZyb20pICogaW50ZXJwb2xhdGVkVGltZTtcblxuICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5sZWZ0ID0gdGhpcy5mcm9tcmVjdC5sZWZ0ICsgKHRoaXMudG9yZWN0LmxlZnQgLSB0aGlzLmZyb21yZWN0LmxlZnQpICogc2NhbGU7XG4gICAgICAgICAgICB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LnRvcCA9IHRoaXMuZnJvbXJlY3QudG9wICsgKHRoaXMudG9yZWN0LnRvcCAtIHRoaXMuZnJvbXJlY3QudG9wKSAqIHNjYWxlO1xuICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMuZnJvbXJlY3Qud2lkdGggKyAodGhpcy50b3JlY3Qud2lkdGggLSB0aGlzLmZyb21yZWN0LndpZHRoKSAqIHNjYWxlO1xuICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQgPSB0aGlzLmZyb21yZWN0LmhlaWdodCArICh0aGlzLnRvcmVjdC5oZWlnaHQgLSB0aGlzLmZyb21yZWN0LmhlaWdodCkgKiBzY2FsZTtcblxuICAgICAgICB9XG4gICAgICAgIG9uU3RhcnRBbmlhbXRpb24oY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uU3RhcnRBbmlhbXRpb24oY2FudmFzLCB2aWV3KTtcblxuICAgICAgICB9XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkVuZEFuaW1hdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdCA9IHZpZXcuX29sZExheW91dEluZm8uaW5uZXJyZWN0LmNsb25lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgQ3ViZUFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIHByaXZhdGUgcmVjdDogUmVjdDtcblxuICAgICAgICBjb25zdHJ1Y3RvcihyZWN0OiBSZWN0KSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5lYXNlID0gbmV3IGFuZHJvaWQudmlldy5hbmltYXRpb24uQm91bmNlQW5pbWF0aW9uRWFzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOiBudW1iZXIsIGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIEN1YmVTaGFwZSkge1xuICAgICAgICAgICAgICAgIGxldCBzY2FsZTogbnVtYmVyID0gdGhpcy5mcm9tICsgKHRoaXMudG8gLSB0aGlzLmZyb20pICogaW50ZXJwb2xhdGVkVGltZTtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMucmVjdC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIC8vIHNjYWxlID0gc2NhbGUgLSAxO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QubGVmdCA9IHRoaXMucmVjdC5sZWZ0ICsgKHRoaXMucmVjdC53aWR0aCAtIHRoaXMucmVjdC53aWR0aCAqIHNjYWxlKSAvIDI7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMucmVjdC53aWR0aCAqIHNjYWxlO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QudG9wID0gdGhpcy5yZWN0LnRvcCArICh0aGlzLnJlY3QuaGVpZ2h0IC0gdGhpcy5yZWN0LmhlaWdodCAqIHNjYWxlKSAvIDI7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQgPSB0aGlzLnJlY3QuaGVpZ2h0ICogc2NhbGU7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2JhciBoZWlnaHQgPT09ICcgKyB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LmhlaWdodCArXCIgc2NhbGUgXCIgKyBzY2FsZSArXCIgIGludGVycG9sYXRlZFRpbWUgXCIraW50ZXJwb2xhdGVkVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvblN0YXJ0QW5pYW10aW9uIFwiKTtcbiAgICAgICAgICAgIHN1cGVyLm9uU3RhcnRBbmlhbXRpb24oY2FudmFzLCB2aWV3KTtcbiAgICAgICAgICAgIHRoaXMucmVjdCA9IHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBvbkVuZEFuaW1hdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25FbmRBbmltYXRpb24oY2FudmFzLCB2aWV3KTtcbiAgICAgICAgICAgIC8vIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QgPSB0aGlzLnJlY3Q7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uQW5pbWF0aW9uRW5kIFwiICsgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCArIFwiICBcIik7XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3U3RhdGUgPSBhbmRyb2lkLnZpZXcuVmlld1N0YXRlO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgZXhwb3J0IGNsYXNzIFJhZGlhbEJhclNoYXBlIGV4dGVuZHMgUGxvdFNoYXBlIHtcbiAgICAgICAgcHJvdGVjdGVkIF9jeDpudW1iZXI7XG4gICAgICAgIHByb3RlY3RlZCBfY3k6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgX2lubmVyUmFkaXVzOm51bWJlcjtcbiAgICAgICAgcHVibGljIF9yYWRpdXM6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgX3N0YXJ0QW5nbGU6bnVtYmVyO1xuICAgICAgICBwdWJsaWMgX3N3ZWVwOm51bWJlcjtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0LGN4Om51bWJlcixjeTpudW1iZXIsaW5uZXJSYWRpdXM6bnVtYmVyLHJhZGl1czpudW1iZXIsc3RhcnRBbmdsZTpudW1iZXIsc3dlZXA6bnVtYmVyLHN0eWxlPzpTdHlsZSxzdHJva2VTdHlsZT86U3Ryb2tlU3R5bGUpe1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLmxheW91dEluZm8ucmVzZXQoY3gtcmFkaXVzLGN5LXJhZGl1cyxjeCtyYWRpdXMsY3krcmFkaXVzLHRoaXMucGFkZGluZywwKTtcbiAgICAgICAgICAgIHRoaXMuX29sZExheW91dEluZm89IHRoaXMubGF5b3V0SW5mby5jbG9uZSgpO1xuICAgICAgICAgICAgdGhpcy5fY3ggPSBjeDtcbiAgICAgICAgICAgIHRoaXMuX2N5ID0gY3k7XG4gICAgICAgICAgICB0aGlzLl9pbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzO1xuICAgICAgICAgICAgdGhpcy5fcmFkaXVzID0gcmFkaXVzO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9zd2VlcCA9IHN3ZWVwO1xuICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgICAgIGlmKHN0eWxlID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID1zdHJva2VTdHlsZTtcbiAgICAgICAgICAgIGlmKHN0cm9rZVN0eWxlID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZS5zdHJva2VXaWR0aCA9MTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZS5zdHJva2VDb2xvciA9ICdyZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhpcy5fc3dlZXAgPCAwKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gdGhpcy5fc3RhcnRBbmdsZSArIHRoaXMuX3N3ZWVwO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N3ZWVwID0gdGhpcy5fc3dlZXAgKi0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldHB0cyhzaXplOm51bWJlcik6e3hzOm51bWJlcltdLHlzOm51bWJlcltdfXtcbiAgICAgICAgICAgIGlmKHRoaXMuX3B0cyA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9wdHMgPSBVdGlsLmNyZWF0ZVB0c0Zyb21SYWRpYWxCYXIodGhpcy5fc3RhcnRBbmdsZSx0aGlzLl9zdGFydEFuZ2xlK3RoaXMuX3N3ZWVwLHRoaXMuX3JhZGl1cyx0aGlzLl9pbm5lclJhZGl1cyxuZXcgUG9pbnQodGhpcy5fY3gsdGhpcy5fY3kpLHRoaXMucHRjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHRzO1xuICAgICAgICB9XG4gICAgICAgIG9uRHJhd1NoYXBlKGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBjYW52YXMuZHJhd0RvbnV0KHRoaXMuX2N4LHRoaXMuX2N5LHRoaXMuX3JhZGl1cyx0aGlzLl9pbm5lclJhZGl1cyx0aGlzLl9zdGFydEFuZ2xlLHRoaXMuX3N3ZWVwLHRoaXMuX3N0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3U3RhdGUgPSBhbmRyb2lkLnZpZXcuVmlld1N0YXRlO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IEFuaW1hdGlvbiA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBleHBvcnQgY2xhc3MgU3VuYnVyc3RTaGFwZSBleHRlbmRzIFBsb3RTaGFwZSB7XG4gICAgICAgIHByb3RlY3RlZCBfY3g6bnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgX2N5Om51bWJlcjtcbiAgICAgICAgcHVibGljIF9pbm5lclJhZGl1czpudW1iZXI7XG4gICAgICAgIHB1YmxpYyBfcmFkaXVzOm51bWJlcjtcbiAgICAgICAgcHVibGljIF9zdGFydEFuZ2xlOm51bWJlcjtcbiAgICAgICAgcHVibGljIF9zd2VlcDpudW1iZXI7XG4gICAgICAgIHB1YmxpYyB0ZXh0OnN0cmluZztcblxuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQsY3g6bnVtYmVyLGN5Om51bWJlcixpbm5lclJhZGl1czpudW1iZXIscmFkaXVzOm51bWJlcixzdGFydEFuZ2xlOm51bWJlcixzd2VlcDpudW1iZXIsc3R5bGU/OlN0eWxlLHN0cm9rZVN0eWxlPzpTdHJva2VTdHlsZSl7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0SW5mby5yZXNldChjeC1yYWRpdXMsY3ktcmFkaXVzLGN4K3JhZGl1cyxjeStyYWRpdXMsdGhpcy5wYWRkaW5nLDApO1xuICAgICAgICAgICAgdGhpcy5fb2xkTGF5b3V0SW5mbz0gdGhpcy5sYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICB0aGlzLl9jeCA9IGN4O1xuICAgICAgICAgICAgdGhpcy5fY3kgPSBjeTtcbiAgICAgICAgICAgIHRoaXMuX2lubmVyUmFkaXVzID0gaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICB0aGlzLl9yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHRoaXMuX3N3ZWVwID0gc3dlZXA7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgaWYoc3R5bGUgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBEZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPXN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgaWYoc3Ryb2tlU3R5bGUgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhpcy5fc3dlZXAgPCAwKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gdGhpcy5fc3RhcnRBbmdsZSArIHRoaXMuX3N3ZWVwO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N3ZWVwID0gdGhpcy5fc3dlZXAgKi0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgb25EcmF3U2hhcGUoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3RG9udXQodGhpcy5fY3gsdGhpcy5fY3ksdGhpcy5fcmFkaXVzLHRoaXMuX2lubmVyUmFkaXVzLHRoaXMuX3N0YXJ0QW5nbGUsdGhpcy5fc3dlZXAsdGhpcy5fc3R5bGUpO1xuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgXG4gICAgZXhwb3J0IGNsYXNzIFJhZGl1c0FuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIHByaXZhdGUgX3JhZGl1czpudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX3N3ZWVwOm51bWJlcjtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5lYXNlID0gbmV3IGFuZHJvaWQudmlldy5hbmltYXRpb24uQm91bmNlQW5pbWF0aW9uRWFzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOiBudW1iZXIsIGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIFN1bmJ1cnN0U2hhcGUgfHwgdmlldyBpbnN0YW5jZW9mIFJhZGlhbEJhclNoYXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBudW1iZXIgPSB0aGlzLmZyb20gKyAodGhpcy50byAtIHRoaXMuZnJvbSkgKiBpbnRlcnBvbGF0ZWRUaW1lO1xuXG4gICAgICAgICAgICAgICAgICB2aWV3Ll9yYWRpdXMgPSBzY2FsZSAqIHRoaXMuX3JhZGl1cztcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYmFyIGhlaWdodCA9PT0gJyArIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0ICtcIiBzY2FsZSBcIiArIHNjYWxlICtcIiAgaW50ZXJwb2xhdGVkVGltZSBcIitpbnRlcnBvbGF0ZWRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvblN0YXJ0QW5pYW10aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uU3RhcnRBbmlhbXRpb24gXCIpO1xuICAgICAgICAgICAgc3VwZXIub25TdGFydEFuaWFtdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBTdW5idXJzdFNoYXBlIHx8IHZpZXcgaW5zdGFuY2VvZiBSYWRpYWxCYXJTaGFwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JhZGl1cyA9IHZpZXcuX3JhZGl1cztcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2VlcCA9IHZpZXcuX3N3ZWVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgb25FbmRBbmltYXRpb24oY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uRW5kQW5pbWF0aW9uKGNhbnZhcywgdmlldyk7XG4gICAgICAgICAgICAvLyB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0ID0gdGhpcy5yZWN0O1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvbkFuaW1hdGlvbkVuZCBcIiArIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGggKyBcIiAgXCIpO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBTdW5idXJzdFNoYXBlIHx8IHZpZXcgaW5zdGFuY2VvZiBSYWRpYWxCYXJTaGFwZSkge1xuICAgICAgICAgICAgICAgIHZpZXcuX3JhZGl1cyA9IHRoaXMuX3JhZGl1cztcbiAgICAgICAgICAgICAgICB2aWV3Ll9zd2VlcCA9IHRoaXMuX3N3ZWVwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIFN3ZWVwQW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgICAgICAgcHJpdmF0ZSBfcmFkaXVzOm51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfc3dlZXA6bnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmVhc2UgPSBuZXcgYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5Cb3VuY2VBbmltYXRpb25FYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhcHBseVRyYW5zZm9ybWF0aW9uKGludGVycG9sYXRlZFRpbWU6IG51bWJlciwgY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpIHtcbiAgICAgICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgU3VuYnVyc3RTaGFwZSB8fCB2aWV3IGluc3RhbmNlb2YgUmFkaWFsQmFyU2hhcGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2NhbGU6IG51bWJlciA9IHRoaXMuZnJvbSArICh0aGlzLnRvIC0gdGhpcy5mcm9tKSAqIGludGVycG9sYXRlZFRpbWU7XG5cbiAgICAgICAgICAgICAgICAgIHZpZXcuX3N3ZWVwID0gc2NhbGUgKiB0aGlzLl9zd2VlcDtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYmFyIGhlaWdodCA9PT0gJyArIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0ICtcIiBzY2FsZSBcIiArIHNjYWxlICtcIiAgaW50ZXJwb2xhdGVkVGltZSBcIitpbnRlcnBvbGF0ZWRUaW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvblN0YXJ0QW5pYW10aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uU3RhcnRBbmlhbXRpb24gXCIpO1xuICAgICAgICAgICAgc3VwZXIub25TdGFydEFuaWFtdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBTdW5idXJzdFNoYXBlIHx8IHZpZXcgaW5zdGFuY2VvZiBSYWRpYWxCYXJTaGFwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JhZGl1cyA9IHZpZXcuX3JhZGl1cztcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2VlcCA9IHZpZXcuX3N3ZWVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgb25FbmRBbmltYXRpb24oY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uRW5kQW5pbWF0aW9uKGNhbnZhcywgdmlldyk7XG4gICAgICAgICAgICAvLyB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0ID0gdGhpcy5yZWN0O1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvbkFuaW1hdGlvbkVuZCBcIiArIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGggKyBcIiAgXCIpO1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBTdW5idXJzdFNoYXBlIHx8IHZpZXcgaW5zdGFuY2VvZiBSYWRpYWxCYXJTaGFwZSkge1xuICAgICAgICAgICAgICAgIHZpZXcuX3JhZGl1cyA9IHRoaXMuX3JhZGl1cztcbiAgICAgICAgICAgICAgICB2aWV3Ll9zd2VlcCA9IHRoaXMuX3N3ZWVwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgQW5pbWF0aW9uID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb247XG4gICAgaW1wb3J0IFNjYWxlQW5pbWF0aW9uID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5TY2FsZUFuaW1hdGlvbjtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBleHBvcnQgY2xhc3MgU2NhdHRlclNoYXBlIGV4dGVuZHMgUGxvdFNoYXBlIHtcbiAgICAgICAgc3RhdGljIFNjYXR0ZXJQcm9yaXR5Om51bWJlciA9U2hhcGUuUFJJT1JJVFkqMztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKGM6Q29udGV4dCx4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIHN0eWxlPzogU3R5bGUsIHN0cm9rZVN0eWxlPzogU3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgICAgIHN1cGVyKGMpO1xuXG4gICAgICAgICAgICBsZXQgdG9wOiBudW1iZXIgPSB5O1xuICAgICAgICAgICAgbGV0IGxlZnQ6IG51bWJlciA9IHg7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0OiBudW1iZXIgPSBoO1xuICAgICAgICAgICAgbGV0IHdpZHRoOiBudW1iZXIgPSB3O1xuICAgICAgICAgICAgaWYgKGhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICB0b3AgPSB0b3AgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5hYnMoaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGF5b3V0SW5mby5yZXNldChsZWZ0LCB0b3AsIGxlZnQgKyB3aWR0aCwgdG9wICsgaGVpZ2h0LCB0aGlzLnBhZGRpbmcsIDApO1xuICAgICAgICAgICAgdGhpcy5fb2xkTGF5b3V0SW5mbyA9IHRoaXMubGF5b3V0SW5mby5jbG9uZSgpO1xuICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgICAgIGlmIChzdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBEZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBzdHJva2VTdHlsZTtcbiAgICAgICAgICAgIGlmIChzdHJva2VTdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlLnN0cm9rZUNvbG9yID0nYmxhY2snO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlLnN0cm9rZVdpZHRoID0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9ICsrU2NhdHRlclNoYXBlLlNjYXR0ZXJQcm9yaXR5O1xuXG4gICAgICAgIH1cbiAgICAgICAgb25EcmF3U2hhcGUoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3QXJjKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QsIDAsIDIgKiAxODAsIHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByb3RlY3RlZCBfZHJhd0FuaW1hdGlvbihjYW52YXM6Q2FudmFzKTp2b2lke1xuICAgICAgICAvLyAgICAgY2FudmFzLmRyYXdMaW5lcyh0aGlzLmFuaW1hdGlvblhzLHRoaXMuYW5pbWF0aW9uWXMsdGhpcy5fc3Ryb2tlU3R5bGUpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZ2V0cHRzKHNpemU6bnVtYmVyKTp7eHM6bnVtYmVyW10seXM6bnVtYmVyW119e1xuICAgICAgICAgICAgaWYodGhpcy5fcHRzID09IG51bGwpe1xuICAgICAgICAgICAgICAgIGxldCByYWRpdXM6bnVtYmVyID0gKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGg8dGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQ/dGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aDp0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmhlaWdodCkvMjtcbiAgICAgICAgICAgICAgICBsZXQgY2VudGVyIDpQb2ludCA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QuY2VudGVyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3B0cyA9IFV0aWwuY3JlYXRlUHRzRnJvbUNpcmNsZSh0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LndpZHRoLzIsY2VudGVyLHRoaXMucHRjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wdHM7XG4gICAgICAgIH1cblxuXG4gICAgICAgIG9uTW91c2VFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2hhcGUgPT09PSBcIiArIGV2ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PTjpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogU2NhdHRlckFuaW1hdGlvbiA9IG5ldyBTY2F0dGVyQW5pbWF0aW9uKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZHVyYXRpb24gPSA0MDA7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5mcm9tID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRvID0gMS4yO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZmlsbEFmdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbihhbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PVVQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb25fb3V0OiBTY2F0dGVyQW5pbWF0aW9uID0gbmV3IFNjYXR0ZXJBbmltYXRpb24odGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vdXQuZHVyYXRpb24gPSAyMDA7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vdXQuZnJvbSA9IDEuMjtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX291dC50byA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9vdXQuZmlsbEFmdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuYW5pbWF0aW9uICE9IG51bGwgJiYgdGhpcy5hbmltYXRpb24gaW5zdGFuY2VvZiBTY2F0dGVyQW5pbWF0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmludGVycnVwdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uX291dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX01PVkU6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgU2NhdHRlckFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIHByaXZhdGUgcmVjdDogUmVjdDtcbiAgICAgICAgY29uc3RydWN0b3IocmVjdDogUmVjdCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZWFzZSA9IG5ldyBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkJvdW5jZUFuaW1hdGlvbkVhc2UoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOiBudW1iZXIsIGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG4gICAgICAgICAgICAvLyBpZiAodmlldyBpbnN0YW5jZW9mIFNjYXR0ZXJTaGFwZSkge1xuXG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlOiBudW1iZXIgPSB0aGlzLmZyb20gKyAodGhpcy50byAtIHRoaXMuZnJvbSkgKiBpbnRlcnBvbGF0ZWRUaW1lO1xuICAgICAgICAgICAgICAgIC8vIGxldCBkeCA6bnVtYmVyPS12aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgLy8gbGV0IGR5IDpudW1iZXI9LXZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QudG9wO1xuICAgICAgICAgICAgICAgIC8vIGNhbnZhcy50cmFuc2xhdGUoZHgsZHkpO1xuICAgICAgICAgICAgICAgIC8vIGNhbnZhcy5zY2FsZShzY2FsZSxzY2FsZSk7XG4gICAgICAgICAgICAgICAgLy8gY2FudmFzLnRyYW5zbGF0ZSh2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LndpZHRoLHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMucmVjdC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIHNjYWxlID0gc2NhbGUgLSAxO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QubGVmdCA9IHRoaXMucmVjdC5sZWZ0IC0gKHNjYWxlICogdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QudG9wID0gdGhpcy5yZWN0LnRvcCAtIChzY2FsZSAqIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMucmVjdC53aWR0aCArIChzY2FsZSAqIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGgpO1xuICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0ID0gdGhpcy5yZWN0LmhlaWdodCArIChzY2FsZSAqIHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInNjYXR0ZXIgd2lkdGggIFwiICsgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCArIFwiIHJlY3Qud2lkdGggXCIgKyByZWN0LndpZHRoICsgXCIgc2NhbGUgXCIgKyBzY2FsZSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvblN0YXJ0QW5pYW10aW9uIFwiKTtcbiAgICAgICAgICAgIHRoaXMucmVjdCA9IHZpZXcubGF5b3V0SW5mby5pbm5lcnJlY3QuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBvbkVuZEFuaW1hdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgLy8gdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdCA9IHRoaXMucmVjdDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwib25BbmltYXRpb25FbmQgXCIgKyB2aWV3LmxheW91dEluZm8uaW5uZXJyZWN0LndpZHRoICsgXCIgIFwiKTtcblxuICAgICAgICB9XG5cblxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3U3RhdGUgPSBhbmRyb2lkLnZpZXcuVmlld1N0YXRlO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcblxuICAgIGV4cG9ydCBjbGFzcyBMaW5lc1NoYXBlIGV4dGVuZHMgUGxvdFNoYXBlIHtcbiAgICAgICAgcHJpdmF0ZSBfX3hzOm51bWJlcltdO1xuICAgICAgICBwcml2YXRlIF9feXM6bnVtYmVyW107XG4gICAgICAgIHN0YXRpYyBMaW5lc1Byb3JpdHk6bnVtYmVyID0gUGxvdFNoYXBlLlBSSU9SSVRZICo0O1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OkNvbnRleHQseHM6bnVtYmVyW10seXM6bnVtYmVyW10sc3R5bGU/OlN0eWxlLHN0cm9rZVN0eWxlPzpTdHJva2VTdHlsZSl7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHkgPSArK0xpbmVzU2hhcGUuTGluZXNQcm9yaXR5O1xuICAgICAgICAgICAgdGhpcy5fX3hzID0geHM7XG4gICAgICAgICAgICB0aGlzLl9feXMgPSB5cztcblxuICAgICAgICAgICAgbGV0IGw6IG51bWJlciA9IFV0aWxpdHkubWluKHhzKTtcbiAgICAgICAgICAgIGxldCB0OiBudW1iZXIgPSBVdGlsaXR5Lm1pbih5cyk7XG4gICAgICAgICAgICBsZXQgcjogbnVtYmVyID0gVXRpbGl0eS5tYXgoeHMpO1xuICAgICAgICAgICAgbGV0IGI6IG51bWJlciA9IFV0aWxpdHkubWF4KHlzKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0SW5mby5yZXNldChsLCB0LHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB0aGlzLl9vbGRMYXlvdXRJbmZvID0gdGhpcy5sYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICB0aGlzLl9zdHlsZSA9IHN0eWxlO1xuICAgICAgICAgICAgaWYoc3R5bGUgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBEZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPXN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgaWYoc3Ryb2tlU3R5bGUgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgZ2V0IHN0cm9rZVN0eWxlKCk6U3Ryb2tlU3R5bGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHN0cm9rZVN0eWxlKHZhbHVlOlN0cm9rZVN0eWxlKXtcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZ2V0cHRzKHNpemU6bnVtYmVyKTp7eHM6bnVtYmVyW10seXM6bnVtYmVyW119e1xuICAgICAgICAgICAgaWYodGhpcy5fcHRzID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3B0cyA9IHt4czp0aGlzLl9feHMseXM6dGhpcy5fX3lzfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wdHM7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFjZSh4Om51bWJlcix5Om51bWJlcik6Ym9vbGVhbntcbiAgICAgICAgICAgIGlmKHRoaXMubGF5b3V0SW5mby5vdXR0ZXJyZWN0LmNvbnRhaW5zKHgseSkpe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbih0aGlzLl9feHMubGVuZ3RoLHRoaXMuX195cy5sZW5ndGgpOyArK2kpe1xuICAgICAgICAgICAgICAgICAgICBpZihVdGlsLlBvaW50MkxpbmUodGhpcy5fX3hzW2ldLHRoaXMuX195c1tpXSx0aGlzLl9feHNbaSsxXSx0aGlzLl9feXNbaSsxXSx4LHkpPCAxMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAgZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25EcmF3U2hhcGUoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGNhbnZhcy5zYXZlKCk7XG4gICAgICAgICAgICBjYW52YXMuY2xpcCh0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KTtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3TGluZXModGhpcy5fX3hzLHRoaXMuX195cyx0aGlzLl9zdHJva2VTdHlsZSk7XG4gICAgICAgICAgICBjYW52YXMucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIF9kcmF3QW5pbWF0aW9uKGNhbnZhczpDYW52YXMpOnZvaWR7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZHJhd0FuaW1hdGlvbiAnKVxuICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lcyh0aGlzLmFuaW1hdGlvblhzLHRoaXMuYW5pbWF0aW9uWXMsdGhpcy5fc3Ryb2tlU3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgQW5pbWF0aW9uID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb247XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgIGV4cG9ydCBjbGFzcyBBcmVhU2hhcGUgZXh0ZW5kcyBQbG90U2hhcGUge1xuICAgICAgICBwcml2YXRlIF9feHM6IG51bWJlcltdO1xuICAgICAgICBwcml2YXRlIF9feXM6IG51bWJlcltdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6Q29udGV4dCx4czogbnVtYmVyW10sIHlzOiBudW1iZXJbXSwgc3R5bGU/OiBTdHlsZSwgc3Ryb2tlU3R5bGU/OiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgc3VwZXIoY29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5ID0gU2hhcGUuUFJJT1JJVFkgKyAxO1xuICAgICAgICAgICAgdGhpcy5fX3hzID0geHM7XG4gICAgICAgICAgICB0aGlzLl9feXMgPSB5cztcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBsZXQgbDogbnVtYmVyID0gTWF0aC5taW4oLi4ueHMpO1xuICAgICAgICAgICAgbGV0IHQ6IG51bWJlciA9IE1hdGgubWluKC4uLnlzKTtcbiAgICAgICAgICAgIGxldCByOiBudW1iZXIgPSBNYXRoLm1heCguLi54cyk7XG4gICAgICAgICAgICBsZXQgYjogbnVtYmVyID0gTWF0aC5tYXgoLi4ueXMpO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGwsIHQsIHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB0aGlzLl9vbGRMYXlvdXRJbmZvID0gdGhpcy5sYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICBpZiAoc3Ryb2tlU3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBzdHJva2VTdHlsZSgpOiBTdHJva2VTdHlsZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHN0cm9rZVN0eWxlKHZhbHVlOiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyYWNlKHg6bnVtYmVyLHk6bnVtYmVyKTpib29sZWFue1xuICAgICAgICAgICAgcmV0dXJuIFV0aWwuSXNQb2ludEluUG9seWdvbjIobmV3IFBvaW50KHgseSksdGhpcy5fX3hzLHRoaXMuX195cyk7XG4gICAgICAgIH1cblxuICAgICAgICBvbkRyYXdTaGFwZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgY2FudmFzLnNhdmUoKTtcbiAgICAgICAgICAgIGNhbnZhcy5jbGlwKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QpO1xuICAgICAgICAgICAgY2FudmFzLmRyYXdQb2x5Z29uKHRoaXMuX194cyx0aGlzLl9feXMsdGhpcy5zdHlsZSk7XG4gICAgICAgICAgICBjYW52YXMucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0cHRzKHNpemU6bnVtYmVyKTp7eHM6bnVtYmVyW10seXM6bnVtYmVyW119e1xuICAgICAgICAgICAgaWYodGhpcy5fcHRzID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX3B0cyA9IHt4czp0aGlzLl9feHMseXM6dGhpcy5fX3lzfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wdHM7XG4gICAgICAgIH1cblxuICAgICAgICBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09OOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm1vdXNlIG9uIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfT1VUOlxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibW91c2Ugb3V0IFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfTU9WRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfT1VUOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEFyZWFBbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb24ge1xuICAgICAgICBwcml2YXRlIHJlY3Q6IFJlY3Q7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJlY3Q6IFJlY3QpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmVhc2UgPSBuZXcgYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb25FYXNlKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGFwcGx5VHJhbnNmb3JtYXRpb24oaW50ZXJwb2xhdGVkVGltZTogbnVtYmVyLCBjYW52YXM6IENhbnZhcywgdmlldzogVmlldykge1xuXG4gICAgICAgICAgICBsZXQgc2NhbGU6IG51bWJlciA9IHRoaXMuZnJvbSArICh0aGlzLnRvIC0gdGhpcy5mcm9tKSAqIGludGVycG9sYXRlZFRpbWU7XG4gICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMucmVjdC5jbG9uZSgpO1xuICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMucmVjdC53aWR0aCAqIHNjYWxlO1xuXG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5yZWN0ID0gdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgIH1cblxuXG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZSA9IGFuZHJvaWQudmlldy5WaWV3U3RhdGU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBleHBvcnQgY2xhc3MgQXhpc0xpbmVTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgICAgICAgcHJpdmF0ZSBzdGFydFBvaW50OiBQb2ludDtcbiAgICAgICAgcHJpdmF0ZSBlbmRQb2ludDogUG9pbnQ7XG4gICAgICAgIGNvbnN0cnVjdG9yKGM6Q29udGV4dCx4OiBudW1iZXIsIHk6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlciwgc3Ryb2tlU3R5bGU/OiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgICAgICB0aGlzLmVuZFBvaW50ID0gbmV3IFBvaW50KGV4LCBleSk7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgaWYgKHN0cm9rZVN0eWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IERlZmF1bHQuc3Ryb2tlc3R5bGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBvbkRyYXdTaGFwZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lKHRoaXMuc3RhcnRQb2ludCwgdGhpcy5lbmRQb2ludCxcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHJlZnJlc2goKSB7IH1cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0e1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDsgICAgXG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIC8qKlxuICAgICAqIEJhc2VMYXlvdXRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgQmFzZUxheW91dHtcbiAgICAgICAgcHJvdGVjdGVkIF9fc2hhcGVsaXN0IDpQbG90U2hhcGVbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9fY29udGV4dDpDb250ZXh0O1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OkNvbnRleHQpe1xuICAgICAgICAgICAgdGhpcy5fX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGdldCBjb250ZXh0KCk6Q29udGV4dHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb252ZXJ0KC4uLmFyZ3MpOlBsb3RTaGFwZVtde1xuICAgICAgICAgICAgdGhyb3cgJ2Z1Y2sgRXJyb3InO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgc2hhcGVMaXN0KCk6UGxvdFNoYXBlW117XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NoYXBlbGlzdDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cblxuICAgICAgICBcbiAgXG4gICBcbiAgICBcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbntcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7ICAgIFxuICAgIC8qKlxuICAgICAqIEJhc2VMYXlvdXRcbiAgICAgKi9cbiAgICBleHBvcnQgY2xhc3MgQ2FydGVzaWFuQmFzZUxheW91dCBleHRlbmRzIEJhc2VMYXlvdXR7XG4gICAgICAgIHJlYWRvbmx5IHNjYWxlUGFpcnMgOiB7ICBzZXJpZXM6c3RyaW5nW10sZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfVtdOyAgICAgICAgICAgIFxuICAgICAgICBcbiAgICB9XG5cblxuICAgICAgICBcbiAgXG4gICBcbiAgICBcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcblxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYXJ0ZXNpYW5MYXlvdXQgZXh0ZW5kcyBCYXNlTGF5b3V0IHtcbiAgICAgICAgcHVibGljIGJhclN0eWxlOiBTdHlsZSA9IERlZmF1bHQuc3R5bGU7XG4gICAgICAgIHB1YmxpYyBsaW5lU3R5bGU6IFN0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgcHJvdGVjdGVkIF9fc2NhbGVQYWlyczogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W107XG4gICAgICAgIHByb3RlY3RlZCBfbG9jYXRpb25DYWNoZTogeyBrZXk6IHN0cmluZyB8IG51bWJlciwgcG9pbnRzOiBhbnlbXSB9W10gPSBbXTtcbiAgICAgICAgcHJvdGVjdGVkIF9zZXJpZXNsaXN0OiBTZXJpZXNbXTtcbiAgICAgICAgcHJvdGVjdGVkIF9zdGFjazogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcm90ZWN0ZWQgX3JlY3Q6IFJlY3QgPSBudWxsO1xuICAgICAgICBwcm90ZWN0ZWQgX2VuY29kaW5nOiBFbmNvZGluZztcblxuICAgICAgICBjb25zdHJ1Y3RvciggYzpDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgfVxuICAgICAgICBjb252ZXJ0KHNlcmllc2xpc3Q6IFNlcmllc1tdLCBlbmNvZGluZzogRW5jb2RpbmcsIHJlY3Q6IFJlY3QsY2FudmFzOkNhbnZhcyk6IFBsb3RTaGFwZVtdIHtcbiAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Nlcmllc2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHNlciBvZiBzZXJpZXNsaXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VyaWVzbGlzdC5wdXNoKHNlci5jbG9uZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgICAgICB0aGlzLl9sb2NhdGlvbkNhY2hlID0gW107XG4gICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc3RhY2sgPSBlbmNvZGluZy5fc3RhY2s7XG4gICAgICAgICAgICB0aGlzLl9yZWN0ID0gcmVjdDtcbiAgICAgICAgICAgIHRoaXMuX19hbmFseXNlU2NhbGVzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRTZXJpZXModGhpcy5fc2VyaWVzbGlzdFtpXSwgaSxjYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zaGFwZWxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9fYW5hbHlzZVNjYWxlcygpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUxheW91dFNjYWxlcyh0aGlzLl9lbmNvZGluZyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHNlciBvZiB0aGlzLl9zZXJpZXNsaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NhbGVwYWlyIG9mIHNlci5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlZDogRmllbGQgPSBzY2FsZXBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZTogU2NhbGUgPSBzY2FsZXBhaXIuc2NhbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVkLm5hbWUgPT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZWQuYmFuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5yYW5nZUJvdW5kcyhbdGhpcy5fcmVjdC5sZWZ0LCB0aGlzLl9yZWN0LnJpZ2h0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX3JlY3QubGVmdCwgdGhpcy5fcmVjdC5yaWdodF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX3JlY3QubGVmdCwgdGhpcy5fcmVjdC5yaWdodF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVkLm5hbWUgPT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZWQuYmFuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5yYW5nZUJvdW5kcyhbdGhpcy5fcmVjdC5ib3R0b20sIHRoaXMuX3JlY3QudG9wXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX3JlY3QuYm90dG9tLCB0aGlzLl9yZWN0LnRvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpY2tlcjogTGluZWFyVGlja3MgPSBMaW5lYXJUaWNrcy5jcmVhdGUoc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gdGlja2VyLm5pY2VTY2FsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLnJhbmdlKFt0aGlzLl9yZWN0LmJvdHRvbSwgdGhpcy5fcmVjdC50b3BdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZUxheW91dFNjYWxlcyhlbmNvZGluZzogRW5jb2RpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlcmllczogU2VyaWVzID0gdGhpcy5fc2VyaWVzbGlzdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGFpciBvZiBzZXJpZXMuc2NhbGVQYWlycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVkOiBGaWVsZCA9IHBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzYWRkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHAgb2YgdGhpcy5fX3NjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAuZmlsZWQuZXF1YWxzKGZpbGVkKSB8fCAhcC5zY2FsZS5lcXVhbChwYWlyLnNjYWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNhZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc2VyaWVzLnB1c2goc2VyaWVzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc2FkZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7IHNlcmllczogW3Nlcmllcy5uYW1lXSwgZmlsZWQ6IGZpbGVkLCBzY2FsZTogcGFpci5zY2FsZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc2VyaWVzbGlzdC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX19zY2FsZVBhaXJzID0gdGhpcy5fc2VyaWVzbGlzdFswXS5zY2FsZVBhaXJzO1xuICAgICAgICAgICAgICAgIGxldCBzZXJpZXM6IFNlcmllcyA9IHRoaXMuX3Nlcmllc2xpc3RbMF07XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7c2VyaWVzOltzZXJpZXMubmFtZV0sIGZpbGVkOiBzZXJpZXMuZmlsZWQsIHNjYWxlOiBwYWlyLnNjYWxlIH0pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2Ygc2VyaWVzLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7IHNlcmllczogW3Nlcmllcy5uYW1lXSwgZmlsZWQ6IHBhaXIuZmlsZWQsIHNjYWxlOiBwYWlyLnNjYWxlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBtYXhTZXJpZXNTaXplKCk6IG51bWJlciB7XG4gICAgICAgICAgICBsZXQgeHNjYWxlID0gdGhpcy5fZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGlmICh4c2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geHNjYWxlLmRvbWFpbnMubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXRpbGl0eS5tYXgodGhpcy5fc2VyaWVzbGlzdC5tYXAoKHNlcjogU2VyaWVzLCBpbmRleDogbnVtYmVyLCBhcnJheTogU2VyaWVzW10pID0+IHsgcmV0dXJuIHNlci5zaXplOyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGFic3RyYWN0IF9sYXlvdXRTZXJpZXMoc2VyaWVzOiBTZXJpZXMsIGluZGV4OiBudW1iZXIsY2FudmFzPzpDYW52YXMpOiB2b2lkO1xuICAgICAgICBcbiAgICAgICAgZ2V0IHNjYWxlUGFpcnMoKTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zY2FsZVBhaXJzO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX2dldFNjYWxlKG5hbWU6IHN0cmluZyk6IFNjYWxlIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IF8uZmluZEluZGV4KHRoaXMuX19zY2FsZVBhaXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmZpbGVkLm5hbWUgPT0gbmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zY2FsZVBhaXJzW2luZGV4XS5zY2FsZTtcbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGV4cG9ydCBjbGFzcyBCYXJMYXlvdXQgZXh0ZW5kcyBDYXJ0ZXNpYW5MYXlvdXR7XG4gICAgICAgIGdldCBiYXJXaWR0aCgpOm51bWJlcntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWN0LndpZHRoL3RoaXMubWF4U2VyaWVzU2l6ZS8odGhpcy5fc3RhY2s/MTp0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aCkgKjAuOTtcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dFNlcmllcyhzZXJpZXM6U2VyaWVzLGluZGV4Om51bWJlcixjYW52YXM6Q2FudmFzKTp2b2lke1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGxldCB5U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3knKTtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IGNvbG9yQXJyYXk6c3RyaW5nW109W107XG4gICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICAvLyBjb2xvclNjYWxlID0gY29sb3JTY2FsZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIC8vIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIGNvbG9yU2NhbGUucmFuZ2UoWzAsKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgtMV0pO1xuICAgICAgICAgICAgICAgIGNvbG9yU2NhbGUgPSBjb2xvclNjYWxlLmNsb25lKCkgYXMgT3JkaW5hbFNjYWxlO1xuICAgICAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbiA9PSBudWxsIHx8IGNvbG9yU2NhbGUuZW5kUG9zaXRpb24gPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgbGV0IGxlbiA6bnVtYmVyPSg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IGxlbjsrK2kpe1xuICAgICAgICAgICAgICAgICAgICAoPE9yZGluYWxTY2FsZT5jb2xvclNjYWxlKS5yYW5nZXMucHVzaChDb2xvclV0aWxzLkNvbG9yW2kmQ29sb3JVdGlscy5Db2xvci5sZW5ndGhdKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvclNjYWxlLnJhbmdlKFswLCg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoLTFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVmYXVsdGNvbG9yOnN0cmluZyA9Q29sb3JVdGlscy5pbmRleENvbG9yKHNlcmllcy5pbmRleCk7XG4gICAgICAgICAgICBmb3IobGV0IHB0IG9mIHNlcmllcy5wb2ludHMpe1xuICAgICAgICAgICAgICAgIGlmKCBwdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHh2YWx1ZSA6VmFsdWU9IHB0Lng7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5dmFsdWUgOlZhbHVlPSBwdC55O1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3J2YWx1ZSA6VmFsdWUgPSBwdC5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNoYXBlOlZhbHVlID0gcHQuc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaXplIDpWYWx1ZT0gcHQuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvb2x0aXA6VmFsdWUgPSBwdC50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA6VmFsdWUgPSBwdC50ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCB4Om51bWJlciA9IHhTY2FsZS5nZXRTY2FsZVZhbHVlKHh2YWx1ZS52YWx1ZSkgKyh0aGlzLl9zdGFjayA/MDooKGluZGV4IC0gKHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoLTEpLzIpICogdGhpcy5iYXJXaWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeTAgPSB5dmFsdWUuaXNNdWx0aXBsZT8geXZhbHVlLnZhbHVlWzBdOih5U2NhbGUubWluPDA/MDp5U2NhbGUubWluKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkxID0geXZhbHVlLmlzTXVsdGlwbGU/IHl2YWx1ZS52YWx1ZVsxXTp5dmFsdWUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5dG9wOm51bWJlciA9IHlTY2FsZS5nZXRTY2FsZVZhbHVlKHkxKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yIDpzdHJpbmcgPSBkZWZhdWx0Y29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yaW5kZXggPSBjb2xvclNjYWxlLmdldFNjYWxlVmFsdWUoY29sb3J2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YoY29sb3JpbmRleCkgPT0gJ251bWJlcicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3JBcnJheVtjb2xvcmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZiAoY29sb3JpbmRleCkgPT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3JpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoY29sb3JTY2FsZSBpbnN0YW5jZW9mIExpbmVhclNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gQ29sb3JVdGlscy5nZXRDb2xvcihjb2xvclNjYWxlLnN0YXJ0UG9zaXRpb24sY29sb3JTY2FsZS5lbmRQb3NpdGlvbixjb2xvcnZhbHVlLnZhbHVlLGNvbG9yU2NhbGUubWluLGNvbG9yU2NhbGUubWF4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgeWJvdHRvbSA6bnVtYmVyID0geVNjYWxlLmdldFNjYWxlVmFsdWUoeTApO1xuICAgICAgICAgICAgICAgICAgICBpZih5MCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHlTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInkwIFwiICsgeTAgKyBcIiB5Qm90dG9tIFwiICsgeWJvdHRvbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgeGxlZnQgOm51bWJlciA9IHgtICB0aGlzLmJhcldpZHRoLzI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4cmlnaHQgOm51bWJlciA9IHggK3RoaXMuYmFyV2lkdGgvMjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJhclNoYXBlOkJhclNoYXBlID0gbmV3IEJhclNoYXBlKHRoaXMuY29udGV4dCx4bGVmdCx5dG9wLHhyaWdodC14bGVmdCx5Ym90dG9tLXl0b3ApO1xuICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5pZCA9IHB0LmlkO1xuICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5zdHlsZSA9IG5ldyBTdHlsZShcImdyYXlcIixEZWZhdWx0LnN0cm9rZXN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29sb3IgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IGRlZmF1bHRjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZihzZXJpZXMuc2hvd2xhYmVscyAmJiB0ZXh0ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRzdHIgOnN0cmluZyA9IHRleHQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm9udCA9IERlZmF1bHQuZm9udDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQuZm9udENvbG9yPSdibGFjayc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LmZvbnRTaXplPTEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRzaXplIDpTaXplID1jYW52YXMubWVhc3VyZVN0cmluZyh0ZXh0c3RyLGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID10ZXh0c2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSB0ZXh0c2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5sYWJlbCA9IG5ldyBMYWJlbCh0aGlzLmNvbnRleHQsdGV4dHN0ciwoeGxlZnQreHJpZ2h0KS8yLHl0b3AtaGVpZ2h0LzItMyx3aWR0aCxoZWlnaHQsMCw1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhclNoYXBlLmxhYmVsLl9mb250PWZvbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5sYWJlbC5iYWNrZ3JvdW5kID1EZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2hhcGUubGFiZWwuYmFja2dyb3VuZC5zdHJva2VTdHlsZS5zdHJva2VDb2xvcj0nd2hpdGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2hhcGUubGFiZWwuYmFja2dyb3VuZC5iYWNrZ3JvdW5kPSd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NoYXBlbGlzdC5wdXNoKGJhclNoYXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuY2FydGVzaWFue1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBleHBvcnQgY2xhc3MgU2NhdHRlckxheW91dCBleHRlbmRzIENhcnRlc2lhbkxheW91dHtcbiAgICAgICAgZ2V0IGJhcldpZHRoKCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3Qud2lkdGgvdGhpcy5tYXhTZXJpZXNTaXplLyh0aGlzLl9zdGFjaz8xOnRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoKSAqMC45O1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0U2VyaWVzKHNlcmllczpTZXJpZXMsaW5kZXg6bnVtYmVyLGNhbnZhczpDYW52YXMpOnZvaWR7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IHhTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneCcpO1xuICAgICAgICAgICAgbGV0IHlTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneScpO1xuICAgICAgICAgICAgbGV0IGNvbG9yU2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ2NvbG9yJyk7XG4gICAgICAgICAgICBsZXQgc2l6ZVNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdzaXplJyk7XG4gICAgICAgICAgICBsZXQgZGVmYXVsdGNvbG9yOnN0cmluZyA9Q29sb3JVdGlscy5pbmRleENvbG9yKHNlcmllcy5pbmRleCk7XG4gICAgICAgICAgICBsZXQgY29sb3JBcnJheTpzdHJpbmdbXT1bXTtcbiAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpe1xuICAgICAgICAgICAgICAgIGNvbG9yU2NhbGUgPSBjb2xvclNjYWxlLmNsb25lKCkgYXMgT3JkaW5hbFNjYWxlO1xuICAgICAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbiA9PSBudWxsIHx8IGNvbG9yU2NhbGUuZW5kUG9zaXRpb24gPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgbGV0IGxlbiA6bnVtYmVyPSg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IGxlbjsrK2kpe1xuICAgICAgICAgICAgICAgICAgICAoPE9yZGluYWxTY2FsZT5jb2xvclNjYWxlKS5yYW5nZXMucHVzaChDb2xvclV0aWxzLkNvbG9yW2kmQ29sb3JVdGlscy5Db2xvci5sZW5ndGhdKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvclNjYWxlLnJhbmdlKFswLCg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoLTFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVmYXVsdHNpemU6bnVtYmVyID0gMTA7XG4gICAgICAgICAgICBmb3IobGV0IHB0IG9mIHNlcmllcy5wb2ludHMpe1xuICAgICAgICAgICAgICAgIGlmKCBwdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHh2YWx1ZSA6VmFsdWU9IHB0Lng7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5dmFsdWUgOlZhbHVlPSBwdC55O1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3JWYWx1ZSA6VmFsdWUgPSBwdC5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNoYXBlVmFsdWU6VmFsdWUgPSBwdC5zaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemVWYWx1ZSA6VmFsdWU9IHB0LnNpemU7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0b29sdGlwOlZhbHVlID0gcHQudG9vbHRpcDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgOlZhbHVlID0gcHQudGV4dDtcblxuXG4gICAgICAgICAgICAgICAgICAgIGxldCB4Om51bWJlciA9IHhTY2FsZS5nZXRTY2FsZVZhbHVlKHh2YWx1ZS52YWx1ZSkgO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeTpudW1iZXIgPSB5U2NhbGUuZ2V0U2NhbGVWYWx1ZSh5dmFsdWUuaXNNdWx0aXBsZT95dmFsdWUudmFsdWVbMV06eXZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHMgOm51bWJlciA9IHNpemVTY2FsZS5nZXRTY2FsZVZhbHVlKHNpemVWYWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGlzTmFOKHMpIHx8IHMgPT0gbnVsbCB8fCBzIDw9MCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gZGVmYXVsdHNpemU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gZGVmYXVsdGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xvcmluZGV4ID0gY29sb3JTY2FsZS5nZXRTY2FsZVZhbHVlKGNvbG9yVmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGNvbG9yaW5kZXgpID09ICdudW1iZXInKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yQXJyYXlbY29sb3JpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgKGNvbG9yaW5kZXgpID09ICdzdHJpbmcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yVXRpbHMuZ2V0Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sY29sb3JWYWx1ZS52YWx1ZSxjb2xvclNjYWxlLm1pbixjb2xvclNjYWxlLm1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYXR0ZXJTaGFwZSA6U2NhdHRlclNoYXBlID0gbmV3IFNjYXR0ZXJTaGFwZSh0aGlzLmNvbnRleHQseC1zLzIseS1zLzIscyxzLERlZmF1bHQuc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvciAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gZGVmYXVsdGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5pZCA9IHB0LmlkO1xuICAgICAgICAgICAgICAgICAgICBpZihzZXJpZXMuc2hvd2xhYmVscyAmJiB0ZXh0ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRzdHIgOnN0cmluZz0gdGV4dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmb250ID0gRGVmYXVsdC5mb250O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC5mb250Q29sb3I9J2JsYWNrJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQuZm9udFNpemU9MTI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dHNpemUgOlNpemUgPWNhbnZhcy5tZWFzdXJlU3RyaW5nKHRleHRzdHIsZm9udCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPXRleHRzaXplLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IHRleHRzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5sYWJlbCA9IG5ldyBMYWJlbCh0aGlzLmNvbnRleHQsdGV4dHN0cix4LHktcy8yLTMsd2lkdGgsaGVpZ2h0LDAsMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUubGFiZWwuYmFja2dyb3VuZCA9RGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5sYWJlbC5fZm9udD1mb250OyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlclNoYXBlLmxhYmVsLmJhY2tncm91bmQuc3Ryb2tlU3R5bGUuc3Ryb2tlQ29sb3I9J2dyYXknO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlclNoYXBlLmxhYmVsLmJhY2tncm91bmQuYmFja2dyb3VuZD0nbGlnaHRibHVlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2goc2NhdHRlclNoYXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9sYXlvdXRMaW5lKCl7XG4gICAgICAgIH0gICAgICAgICAgICBcbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcblxuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJhZGlhbENhcnRlc2lhbkxheW91dCBleHRlbmRzIEJhc2VMYXlvdXQge1xuICAgICAgICBwdWJsaWMgYmFyU3R5bGU6IFN0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgcHVibGljIGxpbmVTdHlsZTogU3Ryb2tlU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICBwcm90ZWN0ZWQgX19zY2FsZVBhaXJzOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH1bXTtcbiAgICAgICAgcHJvdGVjdGVkIF9sb2NhdGlvbkNhY2hlOiB7IGtleTogc3RyaW5nIHwgbnVtYmVyLCBwb2ludHM6IGFueVtdIH1bXSA9IFtdO1xuICAgICAgICBwcm90ZWN0ZWQgX3Nlcmllc2xpc3Q6IFNlcmllc1tdO1xuICAgICAgICBwcm90ZWN0ZWQgX3N0YWNrOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIHByb3RlY3RlZCBfZW5jb2Rpbmc6IEVuY29kaW5nO1xuICAgICAgICBwcm90ZWN0ZWQgX2N4OiBudW1iZXI7XG4gICAgICAgIHByb3RlY3RlZCBfY3k6IG51bWJlcjtcbiAgICAgICAgcHJvdGVjdGVkIF9pbm5lclJhZGl1czogbnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgX3JhZGl1czogbnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgX3N0YXJ0QW5nbGU6IG51bWJlcjtcbiAgICAgICAgcHJvdGVjdGVkIF9lbmRBbmdsZTogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OkNvbnRleHQpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnZlcnQoc2VyaWVzbGlzdDogU2VyaWVzW10sIGVuY29kaW5nOiBFbmNvZGluZywgY3g6IG51bWJlciwgY3k6IG51bWJlciwgaW5uZXJSYWRpdXM6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlcik6IFBsb3RTaGFwZVtdIHtcbiAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Nlcmllc2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHNlciBvZiBzZXJpZXNsaXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VyaWVzbGlzdC5wdXNoKHNlci5jbG9uZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgICAgICB0aGlzLl9sb2NhdGlvbkNhY2hlID0gW107XG4gICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc3RhY2sgPSBlbmNvZGluZy5fc3RhY2s7XG4gICAgICAgICAgICB0aGlzLl9jeCA9IGN4O1xuICAgICAgICAgICAgdGhpcy5fY3kgPSBjeTtcbiAgICAgICAgICAgIHRoaXMuX2lubmVyUmFkaXVzID0gaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICB0aGlzLl9yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICB0aGlzLl9zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHRoaXMuX2VuZEFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9fYW5hbHlzZVNjYWxlcygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0U2VyaWVzKHRoaXMuX3Nlcmllc2xpc3RbaV0sIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zaGFwZWxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9fYW5hbHlzZVNjYWxlcygpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUxheW91dFNjYWxlcyh0aGlzLl9lbmNvZGluZyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IHNlciBvZiB0aGlzLl9zZXJpZXNsaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2NhbGVwYWlyIG9mIHNlci5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlZDogRmllbGQgPSBzY2FsZXBhaXIuZmlsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZTogU2NhbGUgPSBzY2FsZXBhaXIuc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlZC5uYW1lID09ICd4Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVkLmJhbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2VCb3VuZHMoW3RoaXMuX2lubmVyUmFkaXVzLCB0aGlzLl9yYWRpdXNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZS5yYW5nZShbdGhpcy5faW5uZXJSYWRpdXMsIHRoaXMuX3JhZGl1c10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX2lubmVyUmFkaXVzLCB0aGlzLl9yYWRpdXNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlZC5uYW1lID09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVkLmJhbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2VCb3VuZHMoW3RoaXMuX3N0YXJ0QW5nbGUsIHRoaXMuX2VuZEFuZ2xlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX3N0YXJ0QW5nbGUsIHRoaXMuX2VuZEFuZ2xlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlja2VyOiBMaW5lYXJUaWNrcyA9IExpbmVhclRpY2tzLmNyZWF0ZShzY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSB0aWNrZXIubmljZVNjYWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUucmFuZ2UoW3RoaXMuX3N0YXJ0QW5nbGUsIHRoaXMuX2VuZEFuZ2xlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVMYXlvdXRTY2FsZXMoZW5jb2Rpbmc6IEVuY29kaW5nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2VyaWVzbGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXJpZXM6IFNlcmllcyA9IHRoaXMuX3Nlcmllc2xpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2Ygc2VyaWVzLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlZDogRmllbGQgPSBwYWlyLmZpbGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc2FkZGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwIG9mIHRoaXMuX19zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLmZpbGVkLmVxdWFscyhmaWxlZCkgfHwgIXAuc2NhbGUuZXF1YWwocGFpci5zY2FsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzYWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnNlcmllcy5wdXNoKHNlcmllcy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNhZGRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtzZXJpZXMubmFtZV0sIGZpbGVkOiBmaWxlZCwgc2NhbGU6IHBhaXIuc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLl9fc2NhbGVQYWlycyA9IHRoaXMuX3Nlcmllc2xpc3RbMF0uc2NhbGVQYWlycztcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWVzOiBTZXJpZXMgPSB0aGlzLl9zZXJpZXNsaXN0WzBdO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goe3Nlcmllczpbc2VyaWVzLm5hbWVdLCBmaWxlZDogc2VyaWVzLmZpbGVkLCBzY2FsZTogcGFpci5zY2FsZSB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHNlcmllcy5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtzZXJpZXMubmFtZV0sIGZpbGVkOiBwYWlyLmZpbGVkLCBzY2FsZTogcGFpci5zY2FsZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgbWF4U2VyaWVzU2l6ZSgpOiBudW1iZXIge1xuICAgICAgICAgICAgbGV0IHhzY2FsZSA9IHRoaXMuX2dldFNjYWxlKCd4Jyk7XG4gICAgICAgICAgICBpZiAoeHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHhzY2FsZS5kb21haW5zLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxpdHkubWF4KHRoaXMuX3Nlcmllc2xpc3QubWFwKChzZXI6IFNlcmllcywgaW5kZXg6IG51bWJlciwgYXJyYXk6IFNlcmllc1tdKSA9PiB7IHJldHVybiBzZXIuc2l6ZTsgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfbGF5b3V0U2VyaWVzKHNlcmllczogU2VyaWVzLCBpbmRleDogbnVtYmVyKTogdm9pZDtcblxuICAgICAgICAvLyBwcm90ZWN0ZWQgX3ByZUFuYWx5c2VTZXJpZXMoKSB7XG4gICAgICAgIC8vICAgICBmb3IgKGxldCBzZXIgb2YgdGhpcy5fc2VyaWVzbGlzdCkge1xuICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IHB0IG9mIHNlci5wb2ludHMpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHh2YWx1ZSA9IHB0Lng7XG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCBpbmRleCA9IF8uZmluZEluZGV4KHRoaXMuX2xvY2F0aW9uQ2FjaGUsICdrZXknLCB4dmFsdWUudmFsdWUpO1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbG9jYXRpb25DYWNoZVtpbmRleF0gIT0gbnVsbCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvY2F0aW9uQ2FjaGVbaW5kZXhdLnBvaW50cy5wdXNoKHB0KTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9jYXRpb25DYWNoZS5wdXNoKHsga2V5OiB4dmFsdWUudmFsdWUsIHBvaW50czogW3B0XSB9KTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuICAgICAgICBnZXQgc2NhbGVQYWlycygpOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlUGFpcnM7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBfZ2V0U2NhbGUobmFtZTogc3RyaW5nKTogU2NhbGUge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gXy5maW5kSW5kZXgodGhpcy5fX3NjYWxlUGFpcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZmlsZWQubmFtZSA9PSBuYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlUGFpcnNbaW5kZXhdLnNjYWxlO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbntcblxuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBleHBvcnQgY2xhc3MgUmFkaWFsQmFyTGF5b3V0IGV4dGVuZHMgUmFkaWFsQ2FydGVzaWFuTGF5b3V0e1xuICAgICAgICBnZXQgYmFyV2lkdGgoKTpudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX3JhZGl1cy10aGlzLl9pbm5lclJhZGl1cykvdGhpcy5tYXhTZXJpZXNTaXplLyh0aGlzLl9zdGFjaz8xOnRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoKSAqMC45O1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0U2VyaWVzKHNlcmllczpTZXJpZXMsaW5kZXg6bnVtYmVyKTp2b2lke1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGxldCB5U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3knKTtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IGNvbG9yQXJyYXk6c3RyaW5nW109W107XG4gICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICBjb2xvclNjYWxlID0gY29sb3JTY2FsZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbG9yU2NhbGUucmFuZ2UoWzAsKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgtMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlZmF1bHRjb2xvcjpzdHJpbmcgPUNvbG9yVXRpbHMuaW5kZXhDb2xvcihzZXJpZXMuaW5kZXgpO1xuICAgICAgICAgICAgZm9yKGxldCBwdCBvZiBzZXJpZXMucG9pbnRzKXtcbiAgICAgICAgICAgICAgICBpZiggcHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4dmFsdWUgOlZhbHVlPSBwdC54O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeXZhbHVlIDpWYWx1ZT0gcHQueTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9ydmFsdWUgOlZhbHVlID0gcHQuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaGFwZTpWYWx1ZSA9IHB0LnNoYXBlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA6VmFsdWU9IHB0LnNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHg6bnVtYmVyID0geFNjYWxlLmdldFNjYWxlVmFsdWUoeHZhbHVlLnZhbHVlKSArKHRoaXMuX3N0YWNrID8wOigoaW5kZXggLSAodGhpcy5fc2VyaWVzbGlzdC5sZW5ndGgtMSkvMikgKiB0aGlzLmJhcldpZHRoKSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5MCA9IHl2YWx1ZS5pc011bHRpcGxlPyB5dmFsdWUudmFsdWVbMF06KHlTY2FsZS5taW48MD8wOnlTY2FsZS5taW4pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeTEgPSB5dmFsdWUuaXNNdWx0aXBsZT8geXZhbHVlLnZhbHVlWzFdOnl2YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHlFbmRBbmdsZTpudW1iZXIgPSB5U2NhbGUuZ2V0U2NhbGVWYWx1ZSh5MSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvciA6c3RyaW5nID0gZGVmYXVsdGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xvcmluZGV4ID0gY29sb3JTY2FsZS5nZXRTY2FsZVZhbHVlKGNvbG9ydmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3JBcnJheVtjb2xvcmluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoY29sb3JTY2FsZSBpbnN0YW5jZW9mIExpbmVhclNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gQ29sb3JVdGlscy5nZXRDb2xvcihjb2xvclNjYWxlLnN0YXJ0UG9zaXRpb24sY29sb3JTY2FsZS5lbmRQb3NpdGlvbixjb2xvcnZhbHVlLnZhbHVlLGNvbG9yU2NhbGUubWluLGNvbG9yU2NhbGUubWF4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgeVN0YXJ0QW5nbGUgOm51bWJlciA9IHlTY2FsZS5nZXRTY2FsZVZhbHVlKHkwKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHhJbm5lclJhZGl1cyA6bnVtYmVyID0geC0gIHRoaXMuYmFyV2lkdGgvMjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHhPdXR0ZXJSYWRpdXMgOm51bWJlciA9IHggK3RoaXMuYmFyV2lkdGgvMjtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGJhclNoYXBlOkJhclNoYXBlID0gbmV3IEJhclNoYXBlKHhsZWZ0LHlFbmRBbmdsZSx4cmlnaHQteGxlZnQseWJvdHRvbS15RW5kQW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFyU2hhcGUgOlJhZGlhbEJhclNoYXBlID0gbmV3IFJhZGlhbEJhclNoYXBlKHRoaXMuY29udGV4dCx0aGlzLl9jeCx0aGlzLl9jeSx4SW5uZXJSYWRpdXMseE91dHRlclJhZGl1cyx5U3RhcnRBbmdsZSx5RW5kQW5nbGUteVN0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5pZCA9IHB0LmlkO1xuICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5zdHlsZSA9IG5ldyBTdHlsZShcImdyYXlcIixEZWZhdWx0LnN0cm9rZXN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29sb3IgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFyU2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IGRlZmF1bHRjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2goYmFyU2hhcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgZXhwb3J0IGNsYXNzIFJhZGlhbExpbmVMYXlvdXQgZXh0ZW5kcyBSYWRpYWxDYXJ0ZXNpYW5MYXlvdXR7XG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0U2VyaWVzKHNlcmllczpTZXJpZXMsaW5kZXg6bnVtYmVyKTp2b2lke1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGxldCB5U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3knKTtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IHhzOm51bWJlcltdPVtdO1xuICAgICAgICAgICAgbGV0IHlzOm51bWJlcltdPVtdO1xuICAgICAgICAgICAgZm9yKGxldCBwdCBvZiBzZXJpZXMucG9pbnRzKXtcbiAgICAgICAgICAgICAgICBpZiggcHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHB0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHh2YWx1ZSA6VmFsdWU9IHB0Lng7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5dmFsdWUgOlZhbHVlPSBwdC55O1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3J2YWx1ZSA6VmFsdWUgPSBwdC5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNoYXBlOlZhbHVlID0gcHQuc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaXplIDpWYWx1ZT0gcHQuc2l6ZTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFkaXVzOm51bWJlciA9IHhTY2FsZS5nZXRTY2FsZVZhbHVlKHh2YWx1ZS52YWx1ZSkgO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmdsZSA9IHlTY2FsZS5nZXRTY2FsZVZhbHVlKHl2YWx1ZS5pc011bHRpcGxlPyB5dmFsdWUudmFsdWVbMV06eXZhbHVlLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHRoaXMuX2N4ICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuX2N5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICB4cy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB5cy5wdXNoKHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsaW5lc1NoYXBlOkxpbmVzU2hhcGUgPSBuZXcgTGluZXNTaGFwZSh0aGlzLmNvbnRleHQseHMseXMsbnVsbCxEZWZhdWx0LnN0cm9rZXN0eWxlKTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuc3Ryb2tlU3R5bGUuc3Ryb2tlQ29sb3IgPSBDb2xvclV0aWxzLmluZGV4Q29sb3Ioc2VyaWVzLmluZGV4KTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuaWQgPSBzZXJpZXMuaWQ7XG4gICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2gobGluZXNTaGFwZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dExpbmUoKXtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgZXhwb3J0IGNsYXNzIFJhZGlhbEFyZWFMYXlvdXQgZXh0ZW5kcyBSYWRpYWxDYXJ0ZXNpYW5MYXlvdXQge1xuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dFNlcmllcyhzZXJpZXM6IFNlcmllcywgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6IFNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCd4Jyk7XG4gICAgICAgICAgICBsZXQgeVNjYWxlOiBTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneScpO1xuICAgICAgICAgICAgbGV0IGNvbG9yU2NhbGU6IFNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IHhzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IHlzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgcHQgb2Ygc2VyaWVzLnBvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChwdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHB0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHh2YWx1ZTogVmFsdWUgPSBwdC54O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeXZhbHVlOiBWYWx1ZSA9IHB0Lnk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvcnZhbHVlOiBWYWx1ZSA9IHB0LmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hhcGU6IFZhbHVlID0gcHQuc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaXplOiBWYWx1ZSA9IHB0LnNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhZGl1czogbnVtYmVyID0geFNjYWxlLmdldFNjYWxlVmFsdWUoeHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlVmFsdWUwID0geXZhbHVlLmlzTXVsdGlwbGUgPyB5dmFsdWUudmFsdWVbMF0gOiAoeVNjYWxlLm1pbiA8IDAgPyAwIDogeVNjYWxlLm1pbik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmdsZVZhbHVlMSA9IHl2YWx1ZS5pc011bHRpcGxlID8geXZhbHVlLnZhbHVlWzFdIDogeXZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYW5nbGUwID0geVNjYWxlLmdldFNjYWxlVmFsdWUoYW5nbGVWYWx1ZTApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYW5nbGUxID0geVNjYWxlLmdldFNjYWxlVmFsdWUoYW5nbGVWYWx1ZTEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgY29sb3IgPSBjb2xvclNjYWxlLmdldFNjYWxlVmFsdWUoY29sb3J2YWx1ZS52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHgwID0gdGhpcy5fY3ggKyBNYXRoLmNvcyhhbmdsZTApICogcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeTAgPSB0aGlzLl9jeSArIE1hdGguc2luKGFuZ2xlMCkgKiByYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4ID0gdGhpcy5fY3ggKyBNYXRoLmNvcyhhbmdsZTEpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHRoaXMuX2N5ICsgTWF0aC5zaW4oYW5nbGUxKSAqIHJhZGl1cztcblxuICAgICAgICAgICAgICAgICAgICB4cy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB5cy5wdXNoKHkpO1xuICAgICAgICAgICAgICAgICAgICB4cy51bnNoaWZ0KHgwKTtcbiAgICAgICAgICAgICAgICAgICAgeXMudW5zaGlmdCh5MCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxpbmVzU2hhcGU6IEFyZWFTaGFwZSA9IG5ldyBBcmVhU2hhcGUodGhpcy5jb250ZXh0LHhzLCB5cywgbnVsbCwgRGVmYXVsdC5zdHJva2VzdHlsZSk7XG4gICAgICAgICAgICBsaW5lc1NoYXBlLnN0eWxlLmJhY2tncm91bmQgPSBDb2xvclV0aWxzLmluZGV4Q29sb3Ioc2VyaWVzLmluZGV4KTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuaWQgPSBzZXJpZXMuaWQ7XG4gICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2gobGluZXNTaGFwZSk7XG5cbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dExpbmUoKSB7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgZXhwb3J0IGNsYXNzIFJhZGlhbFNjYXR0ZXJMYXlvdXQgZXh0ZW5kcyBSYWRpYWxDYXJ0ZXNpYW5MYXlvdXR7XG4gICAgICAgIGdldCBiYXJXaWR0aCgpOm51bWJlcntcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fcmFkaXVzLXRoaXMuX2lubmVyUmFkaXVzKS90aGlzLm1heFNlcmllc1NpemUvKHRoaXMuX3N0YWNrPzE6dGhpcy5fc2VyaWVzbGlzdC5sZW5ndGgpICowLjk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9sYXlvdXRTZXJpZXMoc2VyaWVzOlNlcmllcyxpbmRleDpudW1iZXIpOnZvaWR7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuX3Nlcmllc2xpc3QubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IHhTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneCcpO1xuICAgICAgICAgICAgbGV0IHlTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgneScpO1xuICAgICAgICAgICAgbGV0IGNvbG9yU2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ2NvbG9yJyk7XG4gICAgICAgICAgICBsZXQgc2l6ZVNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdzaXplJyk7XG4gICAgICAgICAgICBsZXQgZGVmYXVsdGNvbG9yOnN0cmluZyA9Q29sb3JVdGlscy5pbmRleENvbG9yKHNlcmllcy5pbmRleCk7XG4gICAgICAgICAgICBsZXQgY29sb3JBcnJheTpzdHJpbmdbXT1bXTtcbiAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpe1xuICAgICAgICAgICAgICAgIGNvbG9yU2NhbGUgPSBjb2xvclNjYWxlLmNsb25lKCkgYXMgT3JkaW5hbFNjYWxlO1xuICAgICAgICAgICAgICAgIGlmKGNvbG9yU2NhbGUuc3RhcnRQb3NpdGlvbiA9PSBudWxsIHx8IGNvbG9yU2NhbGUuZW5kUG9zaXRpb24gPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgbGV0IGxlbiA6bnVtYmVyPSg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IGxlbjsrK2kpe1xuICAgICAgICAgICAgICAgICAgICAoPE9yZGluYWxTY2FsZT5jb2xvclNjYWxlKS5yYW5nZXMucHVzaChDb2xvclV0aWxzLkNvbG9yW2kmQ29sb3JVdGlscy5Db2xvci5sZW5ndGhdKTtcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvclNjYWxlLnJhbmdlKFswLCg8T3JkaW5hbFNjYWxlPmNvbG9yU2NhbGUpLmRvbWFpbnMubGVuZ3RoLTFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVmYXVsdHNpemU6bnVtYmVyID0gMTA7XG4gICAgICAgICAgICBmb3IobGV0IHB0IG9mIHNlcmllcy5wb2ludHMpe1xuICAgICAgICAgICAgICAgIGlmKCBwdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHh2YWx1ZSA6VmFsdWU9IHB0Lng7XG4gICAgICAgICAgICAgICAgICAgIGxldCB5dmFsdWUgOlZhbHVlPSBwdC55O1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3JWYWx1ZSA6VmFsdWUgPSBwdC5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNoYXBlVmFsdWU6VmFsdWUgPSBwdC5zaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemVWYWx1ZSA6VmFsdWU9IHB0LnNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhZGl1czpudW1iZXIgPSB4U2NhbGUuZ2V0U2NhbGVWYWx1ZSh4dmFsdWUudmFsdWUpIDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlOm51bWJlciA9IHlTY2FsZS5nZXRTY2FsZVZhbHVlKHl2YWx1ZS5pc011bHRpcGxlP3l2YWx1ZS52YWx1ZVsxXTp5dmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcyA6bnVtYmVyID0gc2l6ZVNjYWxlLmdldFNjYWxlVmFsdWUoc2l6ZVZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNOYU4ocykgfHwgcyA9PSBudWxsIHx8IHMgPD0wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBkZWZhdWx0c2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9yID0gZGVmYXVsdGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2xvcmluZGV4ID0gY29sb3JTY2FsZS5nZXRTY2FsZVZhbHVlKGNvbG9yVmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mKGNvbG9yaW5kZXgpID09ICdudW1iZXInKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yQXJyYXlbY29sb3JpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgKGNvbG9yaW5kZXgpID09ICdzdHJpbmcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yVXRpbHMuZ2V0Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sY29sb3JWYWx1ZS52YWx1ZSxjb2xvclNjYWxlLm1pbixjb2xvclNjYWxlLm1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSB0aGlzLl9jeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkgPSB0aGlzLl9jeSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYXR0ZXJTaGFwZSA6U2NhdHRlclNoYXBlID0gbmV3IFNjYXR0ZXJTaGFwZSh0aGlzLmNvbnRleHQseC1zLzIseS1zLzIscyxzLERlZmF1bHQuc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUuaWQgPSBwdC5pZDtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29sb3IgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IGRlZmF1bHRjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2goc2NhdHRlclNoYXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9sYXlvdXRMaW5lKCl7XG4gICAgICAgIH0gICAgICAgICAgICBcbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuY2FydGVzaWFue1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGV4cG9ydCBjbGFzcyBMaW5lTGF5b3V0IGV4dGVuZHMgQ2FydGVzaWFuTGF5b3V0e1xuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dFNlcmllcyhzZXJpZXM6U2VyaWVzLGluZGV4Om51bWJlcik6dm9pZHtcbiAgICAgICAgICAgIGxldCBzaXplID0gdGhpcy5fc2VyaWVzbGlzdC5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgeFNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCd4Jyk7XG4gICAgICAgICAgICBsZXQgeVNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCd5Jyk7XG4gICAgICAgICAgICAvLyBsZXQgY29sb3JTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgnY29sb3InKTtcbiAgICAgICAgICAgIGxldCB4czpudW1iZXJbXT1bXTtcbiAgICAgICAgICAgIGxldCB5czpudW1iZXJbXT1bXTtcbiAgICAgICAgICAgIGxldCBkZWZhdWx0Y29sb3I6c3RyaW5nID1Db2xvclV0aWxzLmluZGV4Q29sb3Ioc2VyaWVzLmluZGV4KTtcbiAgICAgICAgICAgIGZvcihsZXQgcHQgb2Ygc2VyaWVzLnBvaW50cyl7XG4gICAgICAgICAgICAgICAgaWYoIHB0ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgeHZhbHVlIDpWYWx1ZT0gcHQueDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHl2YWx1ZSA6VmFsdWU9IHB0Lnk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvcnZhbHVlIDpWYWx1ZSA9IHB0LmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hhcGU6VmFsdWUgPSBwdC5zaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgOlZhbHVlPSBwdC5zaXplO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeDpudW1iZXIgPSB4U2NhbGUuZ2V0U2NhbGVWYWx1ZSh4dmFsdWUudmFsdWUpIDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkgPSB5dmFsdWUuaXNNdWx0aXBsZT8geXZhbHVlLnZhbHVlWzFdOnl2YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHlTY2FsZS5nZXRTY2FsZVZhbHVlKHkpO1xuICAgICAgICAgICAgICAgICAgICB4cy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB5cy5wdXNoKHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBsaW5lc1NoYXBlOkxpbmVzU2hhcGUgPSBuZXcgTGluZXNTaGFwZSh0aGlzLmNvbnRleHQseHMseXMsbnVsbCxEZWZhdWx0LnN0cm9rZXN0eWxlKTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuc3Ryb2tlU3R5bGUuc3Ryb2tlQ29sb3IgPSBDb2xvclV0aWxzLmluZGV4Q29sb3Ioc2VyaWVzLmluZGV4KTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuc3R5bGUuc3Ryb2tlU3R5bGU9bnVsbDsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuaWQgPSBzZXJpZXMuaWQ7XG4gICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0LnB1c2gobGluZXNTaGFwZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX2xheW91dExpbmUoKXtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgZXhwb3J0IGNsYXNzIEFyZWFMYXlvdXQgZXh0ZW5kcyBDYXJ0ZXNpYW5MYXlvdXR7XG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0U2VyaWVzKHNlcmllczpTZXJpZXMsaW5kZXg6bnVtYmVyKTp2b2lke1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGxldCB5U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3knKTtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IHhzOm51bWJlcltdPVtdO1xuICAgICAgICAgICAgbGV0IHlzOm51bWJlcltdPVtdO1xuICAgICAgICAgICAgZm9yKGxldCBwdCBvZiBzZXJpZXMucG9pbnRzKXtcbiAgICAgICAgICAgICAgICBpZiggcHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4dmFsdWUgOlZhbHVlPSBwdC54O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeXZhbHVlIDpWYWx1ZT0gcHQueTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbG9ydmFsdWUgOlZhbHVlID0gcHQuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaGFwZTpWYWx1ZSA9IHB0LnNoYXBlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA6VmFsdWU9IHB0LnNpemU7XG5cblxuICAgICAgICAgICAgICAgICAgICBsZXQgeDpudW1iZXIgPSB4U2NhbGUuZ2V0U2NhbGVWYWx1ZSh4dmFsdWUudmFsdWUpIDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkwID0geXZhbHVlLmlzTXVsdGlwbGU/IHl2YWx1ZS52YWx1ZVswXTooeVNjYWxlLm1pbjwwPyh5U2NhbGUubWF4PDA/eVNjYWxlLm1heDowKTp5U2NhbGUubWluKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHkxID0geXZhbHVlLmlzTXVsdGlwbGU/IHl2YWx1ZS52YWx1ZVsxXTp5dmFsdWUudmFsdWU7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgeTAgPSB5U2NhbGUuZ2V0U2NhbGVWYWx1ZSh5MCk7XG4gICAgICAgICAgICAgICAgICAgIHkxID0geVNjYWxlLmdldFNjYWxlVmFsdWUoeTEpO1xuICAgICAgICAgICAgICAgICAgICB4cy5wdXNoKHgpO1xuICAgICAgICAgICAgICAgICAgICB5cy5wdXNoKHkwKTtcbiAgICAgICAgICAgICAgICAgICAgeHMudW5zaGlmdCh4KTtcbiAgICAgICAgICAgICAgICAgICAgeXMudW5zaGlmdCh5MSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxpbmVzU2hhcGU6QXJlYVNoYXBlID0gbmV3IEFyZWFTaGFwZSh0aGlzLmNvbnRleHQseHMseXMsbnVsbCxEZWZhdWx0LnN0cm9rZXN0eWxlKTtcbiAgICAgICAgICAgIGxpbmVzU2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IENvbG9yVXRpbHMuaW5kZXhDb2xvcihzZXJpZXMuaW5kZXgpO1xuICAgICAgICAgICAgbGluZXNTaGFwZS5zdHlsZS5zdHJva2VTdHlsZT1udWxsO1xuICAgICAgICAgICAgbGluZXNTaGFwZS5pZCA9IHNlcmllcy5pZDtcbiAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QucHVzaChsaW5lc1NoYXBlKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0TGluZSgpe1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5oaWVyYXJjaGljYWx7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIaWVyYXJjaGljYWxMYXlvdXQgZXh0ZW5kcyBCYXNlTGF5b3V0e1xuXG4gICAgICAgIHByb3RlY3RlZCBfcmVjdDogUmVjdCA9IG51bGw7XG4gICAgICAgIHByb3RlY3RlZCBfZW5jb2Rpbmc6IEVuY29kaW5nO1xuICAgICAgICBwcm90ZWN0ZWQgX2RlcHRoOm51bWJlcj0wO1xuICAgICAgICBwcm90ZWN0ZWQgX29mZnNldDpudW1iZXI9MTtcbiAgICAgICAgcHVibGljIHN0eWxlOiBTdHlsZSA9IERlZmF1bHQuc3R5bGU7XG4gICAgICAgIHB1YmxpYyBsaW5lU3R5bGU6IFN0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihjOkNvbnRleHQpe1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLl9kZXB0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByb3RlY3RlZCBfY2FsY0RlZXAocm9vdHM6SXRlbVtdKXtcbiAgICAgICAgICAgIHRoaXMuX2RlcHRoID0wO1xuICAgICAgICAgICAgdGhpcy5fZGVwdGggPSB0aGlzLl9fY2FsY0RlZXAocm9vdHMpKzE7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9fY2FsY0RlZXAoaXRlbXM6SXRlbVtdKTpudW1iZXJ7XG4gICAgICAgICAgICBpZihpdGVtcyAhPSBudWxsICYmIGl0ZW1zLmxlbmd0aCA+MCl7XG4gICAgICAgICAgICAgICAgbGV0IGRlZXA9MDtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMgKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJkZWVwID0gdGhpcy5fX2NhbGNEZWVwKGl0ZW0uY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLl9oaWRkZW49ZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRlZXAgPCBjdXJyZGVlcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWVwID0gY3VycmRlZXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICsrZGVlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgYWJzdHJhY3QgY29udmVydChyb290czpJdGVtW10sZW5jb2Rpbmc6RW5jb2RpbmcscmVjdDpSZWN0LGNhbnZhczpDYW52YXMpOlBsb3RTaGFwZVtdO1xuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5oaWVyYXJjaGljYWwge1xuICAgICd1c2Ugc3RyaWN0JztcblxuXG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuXG4gICAgZXhwb3J0IGNsYXNzIFN1bmJ1cnN0TGF5b3V0IGV4dGVuZHMgSGllcmFyY2hpY2FsTGF5b3V0IHtcblxuICAgICAgICBwcml2YXRlIF9fc3RhcnRBbmdsZTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9fc3dlZXA6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfX2lubmVyUmFkaXVzOm51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfX3JhZGl1czpudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX19jeDogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9fY3k6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfX3ByZWFuZ2xlOiBudW1iZXI7ICAgICAgICBcbiAgICAgICAgcHJpdmF0ZSBfX3JhZGl1c1VuaXQ6bnVtYmVyO1xuICAgIFxuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQsc3RhcnRBbmdsZTogbnVtYmVyLCBzd2VlcDogbnVtYmVyLGlubmVyUmFkaXVzKSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgICAgIHRoaXMuX19zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHRoaXMuX19pbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzO1xuICAgICAgICAgICAgdGhpcy5fX3N3ZWVwID0gc3dlZXA7XG4gICAgICAgIH1cblxuICAgICAgICBjb252ZXJ0KHJvb3RzOiBJdGVtW10sIGVuY29kaW5nOiBFbmNvZGluZywgcmVjdDogUmVjdCwgY2FudmFzOiBDYW52YXMpOiBQbG90U2hhcGVbXSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxjRGVlcChyb290cyk7XG4gICAgICAgICAgICB0aGlzLl9fY3ggPSAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkvMjtcbiAgICAgICAgICAgIHRoaXMuX19jeSA9IChyZWN0LnRvcCArIHJlY3QuYm90dG9tKS8yO1xuICAgICAgICAgICAgdGhpcy5fX3JhZGl1cyA9IHJlY3Qud2lkdGg8cmVjdC5oZWlnaHQ/cmVjdC53aWR0aC8yOnJlY3QuaGVpZ2h0LzI7XG4gICAgICAgICAgICB0aGlzLl9fcmFkaXVzVW5pdCA9ICh0aGlzLl9fcmFkaXVzIC0gdGhpcy5fX2lubmVyUmFkaXVzIC0gdGhpcy5fb2Zmc2V0KSAvICh0aGlzLl9kZXB0aCAtIDEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgYTpBbmFseXNpcyA9IG5ldyBBbmFseXNpcyhyb290cyx0aGlzLl9fY3gsdGhpcy5fX2N5LHRoaXMuX19zdGFydEFuZ2xlLHRoaXMuX19zd2VlcCt0aGlzLl9fc3RhcnRBbmdsZSx0aGlzLl9faW5uZXJSYWRpdXMsdGhpcy5fX2lubmVyUmFkaXVzK3RoaXMuX19yYWRpdXNVbml0LDAsMCk7XG4gICAgICAgICAgICB0aGlzLl9fY2FsY1N1bShhKTtcbiAgICAgICAgICAgIHRoaXMuX19wcmVhbmdsZSA9IGEuc3dlZXAgLyBhLnN1bTtcbiAgICAgICAgICAgIHRoaXMuX19sYXlvdXRJdGVtcyhhLGNhbnZhcyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX19sYXlvdXRJdGVtcyhhbmFseXNpczogQW5hbHlzaXMsIGVuZ2luZTogQ2FudmFzKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IGFuYWx5c2lzLnN0YXJ0QW5nbGU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuYWx5c2lzLnZzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHY6IEl0ZW0gPSBhbmFseXNpcy52c1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgc3dlZXAgOm51bWJlcj0gdi5zaXplLnZhbHVlICogdGhpcy5fX3ByZWFuZ2xlO1xuICAgICAgICAgICAgICAgIHZhciBjeCA9IGFuYWx5c2lzLmN4O1xuICAgICAgICAgICAgICAgIHZhciBjeSA9IGFuYWx5c2lzLmN5O1xuICAgICAgICAgICAgICAgIGlmIChhbmFseXNpcy5kZXB0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN4ID0gYW5hbHlzaXMuY3ggKyB0aGlzLl9vZmZzZXQgKiBNYXRoLmNvcyhzdGFydEFuZ2xlICsgc3dlZXAgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgY3kgPSBhbmFseXNpcy5jeSArIHRoaXMuX29mZnNldCAqIE1hdGguc2luKHN0YXJ0QW5nbGUgKyBzd2VlcCAvIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2hhcGU6IFN1bmJ1cnN0U2hhcGUgPSBuZXcgU3VuYnVyc3RTaGFwZSh0aGlzLmNvbnRleHQsIGN4LCBjeSwgIGFuYWx5c2lzLmlubmVyUmFkaXVzLGFuYWx5c2lzLnJhZGl1cywgc3RhcnRBbmdsZSxzd2VlcCxEZWZhdWx0LnN0eWxlLERlZmF1bHQuc3Ryb2tlc3R5bGUpO1xuICAgICAgICAgICAgICAgIHNoYXBlLnN0eWxlLmJhY2tncm91bmQgPUNvbG9yVXRpbHMuaW5kZXhDb2xvcihwYXJzZUludCh2LmlkKSk7XG4gICAgICAgICAgICAgICAgc2hhcGUuaWQgPSB2LmlkO1xuICAgICAgICAgICAgICAgIHNoYXBlLnRleHQgPSB2LnRleHQudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fX3NoYXBlbGlzdC5wdXNoKHNoYXBlKTtcblxuICAgICAgICAgICAgICAgIGlmICh2LmNoaWxkcmVuICYmIHYuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRfYW5hbHlzaXM6IEFuYWx5c2lzID0gbmV3IEFuYWx5c2lzKHYuY2hpbGRyZW4sIGN4LCBjeSwgc3RhcnRBbmdsZSwgc3RhcnRBbmdsZSArIHN3ZWVwLCBhbmFseXNpcy5yYWRpdXMsIGFuYWx5c2lzLnJhZGl1cyArIHRoaXMuX19yYWRpdXNVbml0LCAwLCBhbmFseXNpcy5kZXB0aCArIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fY2FsY1N1bShjaGlsZF9hbmFseXNpcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19sYXlvdXRJdGVtcyhjaGlsZF9hbmFseXNpcywgZW5naW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSArPSBzd2VlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX19jYWxjU3VtKGE6IEFuYWx5c2lzKTogdm9pZCB7XG4gICAgICAgICAgICBsZXQgc3VtOiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgdiBvZiBhLnZzKSB7XG4gICAgICAgICAgICAgICAgc3VtICs9ICgodi5zaXplLnZhbHVlID09IG51bGwpfHwoaXNOYU4odi5zaXplLnZhbHVlKSk/IDA6di5zaXplLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEuc3VtID0gc3VtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsYXNzIEFuYWx5c2lzIHtcbiAgICAgICAgc3RhcnRBbmdsZTogbnVtYmVyO1xuICAgICAgICBlbmRBbmdsZTogbnVtYmVyO1xuICAgICAgICByYWRpdXM6IG51bWJlcjtcbiAgICAgICAgaW5uZXJSYWRpdXM6IG51bWJlcjtcbiAgICAgICAgdnM6IEl0ZW1bXTtcbiAgICAgICAgc3VtOiBudW1iZXI7XG4gICAgICAgIGN4OiBudW1iZXI7XG4gICAgICAgIGN5OiBudW1iZXI7XG4gICAgICAgIGRlcHRoOiBudW1iZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKHZzOiBJdGVtW10sIGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlciwgaW5uZXJSYWRpdXM6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIG1heDogbnVtYmVyLCBkZXB0aDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnZzID0gdnM7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QW5nbGUgPSBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgdGhpcy5lbmRBbmdsZSA9IGVuZEFuZ2xlO1xuICAgICAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzO1xuICAgICAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICB0aGlzLnN1bSA9IG1heDtcbiAgICAgICAgICAgIHRoaXMuZGVwdGggPSBkZXB0aDtcbiAgICAgICAgICAgIHRoaXMuY3ggPSBjeDtcbiAgICAgICAgICAgIHRoaXMuY3kgPSBjeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBzd2VlcCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuZEFuZ2xlIC0gdGhpcy5zdGFydEFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYWRpdXMgLSB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5oaWVyYXJjaGljYWwge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBVdGlsaXR5ID0gYW5kcm9pZC50ZXN0LlV0aWxpdHk7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgZXhwb3J0IGNsYXNzIFRyZWVNYXBMYXlvdXQgZXh0ZW5kcyBIaWVyYXJjaGljYWxMYXlvdXQge1xuICAgICAgICBwcm90ZWN0ZWQgX2xpbWl0ZWQ6IG51bWJlciA9IDUwMDtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0LHJlY3Q6IFJlY3QpIHtcbiAgICAgICAgICAgIHN1cGVyKGMpO1xuICAgICAgICAgICAgdGhpcy5fcmVjdCA9IHJlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgY29udmVydChyb290czogSXRlbVtdLCBlbmNvZGluZzogRW5jb2RpbmcsIHJlY3Q6IFJlY3QsIGNhbnZhczogQ2FudmFzKTogUGxvdFNoYXBlW10ge1xuXG4gICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLl9jYWxjRGVlcChyb290cyk7XG4gICAgICAgICAgICBsZXQgYTogQW5hbHlzaXMgPSBuZXcgQW5hbHlzaXMocm9vdHMsIHJlY3QubGVmdCwgcmVjdC50b3AsIHJlY3QucmlnaHQsIHJlY3QuYm90dG9tLCAwLCAwKTtcbiAgICAgICAgICAgIHRoaXMuX19jYWxjU3VtKGEpO1xuICAgICAgICAgICAgdGhpcy5fX2hpZGVTbWFsbE5vZGUoYSk7XG4gICAgICAgICAgICB0aGlzLl9fbGF5b3V0SXRlbXMoYSwgY2FudmFzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc2hhcGVsaXN0O1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19oaWRlU21hbGxOb2RlKGE6IEFuYWx5c2lzKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAoYSAhPSBudWxsICYmIGEudnMgIT0gbnVsbCAmJiBhLnZzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJlU2l6ZSA9IGEuYXJlYSAvIGEuc3VtO1xuICAgICAgICAgICAgICAgIGEudnMuc29ydCgoYSwgYikgPT4gYS5zaXplLnZhbHVlIC0gYi5zaXplLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoOiBudW1iZXIgPSBhLnZzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2IG9mIGEudnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYuc2l6ZS52YWx1ZSAqIHByZVNpemUgPCB0aGlzLl9saW1pdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2Ll9oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5zdW0gLT0gdi5zaXplLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlU2l6ZSA9IGEuYXJlYSAvIGEuc3VtO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfX2NhbGNTdW0oYTogQW5hbHlzaXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCBzdW06IG51bWJlciA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCB2IG9mIGEudnMpIHtcbiAgICAgICAgICAgICAgICBzdW0gKz0gdi5zaXplLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYS5zdW0gPSBzdW07XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBfX2xheW91dEl0ZW1zKGFuYWx5c2lzOiBBbmFseXNpcywgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmIChhbmFseXNpcy5zdW0gPD0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGxldCB0b3RhbF9yZWN0TGFzdDogUmVjdCA9IG5ldyBSZWN0KGFuYWx5c2lzLmwsIGFuYWx5c2lzLnQsIGFuYWx5c2lzLnIsIGFuYWx5c2lzLmIpO1xuICAgICAgICAgICAgbGV0IHByZVNpemUgPSBhbmFseXNpcy5hcmVhIC8gYW5hbHlzaXMuc3VtO1xuXG4gICAgICAgICAgICBhbmFseXNpcy52cy5zb3J0KChhLCBiKSA9PiBiLnNpemUudmFsdWUgLSBhLnNpemUudmFsdWUpO1xuICAgICAgICAgICAgbGV0IHJhdGUgPSAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbmFseXNpcy52cy5sZW5ndGggJiYgIXRvdGFsX3JlY3RMYXN0LmlzTmlsOykge1xuICAgICAgICAgICAgICAgIGxldCByZWN0czogUmVjdFtdID0gdGhpcy5fX2xvY2F0aW9uUmVjdHMoYW5hbHlzaXMudnMsIGksIHByZVNpemUsIHRvdGFsX3JlY3RMYXN0KTtcbiAgICAgICAgICAgICAgICBsZXQgY2xpcHJlY3Q6IFJlY3QgPSBVdGlsLnVuaW9uKC4uLnJlY3RzKTtcbiAgICAgICAgICAgICAgICB0b3RhbF9yZWN0TGFzdCA9IHRoaXMuX19jbGlwUmVjdChjbGlwcmVjdCwgdG90YWxfcmVjdExhc3QpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVjdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3Q6IFJlY3QgPSByZWN0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKFV0aWwuaXNNaXhlZChyZWN0LCB0aGlzLl9yZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHY6IEl0ZW0gPSBhbmFseXNpcy52c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaGFwZTogQ3ViZVNoYXBlID0gbmV3IEN1YmVTaGFwZSh0aGlzLmNvbnRleHQscmVjdC5sZWZ0LCByZWN0LnRvcCwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQsIERlZmF1bHQuc3R5bGUsIERlZmF1bHQuc3Ryb2tlc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUudmlzaWFibGUgPSBWaWV3U3RhdGUuVmlzaWFibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID1Db2xvclV0aWxzLmluZGV4Q29sb3IocGFyc2VJbnQodi5pZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuaWQgPSB2LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUudGV4dCA9IHYudGV4dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNoYXBlLm9uRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYuX2hpZGRlbikgeyBpKys7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodi5jaGlsZHJlbiAmJiB2LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4odGhpcy5fb2Zmc2V0KSAmJiB0aGlzLl9vZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9ICh0aGlzLl9kZXB0aCAtIGFuYWx5c2lzLmRlcHRoKSAvIHRoaXMuX2RlcHRoICogdGhpcy5fb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0ID0gbmV3IFJlY3QocmVjdC5sZWZ0ICsgb2Zmc2V0LCByZWN0LnRvcCArIG9mZnNldCwgcmVjdC5yaWdodCAtIG9mZnNldCwgcmVjdC5ib3R0b20gLSBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZF9hbmFseXNpcyA9IG5ldyBBbmFseXNpcyh2LmNoaWxkcmVuLCByZWN0LmxlZnQsIHJlY3QudG9wLCByZWN0LmxlZnQgKyByZWN0LndpZHRoLCByZWN0LnRvcCArIHJlY3QuaGVpZ2h0LCB2LnNpemUudmFsdWUsIGFuYWx5c2lzLmRlcHRoICsgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fY2FsY1N1bShjaGlsZF9hbmFseXNpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2hpZGVTbWFsbE5vZGUoY2hpbGRfYW5hbHlzaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZF9hbmFseXNpcy5zdW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLnZpc2lhYmxlID0gVmlld1N0YXRlLkluVmlzaWFibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19sYXlvdXRJdGVtcyhjaGlsZF9hbmFseXNpcywgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QucHVzaChzaGFwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9fbG9jYXRpb25SZWN0cyh2czogSXRlbVtdLCBpbmRleDogbnVtYmVyLCBwcmVTaXplOiBudW1iZXIsIHJlY3Q6IFJlY3QpOiBSZWN0W10ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdFJlY3Q6IFJlY3RbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IGxhc3RSYXRlOiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgbGV0IGxhc3RTaXplOiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgbGV0IGxhc3RXLCBsYXN0SDogbnVtYmVyID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA8IHZzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHYgPSB2c1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdywgaCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHZ3LCB2aCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHYuc2l6ZS52YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICB2ID0gdnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZWN0LmhlaWdodCA8IHJlY3Qud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNpemUgKz0gdi5zaXplLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2dyA9IHcgPSAobGFzdFNpemUgKiBwcmVTaXplKSAvIHJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2aCA9ICh2c1tpbmRleF0uc2l6ZS52YWx1ZSAqIHByZVNpemUpIC8gdnc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0UmF0ZSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wUmF0ZSA9IHZoID4gdncgPyB2aCAvIHZ3IDogdncgLyB2aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0bXBSYXRlIC0gMSkgPCBNYXRoLmFicyhsYXN0UmF0ZSAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFJhdGUgPSB0bXBSYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFJlY3QubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UmF0ZSA9IHZoID4gdncgPyB2aCAvIHZ3IDogdncgLyB2aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRSZWN0Lmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpbmRleDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByOiBSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRIID0gdnNbal0uc2l6ZS52YWx1ZSAqIHByZVNpemUgLyB2dztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuZXcgUmVjdChyZWN0LmxlZnQsIHJlY3QudG9wLCByZWN0LmxlZnQgKyB2dywgcmVjdC50b3AgKyB2aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuZXcgUmVjdChyZXN1bHRSZWN0W2ogLSBpbmRleCAtIDFdLmxlZnQsIHJlc3VsdFJlY3RbaiAtIGluZGV4IC0gMV0uYm90dG9tLCByZXN1bHRSZWN0W2ogLSBpbmRleCAtIDFdLmxlZnQgKyB2dywgY3VycmVudEggKyByZXN1bHRSZWN0W2ogLSBpbmRleCAtIDFdLmJvdHRvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRSZWN0LnB1c2gocik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0U2l6ZSArPSB2LnNpemUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZoID0gaCA9IChsYXN0U2l6ZSAqIHByZVNpemUpIC8gcmVjdC53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdncgPSAodnNbaW5kZXhdLnNpemUudmFsdWUgKiBwcmVTaXplKSAvIHZoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0UmF0ZSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wUmF0ZSA9IHZoID4gdncgPyB2aCAvIHZ3IDogdncgLyB2aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRtcFJhdGUgLSAxKSA8IE1hdGguYWJzKGxhc3RSYXRlIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0UmF0ZSA9IHRtcFJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UmVjdC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0UmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RSYXRlID0gdmggPiB2dyA/IHZoIC8gdncgOiB2dyAvIHZoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFJlY3QubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGluZGV4OyBqIDw9IGk7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHI6IFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFcgPSB2c1tqXS5zaXplLnZhbHVlICogcHJlU2l6ZSAvIHZoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBSZWN0KHJlY3QubGVmdCwgcmVjdC50b3AsIHJlY3QubGVmdCArIHZ3LCByZWN0LnRvcCArIHZoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBSZWN0KHJlc3VsdFJlY3RbaiAtIGluZGV4IC0gMV0ucmlnaHQsIHJlc3VsdFJlY3RbaiAtIGluZGV4IC0gMV0udG9wLCByZXN1bHRSZWN0W2ogLSBpbmRleCAtIDFdLnJpZ2h0ICsgY3VycmVudFcsIHJlc3VsdFJlY3RbaiAtIGluZGV4IC0gMV0udG9wICsgdmgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0UmVjdC5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RXID0gdnc7XG4gICAgICAgICAgICAgICAgbGFzdEggPSB2aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRSZWN0O1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX19jbGlwUmVjdChyOiBSZWN0LCByZWN0dG90YWw6IFJlY3QpOiBSZWN0IHtcbiAgICAgICAgICAgIGxldCByZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhyLndpZHRoIC0gcmVjdHRvdGFsLndpZHRoKSA8PSAwLjAwMDEpIHtcbiAgICAgICAgICAgICAgICByZWN0ID0gbmV3IFJlY3Qoci5sZWZ0LCByLmJvdHRvbSwgci5yaWdodCwgcmVjdHRvdGFsLmJvdHRvbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY3QgPSBuZXcgUmVjdChyLnJpZ2h0LCByLnRvcCwgcmVjdHRvdGFsLnJpZ2h0LCByLmJvdHRvbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVjdDtcbiAgICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICBjbGFzcyBBbmFseXNpcyB7XG4gICAgICAgIGw6IG51bWJlcjtcbiAgICAgICAgdDogbnVtYmVyO1xuICAgICAgICByOiBudW1iZXI7XG4gICAgICAgIGI6IG51bWJlcjtcbiAgICAgICAgdnM6IEl0ZW1bXTtcbiAgICAgICAgc3VtOiBudW1iZXI7XG5cbiAgICAgICAgZGVwdGg6IG51bWJlcjtcbiAgICAgICAgY29uc3RydWN0b3IodnM6IEl0ZW1bXSwgbDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBtYXg6IG51bWJlciwgZGVwdGg6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy52cyA9IHZzO1xuICAgICAgICAgICAgdGhpcy5sID0gbDtcbiAgICAgICAgICAgIHRoaXMudCA9IHQ7XG4gICAgICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICAgICAgdGhpcy5iID0gYjtcbiAgICAgICAgICAgIHRoaXMuc3VtID0gbWF4O1xuICAgICAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHcoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yIC0gdGhpcy5sO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iIC0gdGhpcy50O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGFyZWEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ICogdGhpcy5oO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25zdCBlMTA6IG51bWJlciA9IE1hdGguc3FydCg1MCk7XG4gICAgY29uc3QgZTU6IG51bWJlciA9IE1hdGguc3FydCgxMCk7XG4gICAgY29uc3QgZTI6IG51bWJlciA9IE1hdGguc3FydCgyKTtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVGlja3Mge1xuICAgICAgICBwcm90ZWN0ZWQgX3NjYWxlOiBTY2FsZTtcbiAgICAgICAgcHJvdGVjdGVkIF90aWNrczogYW55W107XG4gICAgICAgIGNvbnN0cnVjdG9yKHNjYWxlOiBTY2FsZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSBzY2FsZTtcblxuICAgICAgICAgICAgdGhpcy5fdGlja3MgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjcmVhdGUoc2NhbGU6IFNjYWxlLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IFRpY2tzIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYWJzdHJhY3QgY3JlYXRlVGlja3MoY291bnQ/Om51bWJlcik6IHZvaWQ7XG5cbiAgICAgICAgcHJvdGVjdGVkIF9jcmVhdGVUaWNrcyhzdGFydDogbnVtYmVyLCBzdG9wOiBudW1iZXIsIGNvdW50OiBudW1iZXIpIHtcblxuICAgICAgICAgICAgdmFyIHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsXG4gICAgICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgdGlja3MsXG4gICAgICAgICAgICAgICAgc3RlcDtcblxuICAgICAgICAgICAgaWYgKHJldmVyc2UpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcblxuICAgICAgICAgICAgaWYgKChzdGVwID0gdGhpcy5fdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICAgICAgICAgICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICAgICAgICAgICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgICAgICAgICAgICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICAgICAgICAgICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aWNrcztcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBfdGlja0luY3JlbWVudChzdGFydDogbnVtYmVyLCBzdG9wOiBudW1iZXIsIGNvdW50OiBudW1iZXIpIHtcbiAgICAgICAgICAgIGxldCBzdGVwOiBudW1iZXIgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgICAgICAgICAgICBwb3dlcjogbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bWJlciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgICAgICAgICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgICAgICAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgIF90aWNrU3RlcChzdGFydDogbnVtYmVyLCBzdG9wOiBudW1iZXIsIGNvdW50OiBudW1iZXIpIHtcbiAgICAgICAgICAgIGxldCBzdGVwMDogbnVtYmVyID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgICAgICAgICAgICBzdGVwMTogbnVtYmVyID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bWJlciA9IHN0ZXAwIC8gc3RlcDE7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gICAgICAgICAgICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgTGluZWFyVGlja3MgZXh0ZW5kcyBUaWNrcyB7XG4gICAgICAgIHN0YXRpYyBjcmVhdGUoc2NhbGU6IFNjYWxlKSB7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoc2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSwgXCIgc2NhbGUgbXVzdCBiZSBMaW5lYXJTY2FsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGluZWFyVGlja3Moc2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZVRpY2tzKGNvdW50PzogbnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBsZXQgc3RlcDpudW1iZXIsIHN0YXJ0Om51bWJlcixzdG9wOm51bWJlcjtcbiAgICAgICAgICAgIC8vIHN0ZXAgPSB0aGlzLl90aWNrSW5jcmVtZW50KHRoaXMuX3N0YXJ0LCB0aGlzLl9lbmQsIGNvdW50KTtcbiAgICAgICAgICAgIC8vIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICAgLy8gICAgIHN0YXJ0ID0gTWF0aC5mbG9vcih0aGlzLl9zdGFydC9zdGVwKSAqIHN0ZXA7XG4gICAgICAgICAgICAvLyAgICAgc3RvcCA9IE1hdGguZmxvb3IodGhpcy5fZW5kL3N0ZXApICogc3RlcDtcbiAgICAgICAgICAgIC8vICAgICBzdGVwID0gdGhpcy5fdGlja0luY3JlbWVudChzdGFydCxzdG9wLGNvdW50KTtcbiAgICAgICAgICAgIC8vIH1lbHNlIGlmKHN0ZXAgPCAwKXtcbiAgICAgICAgICAgIC8vICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgICAgICAgIC8vICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgICAgICAgLy8gICAgIHN0ZXAgPSB0aGlzLl90aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gbnVsbCB8fCBpc05hTihjb3VudCkpIHtcbiAgICAgICAgICAgICAgICBjb3VudCA9IDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdGlja3MgPSB0aGlzLl9jcmVhdGVUaWNrcyh0aGlzLl9zY2FsZS5tYXgsIHRoaXMuX3NjYWxlLm1pbiwgY291bnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tzO1xuICAgICAgICB9XG4gICAgICAgIG5pY2VTY2FsZSgpOiBMaW5lYXJTY2FsZSB7XG4gICAgICAgICAgICBsZXQgc2NhbGUgPSA8TGluZWFyU2NhbGU+dGhpcy5fc2NhbGU7XG4gICAgICAgICAgICBsZXQgc3RlcDogbnVtYmVyID0gdGhpcy5fdGlja1N0ZXAoc2NhbGUubWluLCBzY2FsZS5tYXgsIDEwKTtcbiAgICAgICAgICAgIGlmIChzdGVwID09IDApIHtcbiAgICAgICAgICAgICAgICBzdGVwID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuaWNlTWluOiBudW1iZXIgPSBzY2FsZS5taW4gPT09IDAgPyAwIDogKE1hdGguZmxvb3Ioc2NhbGUubWluIC8gc3RlcCkpICogc3RlcDtcbiAgICAgICAgICAgIGxldCBuaWNlTWF4OiBudW1iZXIgPSAoTWF0aC5mbG9vcihzY2FsZS5tYXggLyBzdGVwKSArIDEpICogc3RlcDtcbiAgICAgICAgICAgIHNjYWxlLmRvbWFpbihbbmljZU1pbiwgbmljZU1heF0pLnJlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgTG9nVGlja3MgZXh0ZW5kcyBUaWNrcyB7XG4gICAgICAgIHN0YXRpYyBjcmVhdGUoc2NhbGU6IFNjYWxlKSB7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQoc2NhbGUgaW5zdGFuY2VvZiBMb2dTY2FsZSwgXCIgc2NhbGUgbXVzdCBiZSBMaW5lYXJTY2FsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTG9nVGlja3Moc2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIGNyZWF0ZVRpY2tzKGNvdW50PzogbnVtYmVyKSB7XG5cbiAgICAgICAgICAgIGlmKGNvdW50ID09IG51bGwgfHwgaXNOYU4oY291bnQpKXtcbiAgICAgICAgICAgICAgICBjb3VudCA9IDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdGlja3MgPSB0aGlzLl9jcmVhdGVUaWNrcyh0aGlzLl9zY2FsZS5tYXgsdGhpcy5fc2NhbGUubWluLGNvdW50KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aWNrcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3Qge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgT3JkaW5hbFRpY2tzIGV4dGVuZHMgVGlja3Mge1xuICAgICAgICBzdGF0aWMgY3JlYXRlKHNjYWxlOiBTY2FsZSkge1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlLCBcIiBzY2FsZSBtdXN0IGJlIE9yZGluYWxTY2FsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT3JkaW5hbFRpY2tzKHNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVUaWNrcyhjb3VudD86IG51bWJlcikge1xuXG4gICAgICAgICAgICAvLyB0aGlzLl90aWNrcyA9IHRoaXMuX2NyZWF0ZVRpY2tzKHRoaXMuX3NjYWxlLm1heCx0aGlzLl9zY2FsZS5taW4sY291bnQpO1xuICAgICAgICAgICAgaWYoY291bnQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGlja3MgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgZG9tYWluczpzdHJpbmdbXSA9ICAoPE9yZGluYWxTY2FsZT50aGlzLl9zY2FsZSkuZG9tYWlucztcbiAgICAgICAgICAgICAgICBpZihkb21haW5zLmxlbmd0aC9jb3VudDwyKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGlja3MgPSAoPE9yZGluYWxTY2FsZT50aGlzLl9zY2FsZSkuZG9tYWlucztcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXA6bnVtYmVyID0gTWF0aC5mbG9vcihkb21haW5zLmxlbmd0aC9jb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9MDsgaSA8IGRvbWFpbnMubGVuZ3RoOyBpKz1zdGVwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpY2tzLnB1c2goZG9tYWluc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl90aWNrcyA9ICg8T3JkaW5hbFNjYWxlPnRoaXMuX3NjYWxlKS5kb21haW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpY2tzO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxubmFtZXNwYWNlIGFuZHJvaWQudGVzdCB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBleHBvcnQgY2xhc3MgQXhpc1NoYXBlIGV4dGVuZHMgU2hhcGUge1xuXG4gICAgICAgIHB1YmxpYyBfbGFiZWw6IHN0cmluZztcbiAgICAgICAgcHVibGljIF9tYWpvcjogU3Ryb2tlU3R5bGU7XG4gICAgICAgIHB1YmxpYyBfbWlub3I6IFN0cm9rZVN0eWxlO1xuICAgICAgICBwdWJsaWMgX2xhYmxlUmVjdDogUm90YXRlUmVjdDtcbiAgICAgICAgcHVibGljIF9sYWJsZUZvbnQ6IEZvbnQ7XG4gICAgICAgIHB1YmxpYyBfbWFqb3JUaWNrOiBSb3RhdGVMaW5lO1xuICAgICAgICBwdWJsaWMgX21pbm9yVGljazogUm90YXRlTGluZTtcbiAgICAgICAgcHVibGljIF9zaG93TGFiZWw6IGJvb2xlYW47XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICAgICAgc3VwZXIoY29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLl9tYWpvciA9IERlZmF1bHQuc3Ryb2tlc3R5bGUuY2xvbmUoKTtcbiAgICAgICAgICAgIHRoaXMuX21pbm9yID0gRGVmYXVsdC5zdHJva2VzdHlsZS5jbG9uZSgpO1xuICAgICAgICAgICAgdGhpcy5fbGFibGVGb250ID0gRGVmYXVsdC5mb250LmNsb25lKCk7XG4gICAgICAgICAgICB0aGlzLl9zaG93TGFiZWwgPSB0cnVlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBvbkRyYXdTaGFwZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgY2FudmFzLnNhdmUoKTtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3TGluZSh0aGlzLl9tYWpvclRpY2suc3RhcnRQb2ludCwgdGhpcy5fbWFqb3JUaWNrLmVuZFBvaW50LCB0aGlzLl9tYWpvcik7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2hvd0xhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLmRyYXdUZXh0KHRoaXMuX2xhYmVsLCB0aGlzLl9sYWJsZVJlY3QubGVmdFRvcCwgdGhpcy5fbGFibGVGb250LCB0aGlzLl9sYWJsZVJlY3QubGVmdFRvcCwgdGhpcy5fbGFibGVSZWN0LmFuZ2xlICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYW52YXMuZHJhd0xpbmUodGhpcy5fbWlub3JUaWNrLnN0YXJ0UG9pbnQsIHRoaXMuX21pbm9yVGljay5lbmRQb2ludCwgdGhpcy5fbWlub3IpO1xuICAgICAgICAgICAgY2FudmFzLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBfZHJhd0FuaW1hdGlvbihjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IG9mZnNldHggPSB0aGlzLmFuaW1hdGlvblhzWzBdIC0gdGhpcy5fbGFibGVSZWN0LnBvaW50c1swXS54O1xuICAgICAgICAgICAgbGV0IG9mZnNldHkgPSB0aGlzLmFuaW1hdGlvbllzWzBdIC0gdGhpcy5fbGFibGVSZWN0LnBvaW50c1swXS55O1xuICAgICAgICAgICAgbGV0IF9tYWpvclRpY2tTdGFydHB0OiBQb2ludCA9IHRoaXMuX21ham9yVGljay5zdGFydFBvaW50LmNsb25lKCk7XG4gICAgICAgICAgICBsZXQgX21ham9yVGlja0VuZHB0OiBQb2ludCA9IHRoaXMuX21ham9yVGljay5lbmRQb2ludC5jbG9uZSgpO1xuICAgICAgICAgICAgX21ham9yVGlja1N0YXJ0cHQub2Zmc2V0KG9mZnNldHgsIG9mZnNldHkpO1xuICAgICAgICAgICAgX21ham9yVGlja0VuZHB0Lm9mZnNldChvZmZzZXR4LCBvZmZzZXR5KTtcbiAgICAgICAgICAgIGxldCBsdDogUG9pbnQgPSB0aGlzLl9sYWJsZVJlY3QubGVmdFRvcC5jbG9uZSgpO1xuICAgICAgICAgICAgbHQub2Zmc2V0KG9mZnNldHgsIG9mZnNldHkpO1xuICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lKF9tYWpvclRpY2tTdGFydHB0LCBfbWFqb3JUaWNrRW5kcHQsIHRoaXMuX21ham9yKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaG93TGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuZHJhd1RleHQodGhpcy5fbGFiZWwsIGx0LCB0aGlzLl9sYWJsZUZvbnQsIGx0LCB0aGlzLl9sYWJsZVJlY3QuYW5nbGUgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBfbWlub3JUaWNrU3RhcnRwdDogUG9pbnQgPSB0aGlzLl9taW5vclRpY2suc3RhcnRQb2ludC5jbG9uZSgpO1xuICAgICAgICAgICAgbGV0IF9taW5vclRpY2tFbmRwdDogUG9pbnQgPSB0aGlzLl9taW5vclRpY2suZW5kUG9pbnQuY2xvbmUoKTtcbiAgICAgICAgICAgIF9taW5vclRpY2tTdGFydHB0Lm9mZnNldChvZmZzZXR4LCBvZmZzZXR5KTtcbiAgICAgICAgICAgIF9taW5vclRpY2tFbmRwdC5vZmZzZXQob2Zmc2V0eCwgb2Zmc2V0eSk7XG4gICAgICAgICAgICBjYW52YXMuZHJhd0xpbmUoX21pbm9yVGlja1N0YXJ0cHQsIF9taW5vclRpY2tFbmRwdCwgdGhpcy5fbWlub3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0cHRzKHNpemU6IG51bWJlcik6IHsgeHM6IG51bWJlcltdLCB5czogbnVtYmVyW10gfSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcHRzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wdHMgPSB7IHhzOiBbXSwgeXM6IFtdIH07XG4gICAgICAgICAgICAgICAgbGV0IHB0czogUG9pbnRbXSA9IHRoaXMuX2xhYmxlUmVjdC5wb2ludHM7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA0OyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHRzLnhzLnB1c2gocHRzW2pdLngpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdHMueXMucHVzaChwdHNbal0ueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3B0cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2goKTogdm9pZCB7XG5cbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxuY29uc3QgTEFCRUxfUEFERElORyA6bnVtYmVyID0gNDtcbmNvbnN0IE1BSk9SX1RJQ0tfSEVJR0hUOm51bWJlciA9IDY7XG5jb25zdCBNSU5PUl9USUNLX0hFSUdIVDpudW1iZXIgPSA0O1xubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW57XG4gICAgJ3VzZSBzdHJpY3QnOyAgICAgICAgXG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBpbXBvcnQgRm9udCA9IGFuZHJvaWQuZ3JhcGhpY3MuRm9udDtcblxuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGU9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFZpZXdTdGF0ZT0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcblxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQXhpcyBleHRlbmRzIFZpZXdHcm91cHtcbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgX3NjYWxlOlNjYWxlO1xuICAgICAgICBwcml2YXRlIF9tYXg6bnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9taW46bnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9yZXZlcnNlZDpib29sZWFuO1xuICAgICAgICBwcml2YXRlIF9zZXJpZXM6c3RyaW5nW107XG4gICAgICAgIC8vIHByb3RlY3RlZCBfY2hpbGRyZW46U2hhcGVbXTtcbiAgICAgICAgcHJvdGVjdGVkIF9tYWpvclRpY2tIZWlnaHQ6bnVtYmVyO1xuICAgICAgICBwcm90ZWN0ZWQgX21pbm9yVGlja0hlaWdodDpudW1iZXJcbiAgICAgICAgcHJvdGVjdGVkIF9heGlzVHlwZTpBeGlzVHlwZTtcbiAgICAgICAgcHJvdGVjdGVkIF90aWNrczphbnlbXTtcbiAgICBcbiAgICAgICAgcHJvdGVjdGVkIF90aXRsZTpzdHJpbmc7XG4gICAgICAgIHByb3RlY3RlZCBfdGl0bGVGb250OkZvbnQ7XG4gICAgICAgIHByb3RlY3RlZCBfbGFiZWxGb250OkZvbnQ7XG4gICAgICAgIHByb3RlY3RlZCBfbWFqb3JTdHlsZTpTdHJva2VTdHlsZTtcbiAgICAgICAgcHJvdGVjdGVkIF9taW5vclN0eWxlOlN0cm9rZVN0eWxlO1xuICAgICAgICBwcm90ZWN0ZWQgX2xpbmVTdHlsZTpTdHJva2VTdHlsZTtcbiAgICAgICAgcHJvdGVjdGVkIF9uZWFyOmJvb2xlYW47XG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6Q29udGV4dCl7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuX21ham9yVGlja0hlaWdodCA9IE1BSk9SX1RJQ0tfSEVJR0hUO1xuICAgICAgICAgICAgdGhpcy5fbWlub3JUaWNrSGVpZ2h0ID0gTUlOT1JfVElDS19IRUlHSFQ7XG4gICAgICAgICAgICB0aGlzLl90aWNrcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fdGl0bGVGb250ID0gRGVmYXVsdC5mb250O1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxGb250ID0gRGVmYXVsdC5mb250O1xuICAgICAgICAgICAgdGhpcy5fbWFqb3JTdHlsZSA9IERlZmF1bHQuc3Ryb2tlc3R5bGU7XG4gICAgICAgICAgICB0aGlzLl9taW5vclN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgICAgIHRoaXMuX25lYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxGb250LmZvbnRDb2xvciA9IFwiIzI2MjYyNlwiO1xuICAgICAgICAgICAgdGhpcy5fc2VyaWVzPVtdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2NyZWF0ZVRpY2tzKCkgOmFueVtdO1xuICAgICAgICAgICAgXG5cbiAgICAgICAgcHVibGljIHNldCB0aXRsZSh2YWx1ZTpzdHJpbmcpe1xuICAgICAgICAgICAgdGhpcy5fdGl0bGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHRpdGxlKCk6c3RyaW5ne1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldCBtYWpvclN0eWxlKHZhbHVlOlN0cm9rZVN0eWxlKXtcbiAgICAgICAgICAgIHRoaXMuX21ham9yU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IG1ham9yU3R5bGUoKTpTdHJva2VTdHlsZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWpvclN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldCBtaW5vclN0eWxlKHZhbHVlOlN0cm9rZVN0eWxlKXtcbiAgICAgICAgICAgIHRoaXMuX21pbm9yU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IG1pbm9yU3R5bGUoKTpTdHJva2VTdHlsZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9taW5vclN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBzZXQgbGluZVN0eWxlKHZhbHVlOlN0cm9rZVN0eWxlKXtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVTdHlsZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgbGluZVN0eWxlKCk6U3Ryb2tlU3R5bGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGluZVN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldCB0aXRsZUZvbnQodmFsdWUgOkZvbnQpe1xuICAgICAgICAgICAgdGhpcy5fdGl0bGVGb250ID0gdmFsdWUuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHVibGljIGdldCB0aXRsZUZvbnQoKTpGb250e1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpdGxlRm9udDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQgbGFiZWxGb250KHZhbHVlIDpGb250KXtcbiAgICAgICAgICAgIHRoaXMuX2xhYmVsRm9udCA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBnZXQgbGFiZWxGb250KCk6Rm9udHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYWJlbEZvbnQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBzZXQgbWF4KHZhbHVlOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9tYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IG1pbih2YWx1ZTpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5fbWluID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCBtYXgoKTpudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQgbWluKCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHNlcmllcygpOnN0cmluZ1tde1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmllcztcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0IHNlcmllcyhzOnN0cmluZ1tdKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXJpZXMgPXM7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0IHNjYWxlKHZhbHVlOlNjYWxlKXtcbiAgICAgICAgICAgIGlmKHZhbHVlICE9IG51bGwgJiYgIXZhbHVlLmVxdWFsKHRoaXMuX3NjYWxlKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl90aWNrcyA9IHRoaXMuX2NyZWF0ZVRpY2tzKCk7XG4gICAgICAgICAgICB9ZWxzZSBpZih2YWx1ZSA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY2FsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGlja3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHNjYWxlKCk6U2NhbGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldCByZXZlcnNlZCh2YWx1ZTpib29sZWFuKXtcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VkID12YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0IHJldmVyc2VkKCk6Ym9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZlcnNlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZXQgdHlwZSh2YWx1ZTpBeGlzVHlwZSl7XG4gICAgICAgICAgICB0aGlzLl9heGlzVHlwZSA9dmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldCB0eXBlKCk6QXhpc1R5cGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXhpc1R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgcHVibGljIHNldCBuZWFyKHZhbHVlIDpib29sZWFuKXtcbiAgICAgICAgICAgIHRoaXMuX25lYXIgPSB2YWx1ZTtcbiAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBnZXQgbmVhcigpOmJvb2xlYW57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFic3RyYWN0IF9sYXlvdXRYQXhpcyhjYW52YXM6Q2FudmFzKTp2b2lkO1xuICAgICAgICBhYnN0cmFjdCBfbGF5b3V0WUF4aXMoY2FudmFzOkNhbnZhcyk6dm9pZDtcbiAgICAgICAgcHJvdGVjdGVkIF9vdmVyTGFwTGFiZWxzKCk6dm9pZHtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiBBeGlzU2hhcGUgJiYgY2hpbGQudmlzaWFibGUgPT0gVmlld1N0YXRlLlZpc2lhYmxlKXtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gaTsgaiA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2ope1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXBhcmVjaGlsZCA9IHRoaXMuY2hpbGRyZW5bal07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjb21wYXJlY2hpbGQgaW5zdGFuY2VvZiBBeGlzU2hhcGUgJiYgY29tcGFyZWNoaWxkLnZpc2lhYmxlID09IFZpZXdTdGF0ZS5WaXNpYWJsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoVXRpbGl0eS5pc01peGVkUm90YXRlZFJlY3QoY29tcGFyZWNoaWxkLl9sYWJsZVJlY3QsY2hpbGQuX2xhYmxlUmVjdCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wYXJlY2hpbGQudmlzaWFibGUgPSBWaWV3U3RhdGUuR29uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemV7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub25NZWFzdXJlKHdpZHRoLGhlaWdodCxjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsdCxyLGIsY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWR7XG4gICAgICAgICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBfZm9ybWF0KHZhbDphbnkpe1xuICAgICAgICAgICAgcmV0dXJuIHZhbCtcIlwiO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBpbXBvcnQgTGF5b3V0SW5mbyA9IGFuZHJvaWQudmlldy5MYXlvdXRJbmZvO1xuXG4gICAgZXhwb3J0IGNsYXNzIExpbmVBeGlzIGV4dGVuZHMgQmFzZUF4aXMge1xuICAgICAgICBwcml2YXRlIF9tYXhMYWJlbFNpemU6IFNpemU7XG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5fbWF4TGFiZWxTaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJvdGVjdGVkIGdldCBjaGlsZHJlbigpOkFycmF5PFZpZXc+e1xuICAgICAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgc2V0IG5lYXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgICAgIHRoaXMuX25lYXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gQXhpc1R5cGUuWCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXZpdHkgPSBHcmF2aXR5LkJvdHRvbTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IEdyYXZpdHkuTGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gQXhpc1R5cGUuWCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXZpdHkgPSBHcmF2aXR5LlRvcDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IEdyYXZpdHkuUmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX2lkOnN0cmluZztcbiAgICAgICAgZ2V0IGlkKCk6c3RyaW5ne1xuICAgICAgICAgICAgaWYodGhpcy5faWQ9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9pZCA9IFV0aWwuSGFzaENvZGUoVXRpbC5IYXNoQ29kZSh0aGlzLl9heGlzVHlwZSkrIFV0aWwuSGFzaENvZGUodGhpcy5uZWFyKSArIFV0aWwuSGFzaENvZGUodGhpcy50aXRsZSkpO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2lkID0gKHRoaXMuX2F4aXNUeXBlKStcIixcIisgKHRoaXMubmVhcikgK1wiLFwiKyAodGhpcy50aXRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgbmVhcigpOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIF9jcmVhdGVUaWNrcygpOiBhbnlbXSB7XG4gICAgICAgICAgICBsZXQgdGlja3M6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5zY2FsZSBpbnN0YW5jZW9mIExpbmVhclNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdGlja3MgPSBMaW5lYXJUaWNrcy5jcmVhdGUodGhpcy5zY2FsZSkuY3JlYXRlVGlja3MoMTApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNjYWxlIGluc3RhbmNlb2YgTG9nU2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IExvZ1RpY2tzLmNyZWF0ZSh0aGlzLnNjYWxlKS5jcmVhdGVUaWNrcygxMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IE9yZGluYWxUaWNrcy5jcmVhdGUodGhpcy5zY2FsZSkuY3JlYXRlVGlja3MoKTtcbiAgICAgICAgICAgICAgICBpZiAodGlja3MubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICAgICAgICAgICAgdGlja3MgPSBPcmRpbmFsVGlja3MuY3JlYXRlKHRoaXMuc2NhbGUpLmNyZWF0ZVRpY2tzKDMwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGlmKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBUaW1lc2NhbGUpXG5cbiAgICAgICAgICAgIHJldHVybiB0aWNrcztcbiAgICAgICAgfVxuICAgICAgICBfbGF5b3V0WEF4aXMoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMuX3RpY2tzO1xuICAgICAgICAgICAgLy8gdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsVmlld3MoKTtcbiAgICAgICAgICAgIGxldCBsYXN0U2hhcGU6IEF4aXNTaGFwZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyB0aWNrcyAmJiBpIDwgdGlja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU6IG51bWJlciA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgICAgIGxldCBuZXh0VmFsdWU6IG51bWJlciA9IGkgPj0gdGlja3MubGVuZ3RoID8gbnVsbCA6IHRpY2tzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBsZXQgdGlja2hlaWdodDogbnVtYmVyID0gTWF0aC5tYXgodGhpcy5fbWFqb3JUaWNrSGVpZ2h0LCB0aGlzLl9taW5vclRpY2tIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IHRoaXMuX2Zvcm1hdCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsU2l6ZTogU2l6ZSA9IGNhbnZhcy5tZWFzdXJlU3RyaW5nKGxhYmVsLCB0aGlzLmxhYmVsRm9udCk7XG4gICAgICAgICAgICAgICAgbGV0IHg6IG51bWJlciA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QudG9wO1xuICAgICAgICAgICAgICAgIGxldCBueDogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGxldCBueTogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBueCA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBueSA9IHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBsYWJlbFg6IG51bWJlciA9IHg7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsWTogbnVtYmVyID0geSArIHRpY2toZWlnaHQgKyBMQUJFTF9QQURESU5HICsgbGFiZWxTaXplLmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgbGV0IHNoYXBlOiBBeGlzU2hhcGUgPSBuZXcgQXhpc1NoYXBlKHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbGFibGVSZWN0ID0gbmV3IFJvdGF0ZVJlY3QobGFiZWxYLCBsYWJlbFksIGxhYmVsU2l6ZS53aWR0aCwgbGFiZWxTaXplLmhlaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgc2hhcGUuX21ham9yVGljayA9IG5ldyBSb3RhdGVMaW5lKHgsIHksIHRoaXMuX21ham9yVGlja0hlaWdodCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2xhYmVsID0gbGFiZWw7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2xhYmxlRm9udCA9IHRoaXMuX2xhYmVsRm9udDtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbWFqb3IgPSB0aGlzLm1ham9yU3R5bGU7XG4gICAgICAgICAgICAgICAgc2hhcGUuX21pbm9yID0gdGhpcy5taW5vclN0eWxlO1xuICAgICAgICAgICAgICAgIHNoYXBlLmlkID0gVXRpbC5IYXNoQ29kZShsYWJlbCtcIixcIit0aGlzLmlkKTtcbiAgICAgICAgICAgICAgICAvLyBzaGFwZS5pZCA9IGxhYmVsK1wiLFwiK3RoaXMuaWQ7XG4gICAgICAgICAgICAgICAgbGV0IG1pbm9yeCA9IE5hTjtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG54KSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5vcnggPSAoeCArIG54KSAvIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoYXBlLl9taW5vclRpY2sgPSBuZXcgUm90YXRlTGluZShtaW5vcngsIHksIHRoaXMuX21pbm9yVGlja0hlaWdodCwgMCwgMCk7XG5cblxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2hhcGUgIT0gbnVsbCAmJiBVdGlsaXR5LmlzTWl4ZWRSb3RhdGVkUmVjdChzaGFwZS5fbGFibGVSZWN0LCBsYXN0U2hhcGUuX2xhYmxlUmVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuX3Nob3dMYWJlbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlLl9zaG93TGFiZWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBsYXN0U2hhcGUgPSBzaGFwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5fY2hpbGRyZW4ucHVzaChzaGFwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3V2l0aE91dFJlTGF5b3V0KHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF9sYXlvdXRZQXhpcyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHRpY2tzID0gdGhpcy5fdGlja3M7XG4gICAgICAgICAgICAvLyB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IHRpY2tzICYmIGkgPCB0aWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZTogbnVtYmVyID0gdGlja3NbaV07XG5cbiAgICAgICAgICAgICAgICBsZXQgbmV4dFZhbHVlOiBudW1iZXIgPSBpID49IHRpY2tzLmxlbmd0aCA/IG51bGwgOiB0aWNrc1tpICsgMV07XG4gICAgICAgICAgICAgICAgbGV0IHRpY2toZWlnaHQ6IG51bWJlciA9IE1hdGgubWF4KHRoaXMuX21ham9yVGlja0hlaWdodCwgdGhpcy5fbWlub3JUaWNrSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSB0aGlzLl9mb3JtYXQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbFNpemU6IFNpemUgPSBjYW52YXMubWVhc3VyZVN0cmluZyhsYWJlbCwgdGhpcy5sYWJlbEZvbnQpO1xuICAgICAgICAgICAgICAgIGxldCB5OiBudW1iZXIgPSB0aGlzLnNjYWxlLmdldFNjYWxlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCB4OiBudW1iZXIgPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LnJpZ2h0O1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5uZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBueDogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGxldCBueTogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBueSA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBueCA9IHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBsYWJlbFg6IG51bWJlciA9IHggLSBsYWJlbFNpemUud2lkdGggLyAyIC0gTEFCRUxfUEFERElORyAtIHRpY2toZWlnaHQ7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsWTogbnVtYmVyID0geTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubmVhcikge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFggPSB4ICsgbGFiZWxTaXplLndpZHRoIC8gMiArIExBQkVMX1BBRERJTkcgKyB0aWNraGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgc2hhcGU6IEF4aXNTaGFwZSA9IG5ldyBBeGlzU2hhcGUodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9sYWJsZVJlY3QgPSBuZXcgUm90YXRlUmVjdChsYWJlbFgsIGxhYmVsWSwgbGFiZWxTaXplLndpZHRoLCBsYWJlbFNpemUuaGVpZ2h0LCAwKTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbWFqb3JUaWNrID0gbmV3IFJvdGF0ZUxpbmUoeCwgeSwgdGhpcy5fbWFqb3JUaWNrSGVpZ2h0LCAwLCB0aGlzLm5lYXIgPyBNYXRoLlBJIC8gMiA6IC1NYXRoLlBJIC8gMik7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2xhYmVsID0gbGFiZWw7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2xhYmxlRm9udCA9IHRoaXMubGFiZWxGb250O1xuICAgICAgICAgICAgICAgIHNoYXBlLl9tYWpvciA9IHRoaXMubWFqb3JTdHlsZTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbWlub3IgPSB0aGlzLm1pbm9yU3R5bGU7XG4gICAgICAgICAgICAgICAgc2hhcGUuaWQgPSBVdGlsLkhhc2hDb2RlKGxhYmVsK1wiLFwiK3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgIGxldCBtaW5vcnkgPSBOYU47XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihueSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlub3J5ID0gKHkgKyBueSkgLyAyO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoYXBlLl9taW5vclRpY2sgPSBuZXcgUm90YXRlTGluZSh4LCBtaW5vcnksIHRoaXMuX21pbm9yVGlja0hlaWdodCwgMCwgdGhpcy5uZWFyID8gTWF0aC5QSSAvIDIgOiAtTWF0aC5QSSAvIDIpO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2NoaWxkcmVuLnB1c2goc2hhcGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F4aXNUeXBlID09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gbmV3IFNpemUod2lkdGgudmFsdWUsIHRoaXMuX21lYXN1cmVYKGNhbnZhcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9heGlzVHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IG5ldyBTaXplKHRoaXMuX21lYXN1cmVZKGNhbnZhcyksIGhlaWdodC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlZERpbWVuc2lvbihuZXcgTWVhc3VyZVNwZWMoc2l6ZS53aWR0aCwgTGF5b3V0UGFyYW1zLkVYQUNUTFkpLCBuZXcgTWVhc3VyZVNwZWMoc2l6ZS5oZWlnaHQsIExheW91dFBhcmFtcy5FWEFDVExZKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgX21lYXN1cmVYKGNhbnZhczogQ2FudmFzKTogbnVtYmVyIHtcbiAgICAgICAgICAgIGxldCB0aXRsZVNpemU6IFNpemUgPSBjYW52YXMubWVhc3VyZVN0cmluZyh0aGlzLnRpdGxlLCB0aGlzLnRpdGxlRm9udCk7XG4gICAgICAgICAgICBsZXQgdGlja0hlZ2h0OiBudW1iZXIgPSBNYXRoLm1heCh0aGlzLl9tYWpvclRpY2tIZWlnaHQsIHRoaXMuX21pbm9yVGlja0hlaWdodCk7XG4gICAgICAgICAgICBsZXQgbGFiZWxTaXplOiBTaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgICAgICBsZXQgdGlja3M6IGFueVtdID0gdGhpcy5fdGlja3M7XG4gICAgICAgICAgICBmb3IgKGxldCB0IG9mIHRpY2tzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN6OiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcodGhpcy5fZm9ybWF0KHQpLCB0aGlzLmxhYmVsRm9udCk7XG4gICAgICAgICAgICAgICAgbGFiZWxTaXplLndpZHRoID0gTWF0aC5tYXgoc3oud2lkdGgsIGxhYmVsU2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgbGFiZWxTaXplLmhlaWdodCA9IE1hdGgubWF4KHN6LmhlaWdodCwgbGFiZWxTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXhMYWJlbFNpemUgPSBsYWJlbFNpemUuY2xvbmUoKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbFNpemUuaGVpZ2h0ICsgdGl0bGVTaXplLmhlaWdodCArIHRpY2tIZWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RlY3RlZCBfbWVhc3VyZVkoY2FudmFzOiBDYW52YXMpOiBudW1iZXIge1xuXG4gICAgICAgICAgICBsZXQgdGl0bGVTaXplOiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcodGhpcy50aXRsZSwgdGhpcy50aXRsZUZvbnQpO1xuICAgICAgICAgICAgbGV0IHRpY2tIZWdodDogbnVtYmVyID0gTWF0aC5tYXgodGhpcy5fbWFqb3JUaWNrSGVpZ2h0LCB0aGlzLl9taW5vclRpY2tIZWlnaHQpO1xuICAgICAgICAgICAgbGV0IGxhYmVsU2l6ZTogU2l6ZSA9IG5ldyBTaXplKDAsIDApO1xuICAgICAgICAgICAgbGV0IHRpY2tzOiBhbnlbXSA9IHRoaXMuX3RpY2tzO1xuICAgICAgICAgICAgZm9yIChsZXQgdCBvZiB0aWNrcykge1xuICAgICAgICAgICAgICAgIGxldCBzejogU2l6ZSA9IGNhbnZhcy5tZWFzdXJlU3RyaW5nKHRoaXMuX2Zvcm1hdCh0KSwgdGhpcy5sYWJlbEZvbnQpO1xuICAgICAgICAgICAgICAgIGxhYmVsU2l6ZS53aWR0aCA9IE1hdGgubWF4KHN6LndpZHRoLCBsYWJlbFNpemUud2lkdGgpO1xuICAgICAgICAgICAgICAgIGxhYmVsU2l6ZS5oZWlnaHQgPSBNYXRoLm1heChzei5oZWlnaHQsIGxhYmVsU2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWF4TGFiZWxTaXplID0gbGFiZWxTaXplLmNsb25lKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBsYWJlbFNpemUud2lkdGggKyB0aXRsZVNpemUuaGVpZ2h0ICsgdGlja0hlZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25MYXlvdXQobCwgdCwgciwgYiwgY2FudmFzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXhpc1R5cGUgPT09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0WEF4aXMoY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2F4aXNUeXBlID09IEF4aXNUeXBlLlkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0WUF4aXMoY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vdmVyTGFwTGFiZWxzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvbkRyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgdGhpcy5fZHJhd0xpbmUoY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIF9kcmF3TGluZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHJlY3Q6IFJlY3QgPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F4aXNUeXBlID09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmVhcikge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuZHJhd0xpbmUobmV3IFBvaW50KHJlY3QubGVmdCwgcmVjdC50b3ApLCBuZXcgUG9pbnQocmVjdC5yaWdodCwgcmVjdC50b3ApLCB0aGlzLmxpbmVTdHlsZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lKG5ldyBQb2ludChyZWN0LmxlZnQsIHJlY3QuYm90dG9tKSwgbmV3IFBvaW50KHJlY3QucmlnaHQsIHJlY3QuYm90dG9tKSwgdGhpcy5saW5lU3R5bGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYXhpc1R5cGUgPT0gQXhpc1R5cGUuWSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9uZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy5kcmF3TGluZShuZXcgUG9pbnQocmVjdC5yaWdodCwgcmVjdC50b3ApLCBuZXcgUG9pbnQocmVjdC5yaWdodCwgcmVjdC5ib3R0b20pLCB0aGlzLmxpbmVTdHlsZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lKG5ldyBQb2ludChyZWN0LmxlZnQsIHJlY3QudG9wKSwgbmV3IFBvaW50KHJlY3QubGVmdCwgcmVjdC5ib3R0b20pLCB0aGlzLmxpbmVTdHlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgZXhwb3J0IGNsYXNzIFJhZGlhbExpbmVBeGlzIGV4dGVuZHMgQmFzZUF4aXMge1xuICAgICAgICBwcml2YXRlIF9faW5uZXJSYWRpdXM6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX19zdGFydEFuZ2xlOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9fc3dlZXA6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX19yYWRpdXM6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX19jeDogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBfX2N5OiBudW1iZXIgPSAwO1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuX19pbm5lclJhZGl1cyA9IDA7XG4gICAgICAgICAgICB0aGlzLl9saW5lU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IG5lYXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgICAgIHRoaXMuX25lYXIgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gQXhpc1R5cGUuWCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXZpdHkgPSBHcmF2aXR5LkJvdHRvbTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IEdyYXZpdHkuTGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gQXhpc1R5cGUuWCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXZpdHkgPSBHcmF2aXR5LlRvcDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IEdyYXZpdHkuUmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IG5lYXIoKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBfY3goKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY3g7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IF9jeSgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jeTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgX2N4KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19jeCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNldCBfY3kodmFsdWU6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fX2N5ID0gdmFsdWU7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGdldCBfcmFkaXVzKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3JhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBfcmFkaXVzKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19yYWRpdXMgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgX2lubmVyUmFkaXVzKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX19pbm5lclJhZGl1cyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGdldCBfaW5uZXJSYWRpdXMoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9faW5uZXJSYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgX3N0YXJ0QW5nbGUodmFsdWU6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fX3N0YXJ0QW5nbGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgX3N0YXJ0QW5nbGUoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc3RhcnRBbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBfc3dlZXAodmFsdWU6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fX3N3ZWVwID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IF9zd2VlcCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zd2VlcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2lkOnN0cmluZztcbiAgICAgICAgZ2V0IGlkKCk6c3RyaW5ne1xuICAgICAgICAgICAgaWYodGhpcy5faWQ9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9pZCA9IFV0aWwuSGFzaENvZGUoVXRpbC5IYXNoQ29kZSh0aGlzLl9heGlzVHlwZSkrIFV0aWwuSGFzaENvZGUodGhpcy5uZWFyKSArIFV0aWwuSGFzaENvZGUodGhpcy50aXRsZSkpO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2lkID0gKHRoaXMuX2F4aXNUeXBlKStcIixcIisgKHRoaXMubmVhcikgK1wiLFwiKyAodGhpcy50aXRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHByb3RlY3RlZCBfY3JlYXRlVGlja3MoKTogYW55W10ge1xuICAgICAgICAgICAgbGV0IHRpY2tzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSkge1xuICAgICAgICAgICAgICAgIHRpY2tzID0gTGluZWFyVGlja3MuY3JlYXRlKHRoaXMuc2NhbGUpLmNyZWF0ZVRpY2tzKDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2FsZSBpbnN0YW5jZW9mIExvZ1NjYWxlKSB7XG4gICAgICAgICAgICAgICAgdGlja3MgPSBMb2dUaWNrcy5jcmVhdGUodGhpcy5zY2FsZSkuY3JlYXRlVGlja3MoMTApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKSB7XG4gICAgICAgICAgICAgICAgdGlja3MgPSBPcmRpbmFsVGlja3MuY3JlYXRlKHRoaXMuc2NhbGUpLmNyZWF0ZVRpY2tzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIGlmKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBUaW1lc2NhbGUpXG5cbiAgICAgICAgICAgIHJldHVybiB0aWNrcztcbiAgICAgICAgfVxuICAgICAgICBfbGF5b3V0WEF4aXMoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMuX3RpY2tzO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IHRpY2tzICYmIGkgPCB0aWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZTogbnVtYmVyID0gdGlja3NbaV07XG4gICAgICAgICAgICAgICAgbGV0IG5leHRWYWx1ZTogbnVtYmVyID0gaSA+PSB0aWNrcy5sZW5ndGggPyBudWxsIDogdGlja3NbaSArIDFdO1xuICAgICAgICAgICAgICAgIGxldCB0aWNraGVpZ2h0OiBudW1iZXIgPSBNYXRoLm1heCh0aGlzLl9tYWpvclRpY2tIZWlnaHQsIHRoaXMuX21pbm9yVGlja0hlaWdodCk7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5fZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxTaXplOiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcobGFiZWwsIHRoaXMubGFiZWxGb250KTtcbiAgICAgICAgICAgICAgICBsZXQgcmFkaXVzOiBudW1iZXIgPSB0aGlzLnNjYWxlLmdldFNjYWxlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCB4OiBudW1iZXIgPSB0aGlzLl9jeCArIE1hdGguY29zKHRoaXMuX3N0YXJ0QW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIGxldCB5OiBudW1iZXIgPSB0aGlzLl9jeSArIE1hdGguc2luKHRoaXMuX3N0YXJ0QW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIGxldCBueDogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGxldCBueTogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dFJhZGl1cyA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBueCA9IHRoaXMuX2N4ICsgTWF0aC5jb3ModGhpcy5fc3RhcnRBbmdsZSkgKiBuZXh0UmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBueSA9IHRoaXMuX2N5ICsgTWF0aC5zaW4odGhpcy5fc3RhcnRBbmdsZSkgKiBuZXh0UmFkaXVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsYWJlbHggPSB4ICsgKE1hdGguc2luKHRoaXMuX3N0YXJ0QW5nbGUpICogKHRpY2toZWlnaHQgKyBMQUJFTF9QQURESU5HICsgbGFiZWxTaXplLmhlaWdodCAvIDIpKTtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWx5ID0geSAtIChNYXRoLmNvcyh0aGlzLl9zdGFydEFuZ2xlKSAqICh0aWNraGVpZ2h0ICsgTEFCRUxfUEFERElORyArIGxhYmVsU2l6ZS5oZWlnaHQgLyAyKSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxYOiBudW1iZXIgPSB4O1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbFk6IG51bWJlciA9IHkgKyB0aWNraGVpZ2h0ICsgTEFCRUxfUEFERElORyArIGxhYmVsU2l6ZS5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIGxldCBzaGFwZTogQXhpc1NoYXBlID0gbmV3IEF4aXNTaGFwZSh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgc2hhcGUuX2xhYmxlUmVjdCA9IG5ldyBSb3RhdGVSZWN0KGxhYmVsWCwgbGFiZWxZLCBsYWJlbFNpemUud2lkdGgsIGxhYmVsU2l6ZS5oZWlnaHQsIDApO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9tYWpvclRpY2sgPSBuZXcgUm90YXRlTGluZSh4LCB5LCB0aGlzLl9tYWpvclRpY2tIZWlnaHQsIDAsIHRoaXMuX3N0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9sYWJlbCA9IGxhYmVsO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9sYWJsZUZvbnQgPSB0aGlzLl9sYWJlbEZvbnQ7XG4gICAgICAgICAgICAgICAgc2hhcGUuX21ham9yID0gdGhpcy5tYWpvclN0eWxlO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9taW5vciA9IHRoaXMubWlub3JTdHlsZTtcbiAgICAgICAgICAgICAgICBzaGFwZS5pZCA9IFV0aWwuSGFzaENvZGUobGFiZWwrXCIsXCIrdGhpcy5pZCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWlub3J4ID0gTmFOO1xuICAgICAgICAgICAgICAgIGxldCBtaW5vcnkgPSBOYU47XG5cbiAgICAgICAgICAgICAgICBsZXQgbWlub3JSYWRpdXM6IG51bWJlciA9IE5hTjtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG54KSkge1xuXG4gICAgICAgICAgICAgICAgICAgIG1pbm9yUmFkaXVzID0gdGhpcy5zY2FsZS5nZXRTY2FsZVZhbHVlKCh2YWx1ZSArIG5leHRWYWx1ZSkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgbWlub3J4ID0gdGhpcy5fY3ggKyBNYXRoLmNvcyh0aGlzLl9zdGFydEFuZ2xlKSAqIG1pbm9yUmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBtaW5vcnkgPSB0aGlzLl9jeSArIE1hdGguc2luKHRoaXMuX3N0YXJ0QW5nbGUpICogbWlub3JSYWRpdXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoYXBlLl9taW5vclRpY2sgPSBuZXcgUm90YXRlTGluZShtaW5vcngsIG1pbm9yeSwgdGhpcy5fbWlub3JUaWNrSGVpZ2h0LCAwLCB0aGlzLl9zdGFydEFuZ2xlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dChzaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfbGF5b3V0WUF4aXMoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMuX3RpY2tzO1xuICAgICAgICAgICAgLy8gdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsVmlld3MoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyB0aWNrcyAmJiBpIDwgdGlja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU6IG51bWJlciA9IHRpY2tzW2ldO1xuXG4gICAgICAgICAgICAgICAgbGV0IG5leHRWYWx1ZTogbnVtYmVyID0gaSA+PSB0aWNrcy5sZW5ndGggPyBudWxsIDogdGlja3NbaSArIDFdO1xuICAgICAgICAgICAgICAgIGxldCB0aWNraGVpZ2h0OiBudW1iZXIgPSBNYXRoLm1heCh0aGlzLl9tYWpvclRpY2tIZWlnaHQsIHRoaXMuX21pbm9yVGlja0hlaWdodCk7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5fZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxTaXplOiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcobGFiZWwsIHRoaXMubGFiZWxGb250KTtcbiAgICAgICAgICAgICAgICBsZXQgYW5nbGU6IG51bWJlciA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgeDogbnVtYmVyID0gdGhpcy5fY3ggKyBNYXRoLmNvcyhhbmdsZSkgKiB0aGlzLl9yYWRpdXM7XG4gICAgICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IHRoaXMuX2N5ICsgTWF0aC5zaW4oYW5nbGUpICogdGhpcy5fcmFkaXVzO1xuXG4gICAgICAgICAgICAgICAgbGV0IG54OiBudW1iZXIgPSBOYU47XG4gICAgICAgICAgICAgICAgbGV0IG55OiBudW1iZXIgPSBOYU47XG4gICAgICAgICAgICAgICAgaWYgKG5leHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuQW5nbGUgPSB0aGlzLnNjYWxlLmdldFNjYWxlVmFsdWUobmV4dFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbnggPSB0aGlzLl9jeCArIE1hdGguY29zKG5BbmdsZSkgKiB0aGlzLl9yYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIG55ID0gdGhpcy5fY3kgKyBNYXRoLnNpbihuQW5nbGUpICogdGhpcy5fcmFkaXVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsYWJsZVggPSB0aGlzLl9jeCArIE1hdGguY29zKGFuZ2xlKSAqICh0aGlzLl9yYWRpdXMgKyB0aWNraGVpZ2h0ICsgTEFCRUxfUEFERElORyArIGxhYmVsU2l6ZS5oZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICBsZXQgbGFibGVZID0gdGhpcy5fY3kgKyBNYXRoLnNpbihhbmdsZSkgKiAodGhpcy5fcmFkaXVzICsgdGlja2hlaWdodCArIExBQkVMX1BBRERJTkcgKyBsYWJlbFNpemUuaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgICAgICAgICBsZXQgc2hhcGU6IEF4aXNTaGFwZSA9IG5ldyBBeGlzU2hhcGUodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9sYWJsZVJlY3QgPSBuZXcgUm90YXRlUmVjdChsYWJsZVgsIGxhYmxlWSwgbGFiZWxTaXplLndpZHRoLCBsYWJlbFNpemUuaGVpZ2h0LCAwKTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbWFqb3JUaWNrID0gbmV3IFJvdGF0ZUxpbmUoeCwgeSwgdGhpcy5fbWFqb3JUaWNrSGVpZ2h0LCAwLCBhbmdsZSAtIE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICAgICAgICBzaGFwZS5fbGFibGVGb250ID0gdGhpcy5sYWJlbEZvbnQ7XG4gICAgICAgICAgICAgICAgc2hhcGUuX21ham9yID0gdGhpcy5tYWpvclN0eWxlO1xuICAgICAgICAgICAgICAgIHNoYXBlLl9taW5vciA9IHRoaXMubWlub3JTdHlsZTtcbiAgICAgICAgICAgICAgICBzaGFwZS5pZCA9IFV0aWwuSGFzaENvZGUobGFiZWwrXCIsXCIrdGhpcy5pZCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWlub3J5OiBudW1iZXIgPSBOYU47XG4gICAgICAgICAgICAgICAgbGV0IG1pbm9yeDogbnVtYmVyID0gTmFOO1xuICAgICAgICAgICAgICAgIGxldCBtaW5vckFuZ2xlOiBudW1iZXIgPSBOYU47XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG55KSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5vckFuZ2xlID0gdGhpcy5zY2FsZS5nZXRTY2FsZVZhbHVlKChuZXh0VmFsdWUgKyB2YWx1ZSkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgbWlub3J4ID0gdGhpcy5fY3ggKyBNYXRoLmNvcyhtaW5vckFuZ2xlKSAqIHRoaXMuX3JhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgbWlub3J5ID0gdGhpcy5fY3kgKyBNYXRoLnNpbihtaW5vckFuZ2xlKSAqIHRoaXMuX3JhZGl1cztcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaGFwZS5fbWlub3JUaWNrID0gbmV3IFJvdGF0ZUxpbmUobWlub3J4LCBtaW5vcnksIHRoaXMuX21pbm9yVGlja0hlaWdodCwgMCwgbWlub3JBbmdsZSAtIE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLl9jaGlsZHJlbi5wdXNoKHNoYXBlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIGxldCBzaXplOiBTaXplID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9heGlzVHlwZSA9PSBBeGlzVHlwZS5YKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IG5ldyBTaXplKHdpZHRoLnZhbHVlLCB0aGlzLl9tZWFzdXJlWChjYW52YXMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVkRGltZW5zaW9uKG5ldyBNZWFzdXJlU3BlYyhzaXplLndpZHRoLCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSksIG5ldyBNZWFzdXJlU3BlYyhzaXplLmhlaWdodCwgTGF5b3V0UGFyYW1zLkVYQUNUTFkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYXhpc1R5cGUgPT0gQXhpc1R5cGUuWSkge1xuICAgICAgICAgICAgICAgIHNpemUgPSBuZXcgU2l6ZSh0aGlzLl9tZWFzdXJlWShjYW52YXMpLCBoZWlnaHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIub25NZWFzdXJlKHdpZHRoLCBoZWlnaHQsIGNhbnZhcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9tZWFzdXJlWChjYW52YXM6IENhbnZhcyk6IG51bWJlciB7XG4gICAgICAgICAgICBsZXQgdGl0bGVTaXplOiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcodGhpcy50aXRsZSwgdGhpcy50aXRsZUZvbnQpO1xuICAgICAgICAgICAgbGV0IHRpY2tIZWdodDogbnVtYmVyID0gTWF0aC5tYXgodGhpcy5fbWFqb3JUaWNrSGVpZ2h0LCB0aGlzLl9taW5vclRpY2tIZWlnaHQpO1xuICAgICAgICAgICAgbGV0IGxhYmVsU2l6ZTogU2l6ZSA9IG5ldyBTaXplKDAsIDApO1xuICAgICAgICAgICAgbGV0IHRpY2tzOiBhbnlbXSA9IHRoaXMuX3RpY2tzO1xuICAgICAgICAgICAgZm9yIChsZXQgdCBvZiB0aWNrcykge1xuICAgICAgICAgICAgICAgIGxldCBzejogU2l6ZSA9IGNhbnZhcy5tZWFzdXJlU3RyaW5nKHRoaXMuX2Zvcm1hdCh0KSwgdGhpcy5sYWJlbEZvbnQpO1xuICAgICAgICAgICAgICAgIGxhYmVsU2l6ZS53aWR0aCA9IE1hdGgubWF4KHN6LndpZHRoLCBsYWJlbFNpemUud2lkdGgpO1xuICAgICAgICAgICAgICAgIGxhYmVsU2l6ZS5oZWlnaHQgPSBNYXRoLm1heChzei5oZWlnaHQsIGxhYmVsU2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxhYmVsU2l6ZS5oZWlnaHQgKyB0aXRsZVNpemUuaGVpZ2h0ICsgdGlja0hlZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvdGVjdGVkIF9tZWFzdXJlWShjYW52YXM6IENhbnZhcyk6IG51bWJlciB7XG5cbiAgICAgICAgICAgIGxldCB0aXRsZVNpemU6IFNpemUgPSBjYW52YXMubWVhc3VyZVN0cmluZyh0aGlzLnRpdGxlLCB0aGlzLnRpdGxlRm9udCk7XG4gICAgICAgICAgICBsZXQgdGlja0hlZ2h0OiBudW1iZXIgPSBNYXRoLm1heCh0aGlzLl9tYWpvclRpY2tIZWlnaHQsIHRoaXMuX21pbm9yVGlja0hlaWdodCk7XG4gICAgICAgICAgICBsZXQgbGFiZWxTaXplOiBTaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgICAgICBsZXQgdGlja3M6IGFueVtdID0gdGhpcy5fdGlja3M7XG4gICAgICAgICAgICBmb3IgKGxldCB0IG9mIHRpY2tzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN6OiBTaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcodGhpcy5fZm9ybWF0KHQpLCB0aGlzLmxhYmVsRm9udCk7XG4gICAgICAgICAgICAgICAgbGFiZWxTaXplLndpZHRoID0gTWF0aC5tYXgoc3oud2lkdGgsIGxhYmVsU2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgbGFiZWxTaXplLmhlaWdodCA9IE1hdGgubWF4KHN6LmhlaWdodCwgbGFiZWxTaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGFiZWxTaXplLndpZHRoICsgdGl0bGVTaXplLmhlaWdodCArIHRpY2tIZWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsIHQsIHIsIGIsIGNhbnZhcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5zY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2F4aXNUeXBlID09PSBBeGlzVHlwZS5YKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFhBeGlzKGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9heGlzVHlwZSA9PSBBeGlzVHlwZS5ZKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFlBeGlzKGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb3ZlckxhcExhYmVscygpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25EcmF3KGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdMaW5lKGNhbnZhcyk7XG4gICAgICAgICAgICAvLyBpZiAodGhpcy5fY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gICAgIGZvciAobGV0IHNoYXBlIG9mIHRoaXMuX2NoaWxkcmVuKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIHNoYXBlLm9uRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIF9kcmF3TGluZShjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHJlY3Q6IFJlY3QgPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2F4aXNUeXBlID09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5keDogbnVtYmVyID0gdGhpcy5fY3ggKyBNYXRoLmNvcyh0aGlzLl9fc3RhcnRBbmdsZSkgKiB0aGlzLl9yYWRpdXM7XG4gICAgICAgICAgICAgICAgbGV0IGVuZHk6IG51bWJlciA9IHRoaXMuX2N5ICsgTWF0aC5zaW4odGhpcy5fX3N0YXJ0QW5nbGUpICogdGhpcy5fcmFkaXVzO1xuICAgICAgICAgICAgICAgIGxldCBzeDogbnVtYmVyID0gdGhpcy5fY3ggKyBNYXRoLmNvcyh0aGlzLl9fc3RhcnRBbmdsZSkgKlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9faW5uZXJSYWRpdXMgKiB0aGlzLl9yYWRpdXM7XG4gICAgICAgICAgICAgICAgbGV0IHN5OiBudW1iZXIgPSB0aGlzLl9jeSArIE1hdGguc2luKHRoaXMuX19zdGFydEFuZ2xlKSAqIHRoaXMuX2lubmVyUmFkaXVzICogdGhpcy5fcmFkaXVzO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5kcmF3TGluZShuZXcgUG9pbnQoc3gsIHN5KSwgbmV3IFBvaW50KGVuZHgsIGVuZHkpLCB0aGlzLmxpbmVTdHlsZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2F4aXNUeXBlID09IEF4aXNUeXBlLlkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcyA9IERlZmF1bHQuc3R5bGU7XG4gICAgICAgICAgICAgICAgcy5zdHJva2VTdHlsZSA9dGhpcy5saW5lU3R5bGU7XG4gICAgICAgICAgICAgICAgLy8gY2FudmFzLmRyYXdEb251dCh0aGlzLl9jeCwgdGhpcy5fY3ksIHRoaXMuX3JhZGl1cywgdGhpcy5fcmFkaXVzIC0gdGhpcy5saW5lU3R5bGUuc3Ryb2tlV2lkdGgsIHRoaXMuX3N0YXJ0QW5nbGUgLCB0aGlzLl9zd2VlcCAsIHMpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5kcmF3QXJjKG5ldyBSZWN0KHRoaXMuX2N4LXRoaXMuX3JhZGl1cyx0aGlzLl9jeS10aGlzLl9yYWRpdXMsdGhpcy5fcmFkaXVzK3RoaXMuX2N4LHRoaXMuX3JhZGl1cyt0aGlzLl9jeSksdGhpcy5fc3RhcnRBbmdsZSx0aGlzLl9zd2VlcCxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3R7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IEFuaW1hdGlvbiA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uO1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlUGxvdCBleHRlbmRzIFZpZXdHcm91cHtcbiAgICAgICAgcHJvdGVjdGVkIF9hbmltYXRpb246QW5pbWF0aW9uO1xuICAgICAgICBcbiAgICAgICAgZ2V0IGxheW91dCgpOkJhc2VMYXlvdXR7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgYmVnaW5Mb2FkaW5nQW5pbWF0aW9uKCk6dm9pZDtcbiAgICAgICAgLy8gZ2V0IGNvbXBhcmVkQW5pYW10aW9uQ2FjaGUoKTpDb21wYXJlZEFuaW1hdGlvbkNhY2hle1xuICAgICAgICAvLyAgICAgaWYodGhpcy5nZXRDb250ZXh0KCkpe1xuICAgICAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLmdldENvbnRleHQoKS5nZXRBcmdzKCdjb21wYXJlZGFuaW1hdGlvbicpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IEFuaW1hdGlvbiA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uO1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgQm91bmNlQW5pbWF0aW9uRWFzZSA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQm91bmNlQW5pbWF0aW9uRWFzZTtcblxuICAgIGV4cG9ydCBjbGFzcyBDYXJ0ZXNpYW5QbG90IGV4dGVuZHMgQmFzZVBsb3Qge1xuXG4gICAgICAgIHByaXZhdGUgX19zaGFwZUxpc3Q6IFNoYXBlW10gPSBbXTtcbiAgICAgICAgcHJpdmF0ZSBfbGF5b3V0czogQ2FydGVzaWFuQmFzZUxheW91dFtdO1xuICAgICAgICBwcm90ZWN0ZWQgX19zY2FsZVBhaXJzOiB7XG4gICAgICAgICAgICBzZXJpZXM6IHN0cmluZ1tdLFxuICAgICAgICAgICAgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGVcbiAgICAgICAgfVtdO1xuICAgICAgICBwcml2YXRlIF9kYXRhbW9kZWw6IERhdGFNb2RlbDtcbiAgICAgICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCwgZGF0YW1vZGVsOiBEYXRhTW9kZWwpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuXG4gICAgICAgICAgICB0aGlzLl9kYXRhbW9kZWwgPSBkYXRhbW9kZWw7XG5cbiAgICAgICAgICAgIHRoaXMuX2xheW91dHMgPSBbXVxuICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5kdXJhdGlvbiA9IDUwMDtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5lYXNlID0gbmV3IEJvdW5jZUFuaW1hdGlvbkVhc2UoKTtcblxuICAgICAgICB9XG5cblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsIHQsIHIsIGIsIGNhbnZhcyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzbGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsVmlld3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGlzcmFkaWFsOiBib29sZWFuID0gdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLl9yYWRpYWw7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdHlwZSBvZiB0aGlzLl9kYXRhbW9kZWwuY2hhcnRUeXBlcykge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ2hhcnRUeXBlLkJhcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNyYWRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJhcmxheW91dDogUmFkaWFsQmFyTGF5b3V0ID0gbmV3IFJhZGlhbEJhckxheW91dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeDogbnVtYmVyID0gKGwgKyByKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeTogbnVtYmVyID0gKGIgKyB0KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYWRpdXM6IG51bWJlciA9ICgociAtIGwpIDwgKGIgLSB0KSA/IChyIC0gbCkgOiAoYiAtIHQpKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbm5lclJhZGl1czogbnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGU6IG51bWJlciA9IFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRBbmdsZTogbnVtYmVyID0gTWF0aC5QSSAqIDIgKyBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJsYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwuZ2V0U2VyaWVzQnlUeXBlKENoYXJ0VHlwZS5CYXIpLCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIGN4LCBjeSwgaW5uZXJSYWRpdXMsIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQoYmFybGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dHMucHVzaChiYXJsYXlvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiYXJsYXlvdXQ6IEJhckxheW91dCA9IG5ldyBCYXJMYXlvdXQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJsYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwuZ2V0U2VyaWVzQnlUeXBlKENoYXJ0VHlwZS5CYXIpLCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIG5ldyBSZWN0KGwsIHQsIHIsIGIpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQoYmFybGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dHMucHVzaChiYXJsYXlvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ2hhcnRUeXBlLkxpbmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzcmFkaWFsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVsYXlvdXQ6IFJhZGlhbExpbmVMYXlvdXQgPSBuZXcgUmFkaWFsTGluZUxheW91dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeDogbnVtYmVyID0gKGwgKyByKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeTogbnVtYmVyID0gKGIgKyB0KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYWRpdXM6IG51bWJlciA9ICgociAtIGwpIDwgKGIgLSB0KSA/IChyIC0gbCkgOiAoYiAtIHQpKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbm5lclJhZGl1czogbnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGU6IG51bWJlciA9IFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRBbmdsZTogbnVtYmVyID0gTWF0aC5QSSAqIDIgKyBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lbGF5b3V0LmNvbnZlcnQodGhpcy5fZGF0YW1vZGVsLmdldFNlcmllc0J5VHlwZShDaGFydFR5cGUuTGluZSksIHRoaXMuX2RhdGFtb2RlbC5lbmNvZGluZywgY3gsIGN5LCBpbm5lclJhZGl1cywgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZUxpc3QgPSB0aGlzLl9fc2hhcGVMaXN0LmNvbmNhdChsaW5lbGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dHMucHVzaChsaW5lbGF5b3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5lbGF5b3V0OiBMaW5lTGF5b3V0ID0gbmV3IExpbmVMYXlvdXQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lbGF5b3V0LmNvbnZlcnQodGhpcy5fZGF0YW1vZGVsLmdldFNlcmllc0J5VHlwZShDaGFydFR5cGUuTGluZSksIHRoaXMuX2RhdGFtb2RlbC5lbmNvZGluZywgbmV3IFJlY3QobCwgdCwgciwgYiksIGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZUxpc3QgPSB0aGlzLl9fc2hhcGVMaXN0LmNvbmNhdChsaW5lbGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dHMucHVzaChsaW5lbGF5b3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENoYXJ0VHlwZS5TY2F0dGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3JhZGlhbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2F0dGVybGF5b3V0OiBSYWRpYWxTY2F0dGVyTGF5b3V0ID0gbmV3IFJhZGlhbFNjYXR0ZXJMYXlvdXQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3g6IG51bWJlciA9IChsICsgcikgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3k6IG51bWJlciA9IChiICsgdCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmFkaXVzOiBudW1iZXIgPSAoKHIgLSBsKSA8IChiIC0gdCkgPyAociAtIGwpIDogKGIgLSB0KSkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5uZXJSYWRpdXM6IG51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFydEFuZ2xlOiBudW1iZXIgPSBTdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kQW5nbGU6IG51bWJlciA9IE1hdGguUEkgKiAyICsgc3RhcnRBbmdsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlcmxheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFtb2RlbC5nZXRTZXJpZXNCeVR5cGUoQ2hhcnRUeXBlLlNjYXR0ZXIpLCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIGN4LCBjeSwgaW5uZXJSYWRpdXMsIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQoc2NhdHRlcmxheW91dC5zaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzLnB1c2goc2NhdHRlcmxheW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYXR0ZXJMYXlvdXQ6IFNjYXR0ZXJMYXlvdXQgPSBuZXcgU2NhdHRlckxheW91dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJMYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwuZ2V0U2VyaWVzQnlUeXBlKENoYXJ0VHlwZS5TY2F0dGVyKSwgdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLCBuZXcgUmVjdChsLCB0LCByLCBiKSwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NoYXBlTGlzdCA9IHRoaXMuX19zaGFwZUxpc3QuY29uY2F0KHNjYXR0ZXJMYXlvdXQuc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0cy5wdXNoKHNjYXR0ZXJMYXlvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ2hhcnRUeXBlLkFyZWE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzcmFkaWFsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZWFsYXlvdXQ6IFJhZGlhbEFyZWFMYXlvdXQgPSBuZXcgUmFkaWFsQXJlYUxheW91dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeDogbnVtYmVyID0gKGwgKyByKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjeTogbnVtYmVyID0gKGIgKyB0KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByYWRpdXM6IG51bWJlciA9ICgociAtIGwpIDwgKGIgLSB0KSA/IChyIC0gbCkgOiAoYiAtIHQpKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbm5lclJhZGl1czogbnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGU6IG51bWJlciA9IFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRBbmdsZTogbnVtYmVyID0gTWF0aC5QSSAqIDIgKyBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhbGF5b3V0LmNvbnZlcnQodGhpcy5fZGF0YW1vZGVsLmdldFNlcmllc0J5VHlwZShDaGFydFR5cGUuQXJlYSksIHRoaXMuX2RhdGFtb2RlbC5lbmNvZGluZywgY3gsIGN5LCBpbm5lclJhZGl1cywgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZUxpc3QgPSB0aGlzLl9fc2hhcGVMaXN0LmNvbmNhdChhcmVhbGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dHMucHVzaChhcmVhbGF5b3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJlYWxheW91dDogQXJlYUxheW91dCA9IG5ldyBBcmVhTGF5b3V0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlYWxheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFtb2RlbC5nZXRTZXJpZXNCeVR5cGUoQ2hhcnRUeXBlLkFyZWEpLCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIG5ldyBSZWN0KGwsIHQsIHIsIGIpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQoYXJlYWxheW91dC5zaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzLnB1c2goYXJlYWxheW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxheW91dHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xheW91dHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZXNQYWlycyA9IHRoaXMubGF5b3V0c1tpXS5zY2FsZVBhaXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGFpciBvZiBzY2FsZXNQYWlycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBfLmZpbmQodGhpcy5zY2FsZVBhaXJzLCAocDogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmZpbGVkLmVxdWFscyhwYWlyLmZpbGVkKSAmJiBwLnNjYWxlLmVxdWFsKHBhaXIuc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycy5wdXNoKHsgc2VyaWVzOiBbXS5jb25jYXQocGFpci5zZXJpZXMpLCBmaWxlZDogcGFpci5maWxlZCwgc2NhbGU6IHBhaXIuc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNlcmllcyA9IHJlc3VsdC5zZXJpZXMuY29uY2F0KHBhaXIuc2VyaWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbGF5b3V0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMgPSB0aGlzLl9sYXlvdXRzWzBdLnNjYWxlUGFpcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLl9yYWRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0TGluZShsLCByKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYodGhpcy5jb21wYXJlZEFuaWFtdGlvbkNhY2hlICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIC8vICAgICBpZighdGhpcy5jb21wYXJlZEFuaWFtdGlvbkNhY2hlLmlzZW1wdHkpe1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5jb21wYXJlZEFuaWFtdGlvbkNhY2hlLnByZXBhcmluZygpO1xuICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5jb21wYXJlZEFuaWFtdGlvbkNhY2hlLnN0YXJ0Q29tcGFyZSh0aGlzLl9fc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNoYXBlIG9mIHRoaXMuX19zaGFwZUxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3V2l0aE91dFJlTGF5b3V0KHNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlIGluc3RhbmNlb2YgUGxvdFNoYXBlICYmIHNoYXBlLmxhYmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dChzaGFwZS5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9sYXlvdXRMaW5lKGw6IG51bWJlciwgcjogbnVtYmVyKSB7XG4gICAgICAgICAgICBsZXQgeXM6IG51bWJlcltdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBsYXlvdXQgb2YgdGhpcy5sYXlvdXRzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcGFpciBvZiBsYXlvdXQuc2NhbGVQYWlycykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFpci5maWxlZC5uYW1lID09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IHBhaXIuc2NhbGUuZ2V0U2NhbGVWYWx1ZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5cy5pbmRleE9mKHkpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlzLnB1c2goeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF4aXNsaW5lOiBBeGlzTGluZVNoYXBlID0gbmV3IEF4aXNMaW5lU2hhcGUodGhpcy5nZXRDb250ZXh0KCksbCwgeSwgciwgeSwgRGVmYXVsdC5zdHJva2VzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NoYXBlTGlzdC5wdXNoKGF4aXNsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBiZWdpbkxvYWRpbmdBbmltYXRpb24oKSB7XG4gICAgICAgICAgICBsZXQgc3RlcCA9IDUwMCAvIHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2hhcGUgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzaGFwZSBpbnN0YW5jZW9mIFNjYXR0ZXJTaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5kZXggIFwiICsgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW5pbWF0aW9uOiBTY2F0dGVyQW5pbWF0aW9uID0gbmV3IFNjYXR0ZXJBbmltYXRpb24obnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZHVyYXRpb24gPSA1MDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZnJvbSA9IDAuMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50byA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZmlsbEFmdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5zdGFydEFuaW1hdGlvbihhbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9LCBzdGVwICogaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaGFwZSBpbnN0YW5jZW9mIEJhclNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogQmFyQW5pbWF0aW9uID0gbmV3IEJhckFuaW1hdGlvbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5kdXJhdGlvbiA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZnJvbSA9IDAuMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50byA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZmlsbEFmdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZS5zdGFydEFuaW1hdGlvbihhbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9LCBzdGVwICogaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgQXJlYVNoYXBlIHx8IHNoYXBlIGluc3RhbmNlb2YgTGluZXNTaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb246IEFyZWFBbmltYXRpb24gPSBuZXcgQXJlYUFuaW1hdGlvbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5kdXJhdGlvbiA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udG8gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZpbGxBZnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc3RlcCAqIGkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBSYWRpYWxCYXJTaGFwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogU3dlZXBBbmltYXRpb24gPSBuZXcgU3dlZXBBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5kdXJhdGlvbiA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udG8gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZpbGxBZnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc3RlcCAqIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtZXJhZ2UgdGhlIHNjYWxlcyB3aGljaCBpcyAgeCAvIHkgXG4gICAgICAgICAqL1xuICAgICAgICBwcml2YXRlIF9fbWVyYWdlU2NhbGUoKSB7XG5cbiAgICAgICAgfVxuICAgICAgICBvbkRyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgLy8gZm9yIChsZXQgc2hhcGUgb2YgdGhpcy5fX3NoYXBlTGlzdCkge1xuICAgICAgICAgICAgLy8gICAgIHNoYXBlLmRyYXcoY2FudmFzKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgICBnZXQgbGF5b3V0cygpOiBDYXJ0ZXNpYW5CYXNlTGF5b3V0W10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dHM7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHNjYWxlUGFpcnMoKTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19zY2FsZVBhaXJzO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4ge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBpbXBvcnQgTGF5b3V0UGFyYW1zID0gYW5kcm9pZC52aWV3LkxheW91dFBhcmFtcztcbiAgICBpbXBvcnQgRnJhbWVMYXlvdXQgPSBhbmRyb2lkLndpZGdldC5GcmFtZUxheW91dDtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIGV4cG9ydCBjb25zdCBTdGFydEFuZ2xlOm51bWJlciA9IE1hdGguUEk7XG4gICAgZXhwb3J0IGNsYXNzIENhcnRlc2lhbkNoYXJ0IGV4dGVuZHMgRnJhbWVMYXlvdXQge1xuXG4gICAgICAgIHByaXZhdGUgX2RhdGFNb2RlbDogRGF0YU1vZGVsO1xuICAgICAgICBwcml2YXRlIF9jaGFydFR5cGU6IENoYXJ0VHlwZTtcbiAgICAgICAgcHJpdmF0ZSBfb3B0aW9uOiBhbnk7XG4gICAgICAgIHByaXZhdGUgX2F4aXNMaXN0OiBCYXNlQXhpc1tdO1xuICAgICAgICBwcml2YXRlIF9wbG90OiBCYXNlUGxvdDtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0LCBvcHRpb24/OiBhbnksIGNoYXJ0VHlwZT86IENoYXJ0VHlwZSkge1xuICAgICAgICAgICAgc3VwZXIoY29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb24gPSBvcHRpb247XG4gICAgICAgICAgICB0aGlzLl9jaGFydFR5cGUgPSBjaGFydFR5cGU7XG4gICAgICAgICAgICB0aGlzLl9heGlzTGlzdCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHNldCBvcHRpb24odmFsdWU6IGFueSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9uID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IG9wdGlvbigpOiBhbnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY2hhcnRUeXBlKHZhbHVlOiBDaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IHRoaXMuX2NoYXJ0VHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0VHlwZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldCBjaGFydFR5cGUoKTogQ2hhcnRUeXBlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFydFR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgZGF0YW1vZGVsKHZhbHVlOiBEYXRhTW9kZWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFNb2RlbCA9IHZhbHVlO1xuICAgICAgICAgICAgaWYodGhpcy5fZGF0YU1vZGVsLmVuY29kaW5nLl9yYWRpYWwpe1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRSYWRpYWxWaWV3KCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkVmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldCBkYXRhbW9kZWwoKTogRGF0YU1vZGVsIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhTW9kZWw7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBfbG9hZFZpZXcoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwYWlyIG9mIHRoaXMuZGF0YW1vZGVsLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFpci5maWxlZC5uYW1lID09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXhpc1k6IExpbmVBeGlzID0gbmV3IExpbmVBeGlzKHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1kudHlwZSA9IEF4aXNUeXBlLlk7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLmxheW91dFBhcmFtcy5oZWlnaHQgPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgICAgICAgICBheGlzWS5sYXlvdXRQYXJhbXMud2lkdGggPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLm5lYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBheGlzWS5tYWpvclN0eWxlID0gbmV3IFN0cm9rZVN0eWxlKDEsJ2JsYWNrJyk7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLnNlcmllcyA9IFtdLmNvbmNhdChwYWlyLnNlcmllcyk7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLmxpbmVTdHlsZSA9IG5ldyBTdHJva2VTdHlsZSgxLCdibGFjaycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9heGlzTGlzdC5wdXNoKGF4aXNZKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3KGF4aXNZKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fYXhpc0xpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F4aXNMaXN0W3RoaXMuX2F4aXNMaXN0Lmxlbmd0aCAtIDFdLm5lYXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwbG90OiBCYXNlUGxvdCA9IG5ldyBDYXJ0ZXNpYW5QbG90KHRoaXMuZ2V0Q29udGV4dCgpLCB0aGlzLmRhdGFtb2RlbCk7XG4gICAgICAgICAgICBwbG90LmxheW91dFBhcmFtcy53aWR0aCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG4gICAgICAgICAgICBwbG90LmxheW91dFBhcmFtcy5oZWlnaHQgPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgdGhpcy5fcGxvdCA9IHBsb3Q7XG4gICAgICAgICAgICB0aGlzLmFkZFZpZXcocGxvdCk7XG4gICAgICAgICAgICBsZXQgYXhpc1g6IExpbmVBeGlzID0gbmV3IExpbmVBeGlzKHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgICAgIGF4aXNYLnR5cGUgPSBBeGlzVHlwZS5YO1xuICAgICAgICAgICAgYXhpc1gubGF5b3V0UGFyYW1zLndpZHRoID0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVDtcbiAgICAgICAgICAgIGF4aXNYLmxheW91dFBhcmFtcy5oZWlnaHQgPSAxMDA7XG4gICAgICAgICAgICBheGlzWC5tYWpvclN0eWxlID0gbmV3IFN0cm9rZVN0eWxlKDEsJ2JsYWNrJyk7XG4gICAgICAgICAgICBheGlzWC5uZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIGF4aXNYLmxpbmVTdHlsZSA9IG5ldyBTdHJva2VTdHlsZSgxLCdibGFjaycpO1xuICAgICAgICAgICAgdGhpcy5fYXhpc0xpc3QucHVzaChheGlzWCk7XG4gICAgICAgICAgICB0aGlzLmFkZFZpZXcoYXhpc1gpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBiZWdpbkxvYWRpbmdBbmltYXRpb24oKXtcbiAgICAgICAgICAgIHRoaXMucGxvdC5iZWdpbkxvYWRpbmdBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIF9sb2FkUmFkaWFsVmlldygpIHtcbiAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2YgdGhpcy5kYXRhbW9kZWwuc2NhbGVQYWlycykge1xuICAgICAgICAgICAgICAgIGlmIChwYWlyLmZpbGVkLm5hbWUgPT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBheGlzWTogUmFkaWFsTGluZUF4aXMgPSBuZXcgUmFkaWFsTGluZUF4aXModGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICBheGlzWS50eXBlID0gQXhpc1R5cGUuWTtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1kubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLmxheW91dFBhcmFtcy53aWR0aCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNZLm5lYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBheGlzWS5zZXJpZXMgPSBbXS5jb25jYXQocGFpci5zZXJpZXMpO1xuICAgICAgICAgICAgICAgICAgICBheGlzWS5saW5lU3R5bGUgPSBuZXcgU3Ryb2tlU3R5bGUoMSwnYmxhY2snKTtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1kubWFqb3JTdHlsZSA9IG5ldyBTdHJva2VTdHlsZSgxLCdibGFjaycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9heGlzTGlzdC5wdXNoKGF4aXNZKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3KGF4aXNZKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fYXhpc0xpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F4aXNMaXN0W3RoaXMuX2F4aXNMaXN0Lmxlbmd0aCAtIDFdLm5lYXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBsb3Q6IEJhc2VQbG90ID0gbmV3IENhcnRlc2lhblBsb3QodGhpcy5nZXRDb250ZXh0KCksIHRoaXMuZGF0YW1vZGVsKTtcbiAgICAgICAgICAgIHBsb3QubGF5b3V0UGFyYW1zLndpZHRoID0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVDtcbiAgICAgICAgICAgIHBsb3QubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG4gICAgICAgICAgICB0aGlzLl9wbG90ID0gcGxvdDtcbiAgICAgICAgICAgIHRoaXMuYWRkVmlldyhwbG90KTtcbiAgICAgICAgICAgIGxldCBheGlzWDogUmFkaWFsTGluZUF4aXMgPSBuZXcgUmFkaWFsTGluZUF4aXModGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgYXhpc1gudHlwZSA9IEF4aXNUeXBlLlg7XG4gICAgICAgICAgICBheGlzWC5ncmF2aXR5ID0gR3Jhdml0eS5DZW50ZXI7XG4gICAgICAgICAgICBheGlzWC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgYXhpc1gubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG4gICAgICAgICAgICBheGlzWC5tYWpvclN0eWxlID0gbmV3IFN0cm9rZVN0eWxlKDEsJ2JsYWNrJyk7XG4gICAgICAgICAgICBheGlzWC5uZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIGF4aXNYLmxpbmVTdHlsZSA9IG5ldyBTdHJva2VTdHlsZSgxLCdibGFjaycpO1xuICAgICAgICAgICAgdGhpcy5fYXhpc0xpc3QucHVzaChheGlzWCk7XG4gICAgICAgICAgICB0aGlzLmFkZFZpZXcoYXhpc1gpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsaGVpZ2h0LGNhbnZhcyk7XG4gICAgICAgICAgICBsZXQgbWF4c2l6ZTogU2l6ZSA9IG5ldyBTaXplKDAsIDApO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YW1vZGVsLmVuY29kaW5nLl9yYWRpYWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0OiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGF4aXMgb2YgdGhpcy5fYXhpc0xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBheGlzLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXhpcy50eXBlID09IEF4aXNUeXBlLlkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHcgOm51bWJlciA9IHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgIGxldCBoIDpudW1iZXIgPSBoZWlnaHQuZ2V0TWVhc3VyZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHJhZGl1czpudW1iZXIgPSB3PGg/dy8yOmgvMiA7XG4gICAgICAgICAgICAgICAgcmFkaXVzID0gcmFkaXVzIC0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIGxldCBzdGFydEFuZ2xlOm51bWJlciA9IFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgbGV0IHN3ZWVwOm51bWJlciA9IE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHZpZXcgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZTogU2l6ZSA9IG5ldyBTaXplKDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIEJhc2VBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy50eXBlID09IEF4aXNUeXBlLlkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdmlldy5vbk1lYXN1cmUobmV3IE1lYXN1cmVTcGVjKHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpLCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSksIG5ldyBNZWFzdXJlU3BlYyhoZWlnaHQuZ2V0TWVhc3VyZVZhbHVlKCksIExheW91dFBhcmFtcy5FWEFDVExZKSwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHZpZXcudHlwZSA9PSBBeGlzVHlwZS5YKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Lm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKDxSYWRpYWxMaW5lQXhpcz52aWV3KS5faW5uZXJSYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDxSYWRpYWxMaW5lQXhpcz52aWV3KS5fc3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAoPFJhZGlhbExpbmVBeGlzPnZpZXcpLl9zd2VlcCA9IHN3ZWVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDxSYWRpYWxMaW5lQXhpcz52aWV3KS5fcmFkaXVzID0gcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlldyBpbnN0YW5jZW9mIEJhc2VQbG90KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luTGVmdCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Ub3AgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luUmlnaHQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGxvZmYgPSAwLCB0b2ZmID0gMCwgcm9mZiA9IDAsIGJvZmYgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBheGlzWVBvc2l0aXZlb2Zmc2V0Om51bWJlcltdPVtdO1xuICAgICAgICAgICAgICAgIGxldCBheGlzWU5lZ2F0aXZlb2Zmc2V0Om51bWJlcltdPVtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGF4aXMgb2YgdGhpcy5fYXhpc0xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBheGlzLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXhpcy50eXBlID09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChheGlzLm5lYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2ZmID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZmYgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChheGlzLnR5cGUgPT0gQXhpc1R5cGUuWSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF4aXMubmVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZmYgKz0gc2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzWVBvc2l0aXZlb2Zmc2V0LnB1c2goc2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvZmYgKz0gc2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzWVBvc2l0aXZlb2Zmc2V0LnB1c2goc2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGxlZnRQYWRkaW5nID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgcmlnaHRQYWRkaW5nID0wO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHZpZXcgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZTogU2l6ZSA9IG5ldyBTaXplKDAsIDApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgQmFzZUF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3LnR5cGUgPT0gQXhpc1R5cGUuWCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5MZWZ0ID0gbG9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luUmlnaHQgPSByb2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSB2aWV3Lm9uTWVhc3VyZShuZXcgTWVhc3VyZVNwZWMod2lkdGguZ2V0TWVhc3VyZVZhbHVlKCkgLSBsb2ZmIC0gcm9mZiwgd2lkdGgubW9kZSksIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlldy50eXBlID09IEF4aXNUeXBlLlkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5uZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Ub3AgPSB0b2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tID0gYm9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkxlZnQgPSBsZWZ0UGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdFBhZGRpbmcrPXZpZXcud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSB2aWV3Lm9uTWVhc3VyZSh3aWR0aCwgbmV3IE1lYXN1cmVTcGVjKGhlaWdodC5nZXRNZWFzdXJlVmFsdWUoKSAtIHRvZmYgLSBib2ZmLCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSksIGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpblRvcCA9IHRvZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Cb3R0b20gPSBib2ZmOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5SaWdodCA9IHJpZ2h0UGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHRQYWRkaW5nKz12aWV3LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdmlldy5vbk1lYXN1cmUod2lkdGgsIG5ldyBNZWFzdXJlU3BlYyhoZWlnaHQuZ2V0TWVhc3VyZVZhbHVlKCkgLSB0b2ZmIC0gYm9mZiwgTGF5b3V0UGFyYW1zLkVYQUNUTFkpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aWV3IGluc3RhbmNlb2YgQmFzZVBsb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5MZWZ0ID0gbG9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5SaWdodCA9IHJvZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luVG9wID0gdG9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Cb3R0b20gPSBib2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IHZpZXcub25NZWFzdXJlKHdpZHRoLCBoZWlnaHQsIGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdmlldy5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA+IG1heHNpemUud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHNpemUud2lkdGggPSBzaXplLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplLmhlaWdodCA+IG1heHNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhzaXplLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICB9XG5cblxuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmxheW91dEluZm8ucmVzZXQobCwgdCwgciwgYiwgdGhpcy5wYWRkaW5nLCAwKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgYXhpcyBvZiB0aGlzLl9heGlzTGlzdCkge1xuICAgICAgICAgICAgICAgIGF4aXMuc2NhbGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3VwZXIub25MYXlvdXQobCwgdCwgciwgYiwgY2FudmFzKTsgXG4gICAgICAgICAgICB0aGlzLmxheW91dEl0ZW0odGhpcy5wbG90LCBsLCB0LCByLCBiLCBjYW52YXMpO1xuXG5cbiAgICAgICAgICAgIGZvciAobGV0IGF4aXMgb2YgdGhpcy5fYXhpc0xpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXhpcyBpbnN0YW5jZW9mIEJhc2VBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGF4aXMgaW5zdGFuY2VvZiBSYWRpYWxMaW5lQXhpcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzLl9jeCA9IChsICtyKS8yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXhpcy5fY3kgPSAodCtiKS8yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChheGlzLnR5cGUgPT09IEF4aXNUeXBlLlgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2YgdGhpcy5wbG90LnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFpci5maWxlZC5uYW1lID09ICd4Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzLnNjYWxlID0gcGFpci5zY2FsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2YgdGhpcy5wbG90LnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFpci5maWxlZC5uYW1lID09ICd5JyAmJiBfLnhvcihwYWlyLnNlcmllcywgYXhpcy5zZXJpZXMpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMuc2NhbGUgPSBwYWlyLnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dEl0ZW0oYXhpcywgbCwgciwgdCwgYiwgY2FudmFzKTtcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBwbG90KCk6IENhcnRlc2lhblBsb3Qge1xuICAgICAgICAgICAgZm9yIChsZXQgcGxvdCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsb3QgaW5zdGFuY2VvZiBDYXJ0ZXNpYW5QbG90KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbG90O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaERyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc3BhdGNoRHJhdyhjYW52YXMpO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcblxuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgTGluZWFyTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0O1xuICAgIGltcG9ydCBGcmFtZWxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkZyYW1lTGF5b3V0O1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgTWFyZ2luID0gYW5kcm9pZC5ncmFwaGljcy5NYXJnaW47XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IFJvb3RWaWV3ID0gYW5kcm9pZC53aWRnZXQuUm9vdFZpZXc7XG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VDaGFydExheW91dCBleHRlbmRzIFJvb3RWaWV3IHtcbiAgICAgICAgcHJpdmF0ZSBfX21haW5MYXlvdXQ6IFZpZXc7XG4gICAgICAgIHByaXZhdGUgX19sZWdlbmRzOiBWaWV3W10gPSBbXTtcbiAgICAgICAgcHJpdmF0ZSBfX29sZE1hcmdpbjpNYXJnaW47XG4gICAgICAgIHNldE1haW5MYXlvdXQobWFpbjogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fX21haW5MYXlvdXQgPSBtYWluO1xuICAgICAgICAgICAgdGhpcy5hZGRWaWV3KG1haW4sMCk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkTGVnZW5kKGxlZ2VuZDogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fX2xlZ2VuZHMucHVzaChsZWdlbmQpO1xuICAgICAgICAgICAgdGhpcy5hZGRWaWV3KGxlZ2VuZCwwKTtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVBbGxWaWV3cygpOnZvaWR7XG4gICAgICAgICAgICBzdXBlci5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgdGhpcy5fX21haW5MYXlvdXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fX2xlZ2VuZHMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgc3VwZXIub25NZWFzdXJlKHdpZHRoLGhlaWdodCxjYW52YXMpO1xuICAgICAgICAgICAgaWYodGhpcy5fX29sZE1hcmdpbiA9PSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9fb2xkTWFyZ2luID0gXy5jbG9uZURlZXAodGhpcy5fX21haW5MYXlvdXQubGF5b3V0UGFyYW1zLm1hcmdpbik7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLl9fbWFpbkxheW91dC5sYXlvdXRQYXJhbXMubWFyZ2luID0gXy5jbG9uZURlZXAodGhpcy5fX29sZE1hcmdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBsZWdlbmQgb2YgdGhpcy5fX2xlZ2VuZHMpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGxlZ2VuZC5ncmF2aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3Jhdml0eS5MZWZ0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19tYWluTGF5b3V0LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luTGVmdCs9IChsZWdlbmQud2lkdGggKyBsZWdlbmQubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5MZWZ0ICsgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luUmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3Jhdml0eS5SaWdodDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fbWFpbkxheW91dC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpblJpZ2h0ICs9IChsZWdlbmQud2lkdGggKyBsZWdlbmQubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5SaWdodCtsZWdlbmQubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5MZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuVG9wOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19tYWluTGF5b3V0LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luVG9wICs9IChsZWdlbmQuaGVpZ2h0ICsgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luVG9wICsgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuQm90dG9tOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19tYWluTGF5b3V0LmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tICs9IChsZWdlbmQuaGVpZ2h0ICsgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tICsgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAgc3VwZXIub25NZWFzdXJlKHdpZHRoLGhlaWdodCxjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsdCxyLGIsY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgYmVnaW5Mb2FkaW5nQW5pbWF0aW9uKCk6dm9pZDtcbiAgICB9XG59IiwiXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgQWxpZ25FbGVtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsZW1lbnQ7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgRnJhbWVMYXlvdXQgPSBhbmRyb2lkLndpZGdldC5GcmFtZUxheW91dDtcbiAgICBpbXBvcnQgTGluZWFlckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgUmVuZGVyVHlwZSA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVuZGVyVHlwZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IERldmljZSA9IGFuZHJvaWQuZGV2aWNlLkRldmljZTtcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBSb290VmlldyA9IGFuZHJvaWQud2lkZ2V0LlJvb3RWaWV3O1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgIGltcG9ydCBIYW5kbGVyID0gYW5kcm9pZC51dGlsLkhhbmRsZXI7XG4gICAgaW1wb3J0IE1lc3NhZ2UgPSBhbmRyb2lkLnV0aWwuTWVzc2FnZTtcblxuICAgIGV4cG9ydCBjbGFzcyBDaGFydExheW91dCBleHRlbmRzIEJhc2VDaGFydExheW91dCB7XG5cbiAgICAgICAgcHJpdmF0ZSBfY2hhcnQ6IENhcnRlc2lhbkNoYXJ0O1xuICAgICAgICBwcml2YXRlIF9sZWdlbmRzOiBWaWV3fFNlcmllc0xlZ2VuZFtdO1xuICAgICAgICBwcml2YXRlIF9kYXRhTW9kZWw6IERhdGFNb2RlbDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5jbGlwID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaGFuZGxlciA6SGFuZGxlciA9IG5ldyBIYW5kbGVyKChtc2c6TWVzc2FnZSk9PntcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZy5hcmdzLmluZm8udmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCB0eXBlczpFbGVtZW50VHlwZSA9bXNnLmFyZ3NbJ3R5cGVzJ107XG4gICAgICAgICAgICAgICAgbGV0IGluZm86YW55ID0gbXNnLmFyZ3NbJ2luZm8nXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVzID09IEVsZW1lbnRUeXBlLlNlcmllc0xlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlcmllczogc3RyaW5nW10gPSB0aGlzLl9kYXRhTW9kZWwuZmlsdGVyLnNlcmllcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gc2VyaWVzLmluZGV4T2YoaW5mby5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmFjdGlvbiA9PT0gJ2VuYWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluZm8udmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFNb2RlbC5maWx0ZXIuc2VyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhTW9kZWwuZmlsdGVyLnNlcmllcy5wdXNoKGluZm8ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJwYXJlQ29tcGFyZWRBbmltYXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFNb2RlbC5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDaGFydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRDb21wYXJlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZm8uYWN0aW9uID09PSAnc2hvd2xhYmVsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdExheW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRleHQuc2V0QXJncyhFdmVudE1lc3NhZ2UsaGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBhdHRhY2hFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCByZW5kZXJUeXBlOlJlbmRlclR5cGUsZGF0YW1vZGVsPzogRGF0YU1vZGVsLHVwZGF0ZT86Ym9vbGVhbikge1xuICAgICAgICAgICAgc3VwZXIuYXR0YWNoRWxlbWVudChlbGVtZW50LFV0aWwuYXNFbnVtKHJlbmRlclR5cGUsUmVuZGVyVHlwZSkpO1xuICAgICAgICAgICAgdGhpcy5wYWRkaW5nID0gbmV3IFBhZGRpbmcoMjApO1xuICAgICAgICAgICAgdGhpcy5fZGF0YU1vZGVsID0gZGF0YW1vZGVsO1xuICAgICAgICAgICAgdGhpcy5zZXRDaGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJlZ2luTG9hZGluZ0FuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuZ2V0Q29udGV4dCgpICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIGxldCBjb21wYXJlZEFuaW1hdGlvbkNhY2hlIDpDb21wYXJlZEFuaW1hdGlvbkNhY2hlPXRoaXMuZ2V0Q29udGV4dCgpLmdldEFyZ3MoJ2NvbXBhcmVkYW5pbWF0aW9uJyk7XG4gICAgICAgICAgICAgICAgaWYoY29tcGFyZWRBbmltYXRpb25DYWNoZSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZWRBbmltYXRpb25DYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmJlZ2luTG9hZGluZ0FuaW1hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0Q2hhcnQoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFZpZXdzKCk7XG4gICAgICAgICAgICB0aGlzLl9jaGFydCA9IG5ldyBDYXJ0ZXNpYW5DaGFydCh0aGlzLmdldENvbnRleHQoKSwgbnVsbCwgQ2hhcnRUeXBlLkJhcik7XG4gICAgICAgICAgICB0aGlzLl9jaGFydC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgdGhpcy5fY2hhcnQubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmRhdGFtb2RlbCA9IHRoaXMuX2RhdGFNb2RlbDtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmdyYXZpdHkgPSBHcmF2aXR5LkJvdHRvbTtcbiAgICAgICAgICAgIHRoaXMuc2V0TWFpbkxheW91dCh0aGlzLl9jaGFydCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGF0YU1vZGVsLmFsbFNlcmllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxlZ2VuZCA9IG5ldyBTZXJpZXNMZWdlbmQodGhpcy5nZXRDb250ZXh0KCksJ2JhcicpO1xuICAgICAgICAgICAgICAgIGxlZ2VuZC5zZXJpZXMgPSB0aGlzLl9kYXRhTW9kZWwuYWxsU2VyaWVzO1xuICAgICAgICAgICAgICAgIGxlZ2VuZC5ncmF2aXR5ID0gR3Jhdml0eS5Cb3R0b207XG4gICAgICAgICAgICAgICAgbGVnZW5kLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luTGVmdD0wO1xuICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpblRvcD0yMDtcbiAgICAgICAgICAgICAgICBsZWdlbmQubGF5b3V0UGFyYW1zLndpZHRoID0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgICAgICBsZWdlbmQubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5XUkFQX0NPTlRFTlQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRMZWdlbmQobGVnZW5kKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fZGF0YU1vZGVsLnNlcmllcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2hvcml6b250YWxsZWdlbmQuc2VyaWVzID0gZGF0YW1vZGVsLl9nZXRTY2FsZUJ5TmFtZSgnY29sb3InLGRhdGFtb2RlbC5zZXJpZXNbMF0ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0aGlzLl9kYXRhTW9kZWwgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBzY2FsZWluZm8gb2YgdGhpcy5fZGF0YU1vZGVsLnNjYWxlUGFpcnMpe1xuICAgICAgICAgICAgICAgICAgICBpZihzY2FsZWluZm8uZmlsZWQubmFtZSA9PSdjb2xvcicgfHwgc2NhbGVpbmZvLmZpbGVkLm5hbWUgPT0nc2l6ZScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2NhbGVpbmZvLnNjYWxlIGluc3RhbmNlb2YgTGluZWFyU2NhbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZWdlbmQ6TGluZWFyU2NhbGVMZWdlbmQ9IG5ldyBMaW5lYXJTY2FsZUxlZ2VuZCh0aGlzLmdldENvbnRleHQoKSxzY2FsZWluZm8uZmlsZWQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVnZW5kLnNjYWxlID0gc2NhbGVpbmZvLnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMud2lkdGggPSAzMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmxheW91dFBhcmFtcy5oZWlnaHQgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWdlbmQuZ3Jhdml0eSA9IEdyYXZpdHkuVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkxlZnQ9MTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkJvdHRvbT0yMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZExlZ2VuZChsZWdlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoc2NhbGVpbmZvLnNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVnZW5kOk9yZGluYWxTY2FsZUxlZ2VuZD0gbmV3IE9yZGluYWxTY2FsZUxlZ2VuZCh0aGlzLmdldENvbnRleHQoKSxzY2FsZWluZm8uZmlsZWQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVnZW5kLnNjYWxlID0gc2NhbGVpbmZvLnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMuaGVpZ2h0ID0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWdlbmQuZ3Jhdml0eSA9IEdyYXZpdHkuVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkxlZnQ9MTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkJvdHRvbT0yMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZExlZ2VuZChsZWdlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvbmludmFsaWRhdGUoKXtcbiAgICAgICAgICAgIHN1cGVyLm9uaW52YWxpZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3BhdGNoRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdXBlci5kaXNwYXRjaERyYXcoY2FudmFzKTtcbiAgICAgICAgICAgIHZhciByZWN0ID0gdGhpcy5sYXlvdXRJbmZvLm91dHRlcnJlY3Q7XG4gICAgICAgICAgICBjYW52YXMuZHJhd1JlY3QocmVjdC5zdGFydFBvaW50LCByZWN0LmVuZFBvaW50LCBmYWxzZSwgdGhpcy5iYWNrZ3JvdW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTWVhc3VyZSh3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub25NZWFzdXJlKHdpZHRoLCBoZWlnaHQsIGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkxheW91dChsLCB0LCByLCBiLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwdWJsaWMgYWRkVmlldyh2aWV3OiBWaWV3LCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHN1cGVyLmFkZFZpZXcodmlldywgaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2FsIHtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgQW5pbWF0aW9uID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb247XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBCb3VuY2VBbmltYXRpb25FYXNlID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5Cb3VuY2VBbmltYXRpb25FYXNlO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgZXhwb3J0IGNsYXNzIEhpZXJhcmNoaWNhbFBsb3QgZXh0ZW5kcyBCYXNlUGxvdCB7XG4gICAgICAgIHByaXZhdGUgX2N1cnJlbnRSZWN0OiBSZWN0O1xuICAgICAgICBwcml2YXRlIF9fY29tcGFyZWRBbmltYXRpb25DYWNoZTogQ29tcGFyZWRBbmltYXRpb25DYWNoZTtcbiAgICAgICAgLy8gcHJpdmF0ZSBfX3NoYXBlTGlzdDogU2hhcGVbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9sYXlvdXRzOiBCYXNlTGF5b3V0W107XG4gICAgICAgIHByb3RlY3RlZCBfX3NjYWxlUGFpcnM6IHtcbiAgICAgICAgICAgIHNlcmllczogc3RyaW5nW10sXG4gICAgICAgICAgICBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZVxuICAgICAgICB9W107XG4gICAgICAgIHByaXZhdGUgX2RhdGFtb2RlbDogRGF0YU1vZGVsO1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0LCBkYXRhbW9kZWw6IERhdGFNb2RlbCkge1xuICAgICAgICAgICAgc3VwZXIoY29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLl9fY29tcGFyZWRBbmltYXRpb25DYWNoZSA9IG5ldyBDb21wYXJlZEFuaW1hdGlvbkNhY2hlKCk7XG4gICAgICAgICAgICB0aGlzLl9kYXRhbW9kZWwgPSBkYXRhbW9kZWw7XG4gICAgICAgICAgICB0aGlzLl9sYXlvdXRzID0gW11cbiAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzID0gW107XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50UmVjdCA9IG5ldyBSZWN0KDAsIDAsIDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNjYWxlQ2FsbEJhY2socmVjdDogUmVjdCk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHJlY3Qud2lkdGggKiByZWN0LmhlaWdodCA8IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGggKiB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LmhlaWdodCAvIDQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGF0YW1vZGVsLmNoYXJ0VHlwZSA9PT0gQ2hhcnRUeXBlLlRyZWVNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJlZW1hcExheW91dDogVHJlZU1hcExheW91dCA9IG5ldyBUcmVlTWFwTGF5b3V0KHRoaXMuZ2V0Q29udGV4dCgpLHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3Q6IFJlY3QgPSB0aGlzLl9jdXJyZW50UmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSZWN0ID0gbmV3IFJlY3QocmVjdC5sZWZ0IC0gcmVjdC53aWR0aCAvIDIsIHJlY3QudG9wIC0gcmVjdC5oZWlnaHQgLyAyLCByZWN0LnJpZ2h0ICsgcmVjdC53aWR0aCAvIDIsIHJlY3QuYm90dG9tICsgcmVjdC5oZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVtYXBMYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwucm9vdCwgdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLCB0aGlzLl9jdXJyZW50UmVjdCwgdGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaGFwZUxpc3QgPSBbXTsvLyh0cmVlbWFwTGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRyZWVtYXBMYXlvdXQuc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWwuaXNNaXhlZChpdGVtLmxheW91dEluZm8uaW5uZXJyZWN0LCB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZUxpc3QucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIHNoYXBlbGlzdCBzaXplICBcIiArIHNoYXBlTGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgc2hhcGUgb2Ygc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3V2l0aE91dFJlTGF5b3V0KHNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBQbG90U2hhcGUgJiYgc2hhcGUubGFiZWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoc2hhcGUubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb21wYXJlZEFuaW1hdGlvbkNhY2hlLnN0YXJ0Q29tcGFyZShzaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjdC53aWR0aCAqIHJlY3QuaGVpZ2h0ID4gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCAqIHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3QuaGVpZ2h0IC8gNCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kYXRhbW9kZWwuY2hhcnRUeXBlID09PSBDaGFydFR5cGUuVHJlZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmVlbWFwTGF5b3V0OiBUcmVlTWFwTGF5b3V0ID0gbmV3IFRyZWVNYXBMYXlvdXQodGhpcy5nZXRDb250ZXh0KCksdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMuX2N1cnJlbnRSZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlY3QgPSBuZXcgUmVjdChyZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gNCwgcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDQsIHJlY3QucmlnaHQgLSByZWN0LndpZHRoIC8gNCwgcmVjdC5ib3R0b20gLSByZWN0LmhlaWdodCAvIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZW1hcExheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFtb2RlbC5yb290LCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIHRoaXMuX2N1cnJlbnRSZWN0LCB0aGlzLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHNoYXBlTGlzdCA9KHRyZWVtYXBMYXlvdXQuc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaGFwZUxpc3QgPSBbXTsvLyh0cmVlbWFwTGF5b3V0LnNoYXBlTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRyZWVtYXBMYXlvdXQuc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFV0aWwuaXNNaXhlZChpdGVtLmxheW91dEluZm8uaW5uZXJyZWN0LCB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZUxpc3QucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIHNoYXBlbGlzdCBzaXplICBcIiArIHNoYXBlTGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgc2hhcGUgb2Ygc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3V2l0aE91dFJlTGF5b3V0KHNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBQbG90U2hhcGUgJiYgc2hhcGUubGFiZWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoc2hhcGUubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jb21wYXJlZEFuaW1hdGlvbkNhY2hlLnN0YXJ0Q29tcGFyZShzaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBhZGRWaWV3V2l0aE91dFJlTGF5b3V0KHZpZXc6IFZpZXcsIGluZGV4PzogbnVtYmVyLCBsYXlvdXRQYXJhbXM/OiBMYXlvdXRQYXJhbXMpOiBudW1iZXIge1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBDdWJlU2hhcGUpIHtcbiAgICAgICAgICAgICAgICB2aWV3LnNjYWxlQ2FsbEJhY2sgPSB0aGlzLnNjYWxlQ2FsbEJhY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQodmlldywgaW5kZXgsIGxheW91dFBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHVibGljIG9uSW50ZXJjZXB0TW91c2VFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgLy8gICAgIGlmKGV2ZW50LmFjdGlvbiA9PT0gTW90aW9uRXZlbnQuQUNUSU9OX0NMSUNLKXtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIHJldHVybiBzdXBlci5vbkludGVyY2VwdE1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHB1YmxpYyBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgIC8vICAgICAvLyByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vICAgICBpZih0aGlzLl9kYXRhbW9kZWwuY2hhcnRUeXBlID09IENoYXJ0VHlwZS5UcmVlTWFwKXtcblxuICAgICAgICAvLyAgICAgfWVsc2V7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsIHQsIHIsIGIsIGNhbnZhcyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzbGF5b3V0Q2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsVmlld3MoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2hhcGVMaXN0ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGF0YW1vZGVsLmNoYXJ0VHlwZSA9PSBDaGFydFR5cGUuU3VuYnVyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1bmJ1cnN0TGF5b3V0OiBTdW5idXJzdExheW91dCA9IG5ldyBTdW5idXJzdExheW91dCh0aGlzLmdldENvbnRleHQoKSwwLCBNYXRoLlBJICogMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSZWN0ID0gbmV3IFJlY3QobCwgdCwgciwgYik7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VuYnVyc3RMYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwucm9vdCwgdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLCB0aGlzLl9jdXJyZW50UmVjdCwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVMaXN0ID0gKHN1bmJ1cnN0TGF5b3V0LnNoYXBlTGlzdCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RhdGFtb2RlbC5jaGFydFR5cGUgPT0gQ2hhcnRUeXBlLlRyZWVNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyZWVtYXBMYXlvdXQ6IFRyZWVNYXBMYXlvdXQgPSBuZXcgVHJlZU1hcExheW91dCh0aGlzLmdldENvbnRleHQoKSx0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlY3QgPSBuZXcgUmVjdChsLCB0LCByLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgdHJlZW1hcExheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFtb2RlbC5yb290LCB0aGlzLl9kYXRhbW9kZWwuZW5jb2RpbmcsIHRoaXMuX2N1cnJlbnRSZWN0LCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgcmVjdDogUmVjdCA9IHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Q7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyZWVtYXBMYXlvdXQuY29udmVydCh0aGlzLl9kYXRhbW9kZWwucm9vdCwgdGhpcy5fZGF0YW1vZGVsLmVuY29kaW5nLCBuZXcgUmVjdChyZWN0LmxlZnQgLSByZWN0LndpZHRoIC8gMiwgcmVjdC50b3AgLSByZWN0LmhlaWdodCAvIDIsIHJlY3QucmlnaHQgKyByZWN0LndpZHRoIC8gMiwgcmVjdC5ib3R0b20gKyByZWN0LmhlaWdodCAvIDIpLCB0aGlzLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICBzaGFwZUxpc3QgPSAodHJlZW1hcExheW91dC5zaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImJlZm9yZSBzaGFwZSBsaXN0IHNpemUgXCIgKyBzaGFwZUxpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fX2NvbXBhcmVkQW5pbWF0aW9uQ2FjaGUgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fY29tcGFyZWRBbmltYXRpb25DYWNoZS5zdGFydENvbXBhcmUoc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2hhcGUgb2Ygc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dChzaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZSBpbnN0YW5jZW9mIFBsb3RTaGFwZSAmJiBzaGFwZS5sYWJlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoc2hhcGUubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgYmVnaW5Mb2FkaW5nQW5pbWF0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHN0ZXAgPSA1MDAgLyB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNoYXBlID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGUgaW5zdGFuY2VvZiBDdWJlU2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluZGV4ICBcIiArIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogQ3ViZUFuaW1hdGlvbiA9IG5ldyBDdWJlQW5pbWF0aW9uKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmR1cmF0aW9uID0gNTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZyb20gPSAwLjI7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udG8gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZpbGxBZnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc3RlcCAqIGkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBTdW5idXJzdFNoYXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmRleCAgXCIgKyBpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogU3dlZXBBbmltYXRpb24gPSBuZXcgU3dlZXBBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmR1cmF0aW9uID0gMTUwMDtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmZyb20gPSAwLjI7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50byA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5maWxsQWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGUuc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1lcmFnZSB0aGUgc2NhbGVzIHdoaWNoIGlzICB4IC8geSBcbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgX19tZXJhZ2VTY2FsZSgpIHtcblxuICAgICAgICB9XG4gICAgICAgIG9uRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25EcmF3KGNhbnZhcyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BhdGNoRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuXG4gICAgICAgICAgICBjYW52YXMuc2F2ZSgpO1xuICAgICAgICAgICAgY2FudmFzLmNsaXAodGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdCk7XG4gICAgICAgICAgICBzdXBlci5kaXNwYXRjaERyYXcoY2FudmFzKTtcbiAgICAgICAgICAgIGNhbnZhcy5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGxheW91dHMoKTogQmFzZUxheW91dFtdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXlvdXRzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBzY2FsZVBhaXJzKCk6IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfVtdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc2NhbGVQYWlycztcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QuaGllcmFyY2hpY2FsIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IEZyYW1lTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuRnJhbWVMYXlvdXQ7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgLy8gZXhwb3J0IGNvbnN0IFN0YXJ0QW5nbGU6bnVtYmVyID0gTWF0aC5QSTtcbiAgICAvLyBpbXBvcnQgU2Nyb2xsTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuU2Nyb2xsTGF5b3V0XG4gICAgXG4gICAgZXhwb3J0IGNsYXNzIEhpZXJhcmNoaWNhbENoYXJ0IGV4dGVuZHMgRnJhbWVMYXlvdXQge1xuXG4gICAgICAgIHByaXZhdGUgX2RhdGFNb2RlbDogRGF0YU1vZGVsO1xuICAgICAgICBwcml2YXRlIF9jaGFydFR5cGU6IENoYXJ0VHlwZTtcbiAgICAgICAgcHJpdmF0ZSBfb3B0aW9uOiBhbnk7XG4gICAgICAgIHByaXZhdGUgX3Bsb3Q6IEJhc2VQbG90O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIG9wdGlvbj86IGFueSwgY2hhcnRUeXBlPzogQ2hhcnRUeXBlKSB7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbiA9IG9wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0VHlwZSA9IGNoYXJ0VHlwZTtcblxuICAgICAgICB9XG4gICAgICAgIHNldCBvcHRpb24odmFsdWU6IGFueSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9uID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IG9wdGlvbigpOiBhbnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY2hhcnRUeXBlKHZhbHVlOiBDaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IHRoaXMuX2NoYXJ0VHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0VHlwZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldCBjaGFydFR5cGUoKTogQ2hhcnRUeXBlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFydFR5cGU7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgZGF0YW1vZGVsKHZhbHVlOiBEYXRhTW9kZWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFNb2RlbCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fbG9hZFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgZGF0YW1vZGVsKCk6IERhdGFNb2RlbCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YU1vZGVsO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX2xvYWRWaWV3KCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcGxvdDogQmFzZVBsb3QgPSBuZXcgSGllcmFyY2hpY2FsUGxvdCh0aGlzLmdldENvbnRleHQoKSwgdGhpcy5kYXRhbW9kZWwpO1xuICAgICAgICAgICAgcGxvdC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgcGxvdC5sYXlvdXRQYXJhbXMuaGVpZ2h0ID0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVDtcbiAgICAgICAgICAgIHRoaXMuX3Bsb3QgPSBwbG90O1xuICAgICAgICAgICAgdGhpcy5hZGRWaWV3KHBsb3QpO1xuICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYmVnaW5Mb2FkaW5nQW5pbWF0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wbG90LmJlZ2luTG9hZGluZ0FuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICBcblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgLy8gcmV0dXJuIHN1cGVyLm9uTWVhc3VyZSh3aWR0aCxoZWlnaHQsY2FudmFzKTtcbiAgICAgICAgICAgIGxldCBtYXhzaXplOiBTaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgbG9mZiA9IDAsIHRvZmYgPSAwLCByb2ZmID0gMCwgYm9mZiA9IDA7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2aWV3IG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBuZXcgU2l6ZSgwLCAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBCYXNlUGxvdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkxlZnQgPSBsb2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpblJpZ2h0ID0gcm9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Ub3AgPSB0b2ZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMubWFyZ2luLm1hcmdpbkJvdHRvbSA9IGJvZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdmlldy5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSB2aWV3Lm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplLndpZHRoID4gbWF4c2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4c2l6ZS53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpemUuaGVpZ2h0ID4gbWF4c2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHNpemUuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGwsIHQsIHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG5cbiAgICAgICAgICAgIHRoaXMubGF5b3V0SXRlbSh0aGlzLnBsb3QsIGwsIHQsIHIsIGIsIGNhbnZhcyk7XG5cblxuICAgICAgICBcblxuXG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcGxvdCgpOiBCYXNlUGxvdCB7XG4gICAgICAgICAgICBmb3IgKGxldCBwbG90IG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAocGxvdCBpbnN0YW5jZW9mIEJhc2VQbG90KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbG90O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaERyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc3BhdGNoRHJhdyhjYW52YXMpO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmhpZXJhcmNoaWNhbCB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgQWxpZ25FbGVtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsZW1lbnQ7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgRnJhbWVMYXlvdXQgPSBhbmRyb2lkLndpZGdldC5GcmFtZUxheW91dDtcbiAgICBpbXBvcnQgTGluZWFlckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgUmVuZGVyVHlwZSA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVuZGVyVHlwZTtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IERldmljZSA9IGFuZHJvaWQuZGV2aWNlLkRldmljZTtcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBSb290VmlldyA9IGFuZHJvaWQud2lkZ2V0LlJvb3RWaWV3O1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuXG4gICAgZXhwb3J0IGNsYXNzIENoYXJ0TGF5b3V0IGV4dGVuZHMgUm9vdFZpZXcge1xuXG4gICAgICAgIHByaXZhdGUgX2NoYXJ0OiBIaWVyYXJjaGljYWxDaGFydDtcbiAgICAgICAgcHJpdmF0ZSBfZGF0YU1vZGVsOiBEYXRhTW9kZWw7XG4gICAgICAgIFxuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuY2xpcCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IEV2ZW50SGFuZGxlciA9IChwdDogUG9pbnQsIHR5cGVzOiBFbGVtZW50VHlwZSwgaW5mbzogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgXCIgKyBwdC50b1N0cmluZygpICsgXCIsIHR5cGUgXCIgKyB0eXBlcyArIFwiICwgaW5mbyBcIiArIGluZm8pO1xuICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3dbJ0V2ZW50SGFuZGxlciddID0gRXZlbnRIYW5kbGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0YWNoRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCwgcmVuZGVyVHlwZTpSZW5kZXJUeXBlLGRhdGFtb2RlbD86IERhdGFNb2RlbCkge1xuICAgICAgICAgICAgc3VwZXIuYXR0YWNoRWxlbWVudChlbGVtZW50LFV0aWwuYXNFbnVtKHJlbmRlclR5cGUsUmVuZGVyVHlwZSkpO1xuICAgICAgICAgICAgdGhpcy5wYWRkaW5nID0gbmV3IFBhZGRpbmcoMjApO1xuICAgICAgICAgICAgdGhpcy5fZGF0YU1vZGVsID0gZGF0YW1vZGVsO1xuICAgICAgICAgICAgdGhpcy5zZXRDaGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGJlZ2luTG9hZGluZ0FuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmJlZ2luTG9hZGluZ0FuaW1hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0Q2hhcnQoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFZpZXdzKCk7XG4gICAgICAgICAgICB0aGlzLl9jaGFydCA9IG5ldyBIaWVyYXJjaGljYWxDaGFydCh0aGlzLmdldENvbnRleHQoKSwgbnVsbCwgQ2hhcnRUeXBlLkJhcik7XG4gICAgICAgICAgICB0aGlzLl9jaGFydC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgdGhpcy5fY2hhcnQubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmRhdGFtb2RlbCA9IHRoaXMuX2RhdGFNb2RlbDtcbiAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmdyYXZpdHkgPSBHcmF2aXR5LkNlbnRlcjtcbiAgICAgICAgICAgIHRoaXMuYWRkVmlldyh0aGlzLl9jaGFydCwgMCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaERyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLmRpc3BhdGNoRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmxheW91dEluZm8ub3V0dGVycmVjdDtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3UmVjdChyZWN0LnN0YXJ0UG9pbnQsIHJlY3QuZW5kUG9pbnQsIGZhbHNlLCB0aGlzLmJhY2tncm91bmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsIHQsIHIsIGIsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBhZGRWaWV3KHZpZXc6IFZpZXcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICAgICAgc3VwZXIuYWRkVmlldyh2aWV3LCBpbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5tYXAge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG5cbiAgICAvLyBleHBvcnQgY29uc3QgRVFVQVRPUjogbnVtYmVyID0gMjAwO1xuXG4gICAgZXhwb3J0IGNsYXNzIFBvaW50TGlzdCB7XG4gICAgICAgIHByaXZhdGUgX194czogbnVtYmVyW107XG4gICAgICAgIHByaXZhdGUgX195czogbnVtYmVyW107XG4gICAgICAgIHByaXZhdGUgX19wdGxpc3Q6IFBvaW50W107XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5fX3hzID0gW107XG4gICAgICAgICAgICB0aGlzLl9feXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX19wdGxpc3QgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHBvaW50OiBQb2ludCk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fX3B0bGlzdC5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIHRoaXMuX194cy5wdXNoKHBvaW50LngpO1xuICAgICAgICAgICAgdGhpcy5fX3lzLnB1c2gocG9pbnQueSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9wKCk6IFBvaW50IHtcbiAgICAgICAgICAgIHRoaXMuX194cy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX195cy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fcHRsaXN0LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGdldCB4cygpOiBudW1iZXJbXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3hzO1xuICAgICAgICB9XG4gICAgICAgIGdldCB5cygpOiBudW1iZXJbXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3lzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBwb2ludHMoKTogUG9pbnRbXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3B0bGlzdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RyZWFtIHtcbiAgICAgICAgcHJvdGVjdGVkIF9wb2ludExpc3Q6IFBvaW50TGlzdDtcbiAgICAgICAgcHJvdGVjdGVkIF9wcm9qZWN0aW9uOiBQcm9qZWN0aW9uO1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50TGlzdCA9IG5ldyBQb2ludExpc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2V0UHJvamVjdGlvbihwcm9qZWN0aW9uOiBQcm9qZWN0aW9uKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9wcm9qZWN0aW9uID0gcHJvamVjdGlvblxuICAgICAgICB9XG4gICAgICAgIGFic3RyYWN0IHBhcnNlU3RyZWFtKGNvb3JkaW5hdGVzOiBhbnkpOiB2b2lkO1xuXG4gICAgICAgIC8vIHN0YXRpYyBsb25MYXQyTWVyY2F0b3IobG9uOiBudW1iZXIsIGxhdDogbnVtYmVyKTogUG9pbnQge1xuICAgICAgICAvLyAgICAgbGV0IHB0OiBQb2ludCA9IG5ldyBQb2ludCgpO1xuICAgICAgICAvLyAgICAgbGV0IHg6IG51bWJlciA9IGxvbiAqIEVRVUFUT1IgLyAxODA7XG4gICAgICAgIC8vICAgICBsZXQgeTogbnVtYmVyID0gTWF0aC5sb2coTWF0aC50YW4oKDkwICsgbGF0KSAqIE1hdGguUEkgLyAzNjApKSAvIChNYXRoLlBJIC8gMTgwKTtcbiAgICAgICAgLy8gICAgIHkgPSB5ICogRVFVQVRPUiAvIDE4MDtcbiAgICAgICAgLy8gICAgIHB0LnggPSB4O1xuICAgICAgICAvLyAgICAgcHQueSA9IHk7XG4gICAgICAgIC8vICAgICByZXR1cm4gcHQ7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBzdGF0aWMgbWVyY2F0b3IyTG9uTGF0KHg6IG51bWJlciwgeTogbnVtYmVyKTogeyBsb246IG51bWJlciwgbGF0OiBudW1iZXIgfSB7XG4gICAgICAgIC8vICAgICBsZXQgbWVyY2F0b3JQdDogeyBsb246IG51bWJlciwgbGF0OiBudW1iZXIgfSA9IHsgbG9uOiAwLCBsYXQ6IDAgfTtcbiAgICAgICAgLy8gICAgIGxldCBsb246IG51bWJlciA9IHggLyBFUVVBVE9SICogMTgwO1xuICAgICAgICAvLyAgICAgbGV0IGxhdDogbnVtYmVyID0geSAvIEVRVUFUT1IgKiAxODA7XG4gICAgICAgIC8vICAgICBsYXQgPSAxODAgLyBNYXRoLlBJICogKDIgKiBNYXRoLmF0YW4oTWF0aC5leHAobGF0ICogTWF0aC5QSSAvIDE4MCkpIC0gTWF0aC5QSSAvIDIpO1xuICAgICAgICAvLyAgICAgbWVyY2F0b3JQdC5sb24gPSBsb247XG4gICAgICAgIC8vICAgICBtZXJjYXRvclB0LmxhdCA9IGxhdDtcbiAgICAgICAgLy8gICAgIHJldHVybiBtZXJjYXRvclB0O1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZ2V0IHJlc3VsdCgpOiBQb2ludExpc3Qge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50TGlzdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgQXJlYVN0cmVhbSBleHRlbmRzIFN0cmVhbSB7XG4gICAgICAgIHBhcnNlU3RyZWFtKGNvb3JkaW5hdGVzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCBzdGFydFB0OiBQb2ludCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoY29vcmRpbmF0ZXMgIT0gbnVsbCAmJiBjb29yZGluYXRlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY29vcmRpbmF0ZSBvZiBjb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBjcHQgb2YgY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNwdCBpbnN0YW5jZW9mIEFycmF5ICYmIGNwdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHQ6IFBvaW50ID0gdGhpcy5fcHJvamVjdGlvbi5sb25MYXQyeHkoY3B0WzBdLCBjcHRbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50TGlzdC5wdXNoKHB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0UHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQdCA9IHB0LmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgTGluZVN0cmVhbSBleHRlbmRzIFN0cmVhbSB7XG4gICAgICAgIHBhcnNlU3RyZWFtKGNvb3JkaW5hdGVzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmIChjb29yZGluYXRlcyAhPSBudWxsICYmIGNvb3JkaW5hdGVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjcHQgb2YgY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNwdCBpbnN0YW5jZW9mIEFycmF5ICYmIGNwdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwdDogUG9pbnQgPSB0aGlzLl9wcm9qZWN0aW9uLmxvbkxhdDJ4eShjcHRbMF0sIGNwdFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50TGlzdC5wdXNoKHB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBQb2ludFN0cmVhbSBleHRlbmRzIFN0cmVhbSB7XG4gICAgICAgIHBhcnNlU3RyZWFtKGNvb3JkaW5hdGVzOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmIChjb29yZGluYXRlcyAhPSBudWxsICYmIGNvb3JkaW5hdGVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHQ6IFBvaW50ID0gdGhpcy5fcHJvamVjdGlvbi5sb25MYXQyeHkoY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdKTtcbiAgICAgICAgICAgICAgICBpZiAocHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb2ludExpc3QucHVzaChwdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGNsYXNzIFN0cmVhbUZhY3Rvcnl7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyZWFtTGluZShjb29yZGluYXRlczphbnlbXSxzdHJlYW06U3RyZWFtKXt9XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyZWFtQXJlYShjb29yZGluYXRlczphbnlbXSwgc3RyZWFtOlN0cmVhbSl7fVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgZXhwb3J0IGVudW0gR2VvVHlwZSB7XG4gICAgICAgIFBvaW50LFxuICAgICAgICBNdWx0aVBvaW50LFxuICAgICAgICBMaW5lU3RyaW5nLFxuICAgICAgICBNdWx0aUxpbmVTdHJpbmcsXG4gICAgICAgIFBvbHlnb24sXG4gICAgICAgIE11bHRpUG9seWdvbixcbiAgICAgICAgR2VvbWV0cnlDb2xsZWN0aW9uLFxuICAgICAgICBGZWF0dXJlLFxuICAgICAgICBGZWF0dXJlQ29sbGVjdGlvblxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgRmVhdHVyZSB7XG4gICAgICAgIGlkOnN0cmluZztcbiAgICAgICAgbmFtZTpzdHJpbmc7XG4gICAgICAgIHByb3BlcnRpZXM6IGFueTtcbiAgICAgICAgc3RyZWFtczogU3RyZWFtW107XG4gICAgICAgIHByb2plY3Rpb246IFByb2plY3Rpb247XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlRmVhdHVyZShmZWF0dXJlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmKHRoaXMucHJvamVjdGlvbiAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBmZWF0dXJlLnByb3BlcnRpZXM7XG4gICAgICAgICAgICAgICAgbGV0IGdlb21ldHJ5OiBhbnkgPSBmZWF0dXJlLmdlb21ldHJ5O1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VOYW1lKHRoaXMucHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zID0gW107XG4gICAgICAgICAgICAgICAgaWYgKGdlb21ldHJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdlb21ldHJ5X3R5cGUgPSBVdGlsLmFzRW51bShnZW9tZXRyeS50eXBlLCBHZW9UeXBlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvb3JkaW5hdGVzOiBhbnkgPSBnZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChnZW9tZXRyeV90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEdlb1R5cGUuUG9pbnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zLnB1c2godGhpcy5fY3JlYXRlUG9pbnRTdHJlYW0oY29vcmRpbmF0ZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgR2VvVHlwZS5NdWx0aVBvaW50OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtcyA9IHRoaXMuc3RyZWFtcy5jb25jYXQodGhpcy5fY3JlYXRlTXVsdGlQb2ludFN0cmVhbShjb29yZGluYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHZW9UeXBlLkxpbmVTdHJpbmc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zLnB1c2godGhpcy5fY3JlYXRlTGluZVN0cmVhbShjb29yZGluYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHZW9UeXBlLk11bHRpTGluZVN0cmluZzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXMgPSB0aGlzLnN0cmVhbXMuY29uY2F0KHRoaXMuX2NyZWF0ZU11bHRpTGluZVN0cmVhbShjb29yZGluYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHZW9UeXBlLlBvbHlnb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zLnB1c2godGhpcy5fY3JlYXRlQXJlYVN0cmVhbShjb29yZGluYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHZW9UeXBlLk11bHRpUG9seWdvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbXMgPSB0aGlzLnN0cmVhbXMuY29uY2F0KHRoaXMuX2NyZWF0ZU11bHRpQXJlYVN0cmVhbShjb29yZGluYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcnNlTmFtZShwcm9wOmFueSl7XG4gICAgICAgICAgICBpZihwcm9wICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHByb3AubmFtZTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLm5hbWUgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHByb3AuTkFNRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVQb2ludFN0cmVhbShjb29yZGluYXRlczogYW55KTogUG9pbnRTdHJlYW0ge1xuICAgICAgICAgICAgbGV0IHBvaW50U3RyZWFtOiBQb2ludFN0cmVhbSA9IG5ldyBQb2ludFN0cmVhbSgpO1xuICAgICAgICAgICAgcG9pbnRTdHJlYW0uc2V0UHJvamVjdGlvbih0aGlzLnByb2plY3Rpb24pO1xuICAgICAgICAgICAgcG9pbnRTdHJlYW0ucGFyc2VTdHJlYW0oY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50U3RyZWFtO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlTGluZVN0cmVhbShjb29yZGluYXRlczogYW55KTogTGluZVN0cmVhbSB7XG4gICAgICAgICAgICBsZXQgbGluZVN0cmVhbTogTGluZVN0cmVhbSA9IG5ldyBMaW5lU3RyZWFtKCk7XG4gICAgICAgICAgICBsaW5lU3RyZWFtLnNldFByb2plY3Rpb24odGhpcy5wcm9qZWN0aW9uKTtcblxuICAgICAgICAgICAgbGluZVN0cmVhbS5wYXJzZVN0cmVhbShjb29yZGluYXRlcyk7XG4gICAgICAgICAgICByZXR1cm4gbGluZVN0cmVhbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZUFyZWFTdHJlYW0oY29vcmRpbmF0ZXM6IGFueSk6IEFyZWFTdHJlYW0ge1xuICAgICAgICAgICAgbGV0IGFyZWFTdHJlYW06IEFyZWFTdHJlYW0gPSBuZXcgQXJlYVN0cmVhbSgpO1xuICAgICAgICAgICAgYXJlYVN0cmVhbS5zZXRQcm9qZWN0aW9uKHRoaXMucHJvamVjdGlvbik7XG5cbiAgICAgICAgICAgIGFyZWFTdHJlYW0ucGFyc2VTdHJlYW0oY29vcmRpbmF0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIGFyZWFTdHJlYW07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVNdWx0aVBvaW50U3RyZWFtKGNvb3JkaW5hdGVzOiBhbnkpOiBQb2ludFN0cmVhbVtdIHtcbiAgICAgICAgICAgIGxldCBsaXN0OiBTdHJlYW1bXSA9IFtdO1xuICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGVzICE9IG51bGwgJiYgY29vcmRpbmF0ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvb3JwdCBvZiBjb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2godGhpcy5fY3JlYXRlUG9pbnRTdHJlYW0oY29vcnB0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVNdWx0aUxpbmVTdHJlYW0oY29vcmRpbmF0ZXM6IGFueSk6IExpbmVTdHJlYW1bXSB7XG4gICAgICAgICAgICBsZXQgbGlzdDogU3RyZWFtW10gPSBbXTtcblxuICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGVzICE9IG51bGwgJiYgY29vcmRpbmF0ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvb3JwdCBvZiBjb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2godGhpcy5fY3JlYXRlTGluZVN0cmVhbShjb29ycHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2NyZWF0ZU11bHRpQXJlYVN0cmVhbShjb29yZGluYXRlczogYW55KTogQXJlYVN0cmVhbVtdIHtcbiAgICAgICAgICAgIGxldCBsaXN0OiBTdHJlYW1bXSA9IFtdO1xuICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGVzICE9IG51bGwgJiYgY29vcmRpbmF0ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvb3JwdCBvZiBjb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2godGhpcy5fY3JlYXRlQXJlYVN0cmVhbShjb29ycHQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcblxuICAgICAgICB9XG4gICAgfVxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydCBjbGFzcyBQYXJzZUZhY3Rvcnl7XG4gICAgICAgIFxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgUHJvamVjdGlvbntcbiAgICAgICAgcmVhZG9ubHkgbWF4eDpudW1iZXI7XG4gICAgICAgIHJlYWRvbmx5IG1pbng6bnVtYmVyO1xuICAgICAgICByZWFkb25seSBtYXh5Om51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbWlueTpudW1iZXI7XG4gICAgICAgIGFic3RyYWN0IGJlZ2luKCk6dm9pZDtcbiAgICAgICAgYWJzdHJhY3QgZW5kKCk6dm9pZDtcbiAgICAgICAgYWJzdHJhY3Qgc2NhbGUocmF0ZTpudW1iZXIpOnZvaWQ7Ly8xMDAw5Li65Z+65YeG57q/XG4gICAgICAgIGFic3RyYWN0IHJvdGF0ZShsYW1iZGE6IG51bWJlciwgcGhpOm51bWJlciwgZ2FtbWE6bnVtYmVyKTogdm9pZDtcbiAgICAgICAgYWJzdHJhY3QgdHJhbnNsYXRlKHhvZmZzZXQ6bnVtYmVyLHlvZmZzZXQ6bnVtYmVyKTp2b2lkO1xuICAgICAgICBhYnN0cmFjdCBjZW50ZXIobG9uOm51bWJlcixsYXQ6bnVtYmVyKTp2b2lkO1xuICAgICAgICBhYnN0cmFjdCB4eTJMb25MYXQoeDpudW1iZXIseTpudW1iZXIpOntsb246bnVtYmVyLGxhdDpudW1iZXJ9O1xuICAgICAgICBhYnN0cmFjdCBsb25MYXQyeHkobG9uOm51bWJlcixsYXQ6bnVtYmVyKTpQb2ludDtcbiAgICAgICAgLy8gYWJzdHJhY3QgbmFtZTJ4eShuYW1lOnN0cmluZyk6UG9pbnQ7XG4gICAgICAgIGFic3RyYWN0IHJlZnJlc2goKTp2b2lkO1xuICAgIH1cbn0iLCJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBleHBvcnQgY29uc3QgRUFSVEhfUkFESVVTOiBudW1iZXIgPSA2Mzc4MTM3O1xuICAgIGV4cG9ydCBjb25zdCBFUVVBVE9SOiBudW1iZXIgPSBFQVJUSF9SQURJVVMgKiAyICogTWF0aC5QSTsvLyDotaTpgZMs5Zyo6L+Z6YeM5YGH6K6+5Zyw55CD5piv5LiA5Liq5q2j55CDXG4gICAgZXhwb3J0IGNsYXNzIE1lcmNhdG9yUHJvamVjdGlvbiBleHRlbmRzIFByb2plY3Rpb24ge1xuICAgICAgICBwdWJsaWMgc3RhdGljIE1BWF9MQVQgOm51bWJlcj04NS4wNTExMjg3Nzk4MDY1OTtcbiAgICAgICAgcHJpdmF0ZSBfX2NlbnRlcmxvbjogbnVtYmVyPTA7XG4gICAgICAgIHByaXZhdGUgX19jZW50ZXJsYXQ6IG51bWJlcj0wO1xuICAgICAgICBwcml2YXRlIF9feG9mZnNldDogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBfX3lvZmZzZXQ6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgX19sYW1iZGE6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfX3BoaTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9fZ2FtbWE6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfX2NpcmN1bWZlcmVuY2U6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfbWF4Om51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfbWluOm51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfbWF4eTpudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX21pbnk6bnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9zY2FsZTpudW1iZXI9MTtcblxuXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgaWYodGhpcy5fX2NpcmN1bWZlcmVuY2UgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fX2NpcmN1bWZlcmVuY2UgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSAxO1xuXG4gICAgICAgIH1cblxuICAgICAgICBiZWdpbigpOnZvaWR7XG4gICAgICAgICAgICB0aGlzLl9tYXggPSAwO1xuICAgICAgICAgICAgdGhpcy5fbWluID0gMDtcbiAgICAgICAgICAgIHRoaXMuX21heHkgPSAwO1xuICAgICAgICAgICAgdGhpcy5fbWlueSA9IDA7XG4gICAgICAgICAgICBsZXQgbWluUHQ6UG9pbnQgPSB0aGlzLmxvbkxhdDJ4eSgtMTgwLC05MCk7XG4gICAgICAgICAgICBsZXQgbWF4UHQ6UG9pbnQgPSB0aGlzLmxvbkxhdDJ4eSgxODAsOTApO1xuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGVuZCgpOnZvaWR7XG4gICAgICAgICAgICB0aGlzLl9tYXggPSAwO1xuICAgICAgICAgICAgdGhpcy5fbWluID0gMDtcbiAgICAgICAgICAgIHRoaXMuX21heHkgPSAwO1xuICAgICAgICAgICAgdGhpcy5fbWlueSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IG1heHgoKTpudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgICAgICB9XG4gICAgICAgIGdldCBtaW54KCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcbiAgICAgICAgfVxuICAgICAgICBnZXQgbWF4eSgpOm51bWJlcntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXg7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IG1pbnkoKTpudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWluO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlKHJhdGU6bnVtYmVyKTp2b2lke1xuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSByYXRlO1xuICAgICAgICB9XG4gICAgICAgIHJvdGF0ZShsYW1iZGE6IG51bWJlciwgcGhpOiBudW1iZXIsIGdhbW1hOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX19sYW1iZGEgPSBsYW1iZGE7XG4gICAgICAgICAgICB0aGlzLl9fcGhpID0gcGhpO1xuICAgICAgICAgICAgdGhpcy5fX2dhbW1hID0gZ2FtbWE7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNsYXRlKHhvZmZzZXQ6IG51bWJlciwgeW9mZnNldCk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHhvZmZzZXQgIT0gbnVsbCAmJiAhaXNOYU4oeG9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9feG9mZnNldCArPXhvZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeW9mZnNldCAhPSBudWxsICYmICFpc05hTih5b2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX195b2Zmc2V0ICs9eW9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjZW50ZXIobG9uOiBudW1iZXIsIGxhdDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9fY2VudGVybG9uID0gbG9uO1xuICAgICAgICAgICAgdGhpcy5fX2NlbnRlcmxhdCA9IGxhdDtcbiAgICAgICAgfVxuICAgICAgICB4eTJMb25MYXQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB7IGxvbjogbnVtYmVyLCBsYXQ6IG51bWJlciB9IHtcbiAgICAgICAgICAgIGxldCBjaXJjdW1mZXJlbmNlIDpudW1iZXIgPSB0aGlzLl9fY2lyY3VtZmVyZW5jZSAqIHRoaXMuX3NjYWxlO1xuICAgICAgICAgICAgbGV0IG1lcmNhdG9yUHQ6IHsgbG9uOiBudW1iZXIsIGxhdDogbnVtYmVyIH0gPSB7IGxvbjogMCwgbGF0OiAwIH07XG4gICAgICAgICAgICBsZXQgbG9uOiBudW1iZXIgPSB4IC8gY2lyY3VtZmVyZW5jZSAqIDE4MDtcbiAgICAgICAgICAgIGxldCBsYXQ6IG51bWJlciA9IHkgLyBjaXJjdW1mZXJlbmNlICogMTgwO1xuICAgICAgICAgICAgbGF0ID0gMTgwIC8gTWF0aC5QSSAqICgyICogTWF0aC5hdGFuKE1hdGguZXhwKGxhdCAqIE1hdGguUEkgLyAxODApKSAtIE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgIG1lcmNhdG9yUHQubG9uID0gbG9uO1xuICAgICAgICAgICAgbWVyY2F0b3JQdC5sYXQgPSBsYXQ7XG4gICAgICAgICAgICByZXR1cm4gbWVyY2F0b3JQdDtcbiAgICAgICAgfVxuICAgICAgICBsb25MYXQyeHkobG9uOiBudW1iZXIsIGxhdDogbnVtYmVyKTogUG9pbnQge1xuICAgICAgICAgICAgbGV0IGNpcmN1bWZlcmVuY2UgOm51bWJlciA9IHRoaXMuX19jaXJjdW1mZXJlbmNlICogdGhpcy5fc2NhbGU7XG4gICAgICAgICAgICBsb24gPSBsb24gLSB0aGlzLl9fY2VudGVybG9uO1xuICAgICAgICAgICAgbGF0ID0gbGF0IC0gdGhpcy5fX2NlbnRlcmxhdDtcbiAgICAgICAgICAgIGxldCBsYW1iZGE6IG51bWJlciA9ICh0aGlzLl9fbGFtYmRhID09IG51bGwgfHwgaXNOYU4odGhpcy5fX2xhbWJkYSkpID8gMCA6IHRoaXMuX19sYW1iZGE7XG4gICAgICAgICAgICBsZXQgcGhpOiBudW1iZXIgPSAodGhpcy5fX3BoaSA9PSBudWxsIHx8IGlzTmFOKHRoaXMuX19waGkpKSA/IDAgOiB0aGlzLl9fcGhpO1xuICAgICAgICAgICAgbGV0IGdhbW1hOiBudW1iZXIgPSAodGhpcy5fX2dhbW1hID09IG51bGwgfHwgaXNOYU4odGhpcy5fX2dhbW1hKSkgPyAwIDogdGhpcy5fX2dhbW1hO1xuICAgICAgICAgICAgbG9uID0gbGFtYmRhICsgbG9uO1xuICAgICAgICAgICAgbGF0ID0gcGhpICsgbGF0O1xuICAgICAgICAgICAgaWYoTWF0aC5hYnMobGF0KT5NZXJjYXRvclByb2plY3Rpb24uTUFYX0xBVCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgeDogbnVtYmVyID0gbG9uICogY2lyY3VtZmVyZW5jZSAvIDE4MDtcbiAgICAgICAgICAgIGxldCB5OiBudW1iZXIgPSBNYXRoLmxvZyhNYXRoLnRhbigoOTAgKyBsYXQpICogTWF0aC5QSSAvIDM2MCkpIC8gKE1hdGguUEkgLyAxODApO1xuICAgICAgICAgICAgeSA9IHkgKiBjaXJjdW1mZXJlbmNlIC8gMTgwO1xuICAgICAgICAgICAgaWYgKGdhbW1hID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBhOiBudW1iZXIgPSAgeD09MD8wOk1hdGguYXRhbih5IC8geCk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld2E6IG51bWJlciA9IGEgKyBnYW1tYSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgICAgICAgICAgbGV0IHJhZGl1cyA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICAgICAgICB4ID0gTWF0aC5jb3MobmV3YSkgKiByYWRpdXM7XG4gICAgICAgICAgICAgICAgeSA9IE1hdGguc2luKG5ld2EpICogcmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHB0OiBQb2ludCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHQub2Zmc2V0KHRoaXMuX194b2Zmc2V0LCB0aGlzLl9feW9mZnNldCk7XG4gICAgICAgICAgICBwdC5vZmZzZXQoMCwtY2lyY3VtZmVyZW5jZS8yKTtcbiAgICAgICAgICAgIHB0LnkgPSAtcHQueTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHB0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCgpOiB2b2lkIHtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBleHBvcnQgY2xhc3MgT3J0aG9ncmFwaGljUHJvamVjdGlvbiBleHRlbmRzIFByb2plY3Rpb24ge1xuICAgIC8vICAgICBwcml2YXRlIF9fY2VudGVybG9uOiBudW1iZXI7XG4gICAgLy8gICAgIHByaXZhdGUgX19jZW50ZXJsYXQ6IG51bWJlcjtcbiAgICAvLyAgICAgcHJpdmF0ZSBfX3hvZmZzZXQ6IG51bWJlcjtcbiAgICAvLyAgICAgcHJpdmF0ZSBfX3lvZmZzZXQ6IG51bWJlcjtcbiAgICAvLyAgICAgcHJpdmF0ZSBfX2xhbWJkYTogbnVtYmVyO1xuICAgIC8vICAgICBwcml2YXRlIF9fcGhpOiBudW1iZXI7XG4gICAgLy8gICAgIHByaXZhdGUgX19nYW1tYTogbnVtYmVyO1xuXG4gICAgLy8gICAgIHJvdGF0ZShsYW1iZGE6IG51bWJlciwgcGhpOiBudW1iZXIsIGdhbW1hOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyAgICAgICAgIHRoaXMuX19sYW1iZGEgPSBsYW1iZGE7XG4gICAgLy8gICAgICAgICB0aGlzLl9fcGhpID0gcGhpO1xuICAgIC8vICAgICAgICAgdGhpcy5fX2dhbW1hID0gZ2FtbWE7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgdHJhbnNsYXRlKHhvZmZzZXQ6IG51bWJlciwgeW9mZnNldCk6IHZvaWQge1xuICAgIC8vICAgICAgICAgdGhpcy5fX3hvZmZzZXQgPSB4b2Zmc2V0O1xuICAgIC8vICAgICAgICAgdGhpcy5fX3lvZmZzZXQgPSB5b2Zmc2V0O1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGNlbnRlcihsb246IG51bWJlciwgbGF0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyAgICAgICAgIHRoaXMuX19jZW50ZXJsb24gPSBsb247XG4gICAgLy8gICAgICAgICB0aGlzLl9fY2VudGVybGF0ID0gbGF0O1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHh5MkxvbkxhdCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHsgbG9uOiBudW1iZXIsIGxhdDogbnVtYmVyIH0ge1xuXG4gICAgLy8gICAgICAgICBsZXQgbWVyY2F0b3JQdDogeyBsb246IG51bWJlciwgbGF0OiBudW1iZXIgfSA9IHsgbG9uOiAwLCBsYXQ6IDAgfTtcbiAgICAvLyAgICAgICAgIGxldCBsb246IG51bWJlciA9IHggLyBFUVVBVE9SICogMTgwO1xuICAgIC8vICAgICAgICAgbGV0IGxhdDogbnVtYmVyID0geSAvIEVRVUFUT1IgKiAxODA7XG4gICAgLy8gICAgICAgICBsYXQgPSAxODAgLyBNYXRoLlBJICogKDIgKiBNYXRoLmF0YW4oTWF0aC5leHAobGF0ICogTWF0aC5QSSAvIDE4MCkpIC0gTWF0aC5QSSAvIDIpO1xuICAgIC8vICAgICAgICAgbWVyY2F0b3JQdC5sb24gPSBsb247XG4gICAgLy8gICAgICAgICBtZXJjYXRvclB0LmxhdCA9IGxhdDtcbiAgICAvLyAgICAgICAgIHJldHVybiBtZXJjYXRvclB0O1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGxvbkxhdDJ4eShsb246IG51bWJlciwgbGF0OiBudW1iZXIpOiBQb2ludCB7XG4gICAgLy8gICAgICAgICBsZXQgbGFtYmRhOiBudW1iZXIgPSAodGhpcy5fX2xhbWJkYSA9PSBudWxsIHx8IGlzTmFOKHRoaXMuX19sYW1iZGEpKSA/IDAgOiB0aGlzLl9fbGFtYmRhO1xuICAgIC8vICAgICAgICAgbGV0IHBoaTogbnVtYmVyID0gKHRoaXMuX19waGkgPT0gbnVsbCB8fCBpc05hTih0aGlzLl9fcGhpKSkgPyAwIDogdGhpcy5fX3BoaTtcbiAgICAvLyAgICAgICAgIGxldCBnYW1tYTogbnVtYmVyID0gKHRoaXMuX19nYW1tYSA9PSBudWxsIHx8IGlzTmFOKHRoaXMuX19nYW1tYSkpID8gMCA6IHRoaXMuX19nYW1tYTtcbiAgICAvLyAgICAgICAgIGlmIChnYW1tYSA+IDApIHtcbiAgICAvLyAgICAgICAgICAgICBsZXQgYTogbnVtYmVyID0gTWF0aC5hdGFuKGxhdCAvIGxvbik7XG4gICAgLy8gICAgICAgICAgICAgbGV0IG5ld2E6IG51bWJlciA9IGEgKyBnYW1tYSAqIE1hdGguUEkgLyAxODA7XG4gICAgLy8gICAgICAgICAgICAgbGV0IHJhZGl1cyA9IE1hdGguc3FydChsYXQgKiBsYXQgKyBsb24gKiBsb24pO1xuICAgIC8vICAgICAgICAgICAgIGxvbiA9IE1hdGguY29zKG5ld2EpICogcmFkaXVzO1xuICAgIC8vICAgICAgICAgICAgIGxhdCA9IE1hdGguc2luKG5ld2EpICogcmFkaXVzO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICAgICAgbG9uID0gbGFtYmRhICsgbG9uO1xuICAgIC8vICAgICAgICAgbGF0ID0gcGhpICsgbGF0O1xuICAgIC8vICAgICAgICAgbGV0IHg6IG51bWJlciA9IGxvbiAqIEVRVUFUT1IgLyAxODA7XG4gICAgLy8gICAgICAgICBsZXQgeTogbnVtYmVyID0gTWF0aC5sb2coTWF0aC50YW4oKDkwICsgbGF0KSAqIE1hdGguUEkgLyAzNjApKSAvIChNYXRoLlBJIC8gMTgwKTtcbiAgICAvLyAgICAgICAgIHkgPSB5ICogRVFVQVRPUiAvIDE4MDtcbiAgICAvLyAgICAgICAgIHJldHVybiBuZXcgUG9pbnQoeCwgeSk7XG4gICAgLy8gICAgIH1cblxuICAgIC8vICAgICByZWZyZXNoKCk6IHZvaWQge1xuXG4gICAgLy8gICAgIH1cblxuICAgIC8vIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBleHBvcnQgY2xhc3MgUHJvamVjdGlvbkZhY3Rvcnl7XG4gICAgICAgIHN0YXRpYyBjcmVhdGUobmFtZTpzdHJpbmc9bnVsbCk6UHJvamVjdGlvbntcbiAgICAgICAgICAgIGlmKG5hbWUgPT0gbnVsbCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5tYXAge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBpbXBvcnQgU2VyaWVzID0gYW5kcm9pZC50ZXN0LmNhcnRlc2lhbi5TZXJpZXM7XG4gICAgaW1wb3J0IEZpZWxkID0gYW5kcm9pZC50ZXN0LmNhcnRlc2lhbi5GaWVsZDtcbiAgICBpbXBvcnQgRmlsdGVyID0gYW5kcm9pZC50ZXN0LmNhcnRlc2lhbi5GaWx0ZXI7XG4gICAgaW1wb3J0IFZhbHVlID0gYW5kcm9pZC50ZXN0LmNhcnRlc2lhbi5WYWx1ZTtcbiAgICBpbXBvcnQgRW5jb2RpbmcgPSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuLkVuY29kaW5nO1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgZXhwb3J0IGNsYXNzIERhdGFNb2RlbCB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIGlkOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIHByaXZhdGUgX19kYXRhOiBhbnk7XG4gICAgICAgIHByaXZhdGUgX19lbmNvZGluZzogRW5jb2Rpbmc7XG4gICAgICAgIHByaXZhdGUgX19maWx0ZXI6IEZpbHRlcjtcblxuICAgICAgICBwcml2YXRlIF9fc2VyaWVzOiBTZXJpZXNbXTtcbiAgICAgICAgcHJpdmF0ZSBfX2FsbFNlcmllczogU2VyaWVzW107XG4gICAgICAgIHByaXZhdGUgX19jaGFydFR5cGVzOiBDaGFydFR5cGVbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9fY29uZmlnOiBHZW9Db25maWdcbiAgICAgICAgcHJvdGVjdGVkIF9fc2NhbGVQYWlyczogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9W107XG4gICAgICAgIHB1YmxpYyBmZWF0dXJlTGlzdDogRmVhdHVyZVtdO1xuICAgICAgICBwdWJsaWMgcHJvamVjdGlvbjogUHJvamVjdGlvbjtcblxuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcbiAgICAgICAgICAgIERhdGFNb2RlbC5pZCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24gPSBuZXcgTWVyY2F0b3JQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5jb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19jb25maWcgPSBuZXcgR2VvQ29uZmlnKGRhdGEuY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2NvbmZpZy5jZW50ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb24uY2VudGVyKHRoaXMuX19jb25maWcuY2VudGVyLngsIHRoaXMuX19jb25maWcuY2VudGVyLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnLnRyYW5zbGF0ZSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnRyYW5zbGF0ZSh0aGlzLl9fY29uZmlnLnRyYW5zbGF0ZS54LHRoaXMuX19jb25maWcudHJhbnNsYXRlLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2NvbmZpZy5zY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbi5zY2FsZSh0aGlzLl9fY29uZmlnLnNjYWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9fZW5jb2RpbmcgPSB0aGlzLl9hbmFseXNlRW5jb2RpbmcodGhpcy5fX2RhdGEuZW5jb2RpbmcpO1xuICAgICAgICAgICAgdGhpcy5fYW5hbHlzZUZpbHRlcihkYXRhLmZpbHRlcik7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZ2V0IGNvbmZpZygpOkdlb0NvbmZpZ3tcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY29uZmlnO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5hbHlzZUVuY29kaW5nKGVuY29kZTogYW55KTogRW5jb2Rpbmcge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbmNvZGluZyhlbmNvZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCgpOiB2b2lkIHtcbiAgICAgICAgICAgIERhdGFNb2RlbC5pZCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9fYW5hbHlzZUdlb0RhdGEodGhpcy5fX2RhdGEuZ2VvKTtcbiAgICAgICAgICAgIHRoaXMuX2FuYWx5c2VTZXJpZXModGhpcy5fX2RhdGEuc2VyaWVzLCB0aGlzLl9fZW5jb2RpbmcpO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlTGF5b3V0U2NhbGVzKHRoaXMuX19lbmNvZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0IGNoYXJ0VHlwZXMoKTogQ2hhcnRUeXBlW10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jaGFydFR5cGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYW5hbHlzZVNlcmllcyhzZXJpZXNfZGF0YTogYW55LCBlbmNvZGluZzogRW5jb2RpbmcpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX19zZXJpZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX19hbGxTZXJpZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzX2RhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWVzaXRlbSA9IHNlcmllc19kYXRhW2ldO1xuICAgICAgICAgICAgICAgIGxldCBzZXI6IFNlcmllcyA9IG5ldyBTZXJpZXMoZW5jb2RpbmcsIHNlcmllc2l0ZW0sIGksbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLl9fZmlsdGVyLnNlcmllcy5pbmRleE9mKHNlcmllc2l0ZW0ubmFtZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXIuZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3Nlcmllcy5wdXNoKHNlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fY2hhcnRUeXBlcy5pbmRleE9mKHNlci5jaGFydFR5cGUpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0VHlwZXMucHVzaChzZXIuY2hhcnRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlci5lbmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fX2FsbFNlcmllcy5wdXNoKHNlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FuYWx5c2VGaWx0ZXIoZmlsdGVyOiBhbnkpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIgIT0gbnVsbCAmJiBmaWx0ZXIuc2VyaWVzICE9IG51bGwgJiYgZmlsdGVyLnJ1bGVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fZmlsdGVyID0gbmV3IEZpbHRlcihmaWx0ZXIuc2VyaWVzLCBmaWx0ZXIucnVsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfX2FuYWx5c2VHZW9EYXRhKGdlb2RhdGE6IGFueSkge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLmJlZ2luKCk7XG4gICAgICAgICAgICBsZXQgdHlwZTogR2VvVHlwZSA9IFV0aWwuYXNFbnVtKGdlb2RhdGEudHlwZSwgR2VvVHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmZlYXR1cmVMaXN0ID0gW107XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09IEdlb1R5cGUuRmVhdHVyZUNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZXMgPSBnZW9kYXRhLmZlYXR1cmVzO1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlcyAhPSBudWxsICYmIGZlYXR1cmVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZmVhdHVyZSBvZiBmZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGY6IEZlYXR1cmUgPSBuZXcgRmVhdHVyZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZi5pZCA9ICgrK0RhdGFNb2RlbC5pZCkudG9GaXhlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5wcm9qZWN0aW9uID0gdGhpcy5wcm9qZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZi5wYXJzZUZlYXR1cmUoZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVMaXN0LnB1c2goZik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbi5lbmQoKTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGVMYXlvdXRTY2FsZXMoZW5jb2Rpbmc6IEVuY29kaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9fc2NhbGVQYWlycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fX3Nlcmllcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX19zZXJpZXMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXJpZXM6IFNlcmllcyA9IHRoaXMuX19zZXJpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0X3NlcmllczogU2VyaWVzID0gdGhpcy5fX3Nlcmllc1tpICsgMV07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGFpckEgb2Ygc2VyaWVzLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXJCIG9mIG5leHRfc2VyaWVzLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFpckEuZmlsZWQuZXF1YWxzKHBhaXJCLmZpbGVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZWQgPSBwYWlyQS5maWxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvcmNlOiBib29sZWFuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZm9BOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH0gPSB0aGlzLl9fZ2V0U2NhbGVJbmZvYnluYW1lKHBhaXJBLmZpbGVkLm5hbWUsIHNlcmllcy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZm9COiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH0gPSB0aGlzLl9fZ2V0U2NhbGVJbmZvYnluYW1lKHBhaXJCLmZpbGVkLm5hbWUsIG5leHRfc2VyaWVzLm5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvQSA9PSBudWxsICYmIGluZm9CID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IFV0aWxpdHkubWVyZ2VTY2FsZShwYWlyQS5zY2FsZSwgcGFpckIuc2NhbGUsIGZvcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX3NjYWxlUGFpcnMucHVzaCh7IHNlcmllczogW3Nlcmllcy5uYW1lLCBuZXh0X3Nlcmllcy5uYW1lXSwgZmlsZWQ6IGZpbGVkLCBzY2FsZTogc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtzZXJpZXMubmFtZV0sIGZpbGVkOiBwYWlyQS5maWxlZCwgc2NhbGU6IHBhaXJBLnNjYWxlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFtuZXh0X3Nlcmllcy5uYW1lXSwgZmlsZWQ6IHBhaXJCLmZpbGVkLCBzY2FsZTogcGFpckIuc2NhbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mb0EgPT0gbnVsbCAmJiBpbmZvQiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGUgPSBVdGlsaXR5Lm1lcmdlU2NhbGUocGFpckEuc2NhbGUsIGluZm9CLnNjYWxlLCBmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9CLnNjYWxlID0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb0Iuc2VyaWVzLnB1c2goc2VyaWVzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZm9BICE9IG51bGwgJiYgaW5mb0IgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlID0gVXRpbGl0eS5tZXJnZVNjYWxlKHBhaXJCLnNjYWxlLCBpbmZvQS5zY2FsZSwgZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvQS5zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9BLnNlcmllcy5wdXNoKG5leHRfc2VyaWVzLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNlciBvZiB0aGlzLl9fc2VyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2Ygc2VyLnNjYWxlUGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IHRoaXMuX2dldFNjYWxlQnlOYW1lKHBhaXIuZmlsZWQubmFtZSwgc2VyLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWlyLnNjYWxlID0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fX3Nlcmllcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2YgdGhpcy5fX3Nlcmllc1swXS5zY2FsZVBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19zY2FsZVBhaXJzLnB1c2goeyBzZXJpZXM6IFt0aGlzLl9fc2VyaWVzWzBdLm5hbWVdLCBmaWxlZDogcGFpci5maWxlZCwgc2NhbGU6IHBhaXIuc2NhbGUuY2xvbmUoKSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLm5hbWVTY2FsZS5yYW5nZXNcbiAgICAgICAgICAgIGxldCBuYW1lc2NhbGU6IE1hcE9yZGluYWxTY2FsZSA9IHRoaXMubmFtZVNjYWxlO1xuICAgICAgICAgICAgaWYgKG5hbWVzY2FsZSAhPSBudWxsICYmIG5hbWVzY2FsZS5kb21haW5zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYW1lc2NhbGUuZG9tYWlucy5tYXAoKHB0OiBQb2ludCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHQgaW5zdGFuY2VvZiBQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdGlvbi5sb25MYXQyeHkocHQueCwgcHQueSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXQgbmFtZVNjYWxlKCk6IE1hcE9yZGluYWxTY2FsZSB7XG4gICAgICAgICAgICBsZXQgc2NhbGU6IFNjYWxlID0gXy5yZXN1bHQoXy5maW5kKHRoaXMuX19zY2FsZVBhaXJzLCAoaXRlbTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZW9wb3NpdGlvbicgPT0gaXRlbS5maWxlZC5uYW1lO1xuICAgICAgICAgICAgfSksIFwic2NhbGVcIik7XG4gICAgICAgICAgICBpZiAoc2NhbGUgaW5zdGFuY2VvZiBNYXBPcmRpbmFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBwcml2YXRlIF9fZ2V0U2NhbGVJbmZvYnluYW1lKGZpbGVkbmFtZTogc3RyaW5nLCBzZXJpZXNuYW1lOiBzdHJpbmcpOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH0ge1xuICAgICAgICAgICAgbGV0IGluZm86IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfSA9IF8uZmluZCh0aGlzLl9fc2NhbGVQYWlycywgKGl0ZW06IHsgc2VyaWVzOiBzdHJpbmdbXSwgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnNlcmllcy5pbmRleE9mKHNlcmllc25hbWUpID49IDAgJiYgZmlsZWRuYW1lID09IGl0ZW0uZmlsZWQubmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgX2dldFNjYWxlQnlOYW1lKGZpbGVkbmFtZTogc3RyaW5nLCBzZXJpZXNuYW1lOiBzdHJpbmcpOiBTY2FsZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5yZXN1bHQoXy5maW5kKHRoaXMuX19zY2FsZVBhaXJzLCAoaXRlbTogeyBzZXJpZXM6IHN0cmluZ1tdLCBmaWxlZDogRmllbGQsIHNjYWxlOiBTY2FsZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uc2VyaWVzLmluZGV4T2Yoc2VyaWVzbmFtZSkgPj0gMCAmJiBmaWxlZG5hbWUgPT0gaXRlbS5maWxlZC5uYW1lO1xuICAgICAgICAgICAgfSksIFwic2NhbGVcIik7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGdldFNlcmllc0J5VHlwZShjaGFydHR5cGU6IENoYXJ0VHlwZSk6IFNlcmllc1tdIHtcbiAgICAgICAgICAgIGxldCBzZXJpZXM6IFNlcmllc1tdID0gXy5maWx0ZXIodGhpcy5fX3NlcmllcywgKHNlcikgPT4geyByZXR1cm4gc2VyLmNoYXJ0VHlwZSA9PT0gY2hhcnR0eXBlOyB9KTtcbiAgICAgICAgICAgIHJldHVybiBzZXJpZXM7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc2VyaWVzKCk6IFNlcmllc1tdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc2VyaWVzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBhbGxTZXJpZXMoKTogU2VyaWVzW10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19hbGxTZXJpZXM7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGVuY29kaW5nKCk6IEVuY29kaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW5jb2Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGZpbHRlcigpOiBGaWx0ZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc2NhbGVQYWlycygpOiB7IHNlcmllczogc3RyaW5nW10sIGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlUGFpcnM7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxuXG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwLnJlbGF0aW9uIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IEZpZWxkID0gYW5kcm9pZC50ZXN0LmNhcnRlc2lhbi5GaWVsZDtcbiAgICBleHBvcnQgY2xhc3MgRW5jb2Rpbmcge1xuICAgICAgICBwdWJsaWMgc3RhcnQ6IEZpZWxkW10gfCBGaWVsZDtcbiAgICAgICAgcHVibGljIGVuZDogRmllbGRbXSB8IEZpZWxkO1xuICAgICAgICBwdWJsaWMgY29sb3I6IEZpZWxkO1xuICAgICAgICBwdWJsaWMgdGV4dDogRmllbGQ7XG4gICAgICAgIHB1YmxpYyB0b29sdGlwOiBGaWVsZDtcbiAgICAgICAgcHVibGljIHZhbHVlczogRmllbGRbXTtcblxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGVuY29kaW5nOiBhbnkpIHtcbiAgICAgICAgICAgIC8vIGlmIChlbmNvZGluZy5zdGFydCYmIGVuY29kaW5nLnN0YXJ0LmZpZWxkICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vICAgICBpZiAoZW5jb2Rpbmcuc3RhcnQuZmllbGQuaW5jbHVkZXMoJywnKSkge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnN0YXJ0ID0gW107XG4gICAgICAgICAgICAvLyAgICAgICAgIGxldCBzdGFydDogYW55W10gPSBlbmNvZGluZy5zdGFydC5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgLy8gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnN0YXJ0LnB1c2gobmV3IEZpZWxkKHN0YXJ0W2ldLCAnc3RhcnQnLCBpKSk7XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnN0YXJ0ID0gbmV3IEZpZWxkKGVuY29kaW5nLnN0YXJ0LCBcInN0YXJ0XCIpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGlmIChlbmNvZGluZy5lbmQgJiYgZW5jb2RpbmcuZW5kLmZpZWxkICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vICAgICBpZiAoZW5jb2RpbmcuZW5kLmZpZWxkLmluY2x1ZGVzKCcsJykpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5lbmQgPSBbXTtcbiAgICAgICAgICAgIC8vICAgICAgICAgbGV0IGVuZDogYW55W10gPSBlbmNvZGluZy5lbmQuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgZW5kLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmVuZC5wdXNoKG5ldyBGaWVsZChlbmRbaV0sICdzdGFydCcsaSkpO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5lbmQgPSBuZXcgRmllbGQoZW5jb2Rpbmcuc2hhcGUsICdlbmQnKTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcuY29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gbmV3IEZpZWxkKGVuY29kaW5nLmNvbG9yLCAnY29sb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmNvZGluZy50b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IEZpZWxkKGVuY29kaW5nLnRvb2x0aXAsICd0b29sdGlwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5jb2RpbmcudGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IG5ldyBGaWVsZChlbmNvZGluZy50ZXh0LCAndGV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuY29kaW5nLnZhbHVlcyAmJiBlbmNvZGluZy52YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGluZy52YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZW5jb2RpbmcudmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKG5ldyBGaWVsZCh2YWx1ZSwgdmFsdWUubmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5tYXAucmVsYXRpb24ge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVXRpbCA9IGFuZHJvaWQuZ3JhcGhpY3MuVXRpbDtcbiAgICBpbXBvcnQgRmllbGQgPSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuLkZpZWxkO1xuICAgIGltcG9ydCBWYWx1ZSA9IGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4uVmFsdWU7XG4gICAgaW1wb3J0IEVuY29kaW5nID0gYW5kcm9pZC50ZXN0Lm1hcC5yZWxhdGlvbi5FbmNvZGluZztcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGV4cG9ydCBjbGFzcyBJdGVtIHtcbiAgICAgICAgc3RhcnQ6IFBvaW50O1xuICAgICAgICBlbmQ6IFBvaW50O1xuICAgICAgICB2YWx1ZTogYW55O1xuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgRGF0YU1vZGVsIHtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaWQ6IG51bWJlciA9IDA7XG5cbiAgICAgICAgcHJpdmF0ZSBfX2RhdGE6IGFueTtcbiAgICAgICAgcHJpdmF0ZSBfX2VuY29kaW5nOiBFbmNvZGluZztcblxuICAgICAgICBwcml2YXRlIF9fY2hhcnRUeXBlczogQ2hhcnRUeXBlW10gPSBbXTtcbiAgICAgICAgcHJpdmF0ZSBfX2NvbmZpZzogR2VvQ29uZmlnXG4gICAgICAgIHByb3RlY3RlZCBfX3NjYWxlUGFpcnM6IHsgZmlsZWQ6IEZpZWxkLCBzY2FsZTogU2NhbGUgfVtdO1xuICAgICAgICBwdWJsaWMgZmVhdHVyZUxpc3Q6IEZlYXR1cmVbXTtcbiAgICAgICAgcHVibGljIHByb2plY3Rpb246IFByb2plY3Rpb247XG4gICAgICAgIHByaXZhdGUgX3BvaW50czogSXRlbVtdO1xuICAgICAgICBnZXQgcG9pbnRzKCk6IEl0ZW1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgICAgICB9XG4gICAgICAgIGdldCBjb25maWcoKTpHZW9Db25maWd7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2NvbmZpZztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29uc3RydWN0b3IoZGF0YTogYW55KSB7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHMgPSBbXTtcbiAgICAgICAgICAgIERhdGFNb2RlbC5pZCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICB0aGlzLnByb2plY3Rpb24gPSBuZXcgTWVyY2F0b3JQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5jb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19jb25maWcgPSBuZXcgR2VvQ29uZmlnKGRhdGEuY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2NvbmZpZy5jZW50ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2plY3Rpb24uY2VudGVyKHRoaXMuX19jb25maWcuY2VudGVyLngsIHRoaXMuX19jb25maWcuY2VudGVyLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLl9fY29uZmlnLnRyYW5zbGF0ZSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLnRyYW5zbGF0ZSh0aGlzLl9fY29uZmlnLnRyYW5zbGF0ZS54LHRoaXMuX19jb25maWcudHJhbnNsYXRlLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2NvbmZpZy5zY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdGlvbi5zY2FsZSh0aGlzLl9fY29uZmlnLnNjYWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9fZW5jb2RpbmcgPSB0aGlzLl9hbmFseXNlRW5jb2RpbmcodGhpcy5fX2RhdGEuZW5jb2RpbmcpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9hbmFseXNlUGF0aFZhbHVlKGRhdGFfYXJyOiBhbnlbXSkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBwb2ludCBvZiBkYXRhX2Fycikge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtOiBJdGVtID0gbmV3IEl0ZW0oKTtcbiAgICAgICAgICAgICAgICAvLyBmb3IobGV0IGtleSBpbiB0aGlzLl9fZW5jb2Rpbmcpe1xuICAgICAgICAgICAgICAgIC8vICAgICBpdGVtW2tleV1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaXRlbS5zdGFydD0gdGhpcy5wcm9qZWN0aW9uLmxvbkxhdDJ4eShwb2ludC5zdGFydC5sb25naXR1ZGUscG9pbnQuc3RhcnQubGF0aXR1ZGUpXG4gICAgICAgICAgICAgICAgaXRlbS5lbmQgPSB0aGlzLnByb2plY3Rpb24ubG9uTGF0Mnh5KHBvaW50LmVuZC5sb25naXR1ZGUscG9pbnQuZW5kLmxhdGl0dWRlKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUgPSBwb2ludDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb2ludHMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FuYWx5c2VFbmNvZGluZyhlbmNvZGU6IGFueSk6IEVuY29kaW5nIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRW5jb2RpbmcoZW5jb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZnJlc2goKTogdm9pZCB7XG4gICAgICAgICAgICBEYXRhTW9kZWwuaWQgPSAwOyB0aGlzLnByb2plY3Rpb24uYmVnaW4oKTtcbiAgICAgICAgICAgIHRoaXMuX19hbmFseXNlR2VvRGF0YSh0aGlzLl9fZGF0YS5nZW8pO1xuICAgICAgICAgICAgdGhpcy5fYW5hbHlzZVBhdGhWYWx1ZSh0aGlzLl9fZGF0YS52YWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0aW9uLmVuZCgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0IGNoYXJ0VHlwZXMoKTogQ2hhcnRUeXBlW10ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jaGFydFR5cGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfX2FuYWx5c2VHZW9EYXRhKGdlb2RhdGE6IGFueSkge1xuICAgICAgICAgICAgbGV0IHR5cGU6IEdlb1R5cGUgPSBVdGlsLmFzRW51bShnZW9kYXRhLnR5cGUsIEdlb1R5cGUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5mZWF0dXJlTGlzdCA9IFtdO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gR2VvVHlwZS5GZWF0dXJlQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlcyA9IGdlb2RhdGEuZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzICE9IG51bGwgJiYgZmVhdHVyZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZjogRmVhdHVyZSA9IG5ldyBGZWF0dXJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmLmlkID0gKCsrRGF0YU1vZGVsLmlkKS50b0ZpeGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9qZWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLnByb2plY3Rpb24gPSB0aGlzLnByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmLnBhcnNlRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZUxpc3QucHVzaChmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGVuY29kaW5nKCk6IEVuY29kaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW5jb2Rpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc2NhbGVQYWlycygpOiB7IGZpbGVkOiBGaWVsZCwgc2NhbGU6IFNjYWxlIH1bXSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NjYWxlUGFpcnM7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0IGNsYXNzIEZsaWdodFBhcnNlcntcbiAgICAgICAgcHJpdmF0ZSBfX2RhdGE6YW55W107XG4gICAgICAgIGdldCBkYXRhKCk6YW55W117XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGE7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgX19haXJwb3J0c0ZpZWxkczpzdHJpbmdbXTtcbiAgICAgICAgcHJpdmF0ZSBfX2FpcmxpbmVzRmllbGRzOnN0cmluZ1tdO1xuICAgICAgICBwcml2YXRlIF9fYWlycG9ydHM6c3RyaW5nW11bXTtcbiAgICAgICAgcHJpdmF0ZSBfX2FpcmxpbmVzOnN0cmluZ1tdW107XG4gICAgICAgIHByaXZhdGUgX19yb3V0ZXM6bnVtYmVyW11bXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0cnVjdG9yKG9yaWdpbmFsZGF0YTphbnkpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9fYWlycG9ydHNGaWVsZHMgPSAgXy5jbG9uZURlZXAob3JpZ2luYWxkYXRhLmFpcnBvcnRzRmllbGRzKTtcbiAgICAgICAgICAgIHRoaXMuX19haXJsaW5lc0ZpZWxkcyA9IF8uY2xvbmVEZWVwKG9yaWdpbmFsZGF0YS5haXJsaW5lRmllbGRzKTtcbiAgICAgICAgICAgIHRoaXMuX19haXJwb3J0cyA9IF8uY2xvbmVEZWVwKG9yaWdpbmFsZGF0YS5haXJwb3J0cyk7XG4gICAgICAgICAgICB0aGlzLl9fYWlybGluZXMgPSBfLmNsb25lRGVlcChvcmlnaW5hbGRhdGEuYWlybGluZXMpO1xuICAgICAgICAgICAgdGhpcy5fX3JvdXRlcyA9IF8uY2xvbmVEZWVwKG9yaWdpbmFsZGF0YS5yb3V0ZXMpO1xuICAgICAgICAgICAgdGhpcy5fYW5hbHlzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX2FuYWx5c2UoKXtcbiAgICAgICAgICAgIGxldCBhaXJsaW5lczphbnlbXSA9IHRoaXMuX19haXJsaW5lcy5tYXAoIChpdGVtKT0+e1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ6YW55ID17fTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9IDA7IGkgPCBpdGVtLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3RoaXMuX19haXJsaW5lc0ZpZWxkc1tpXV09aXRlbVtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGFpcnBvcnRzOmFueVtdID0gdGhpcy5fX2FpcnBvcnRzLm1hcCggKGl0ZW0pPT57XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDphbnkgPXt9O1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaT0gMDsgaSA8IGl0ZW0ubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdGhpcy5fX2FpcnBvcnRzRmllbGRzW2ldXT1pdGVtW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YSAgPSB0aGlzLl9fcm91dGVzLm1hcCgoaXRlbSkgPT57XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA6e3N0YXJ0OmFueSxlbmQ6YW55fT17c3RhcnQ6e30sZW5kOnt9fTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZTphbnkgPSBhaXJsaW5lc1tpdGVtWzBdXTtcbiAgICAgICAgICAgICAgICBsZXQgcG9ydDE6YW55ID0gYWlycG9ydHNbaXRlbVsxXV07XG4gICAgICAgICAgICAgICAgbGV0IHBvcnQyOmFueSA9IGFpcnBvcnRzW2l0ZW1bMl1dO1xuICAgICAgICAgICAgICAgIGZvcihsZXQga2V5IGluIGxpbmUpe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3N0YXJ0J11ba2V5XSA9IGxpbmVba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0WydlbmQnXVtrZXldID0gbGluZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IobGV0IGtleSBpbiBwb3J0MSl7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFsnc3RhcnQnXVtrZXldPSBwb3J0MVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IobGV0IGtleSBpbiBwb3J0Mil7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFsnZW5kJ11ba2V5XT0gcG9ydDJba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcCB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBGcmFtZUxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkZyYW1lTGF5b3V0O1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgZXhwb3J0IGNsYXNzIEdlb1Bsb3QgZXh0ZW5kcyBCYXNlUGxvdCB7XG4gICAgICAgIHByaXZhdGUgX2xheW91dHM6IEJhc2VMYXlvdXRbXSA9IFtdO1xuICAgICAgICBwcml2YXRlIF9fc2hhcGVMaXN0OiBTaGFwZVtdID0gW107XG5cblxuICAgICAgICBwcml2YXRlIF9kYXRhTW9kZWw6IERhdGFNb2RlbCB8IHJlbGF0aW9uLkRhdGFNb2RlbDtcbiAgICAgICAgcHJpdmF0ZSBfc3R5bGU6IFN0eWxlO1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlLmJhY2tncm91bmQ9JyMzMzMnO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IGRhdGFtb2RlbCh2YWx1ZTogRGF0YU1vZGVsIHwgcmVsYXRpb24uRGF0YU1vZGVsKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhTW9kZWwgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgZGF0YW1vZGVsKCk6IERhdGFNb2RlbCB8IHJlbGF0aW9uLkRhdGFNb2RlbCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YU1vZGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfc3RhcnRQdDogUG9pbnRcbiAgICAgICAgcHJpdmF0ZSBfb2Z4OiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIF9vZnk6IG51bWJlciA9IDA7XG4gICAgICAgIHB1YmxpYyBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgICAgICAvLyBpZihldmVudC5hY3Rpb24gPT0gTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX01PVkUpe1xuXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX0RPV046XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0UHQgPSBuZXcgUG9pbnQoZXZlbnQueCwgZXZlbnQueSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfVVA6XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fQ0FOQ0VMOlxuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRQdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX01PVkU6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGFydFB0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZnggPSBldmVudC54IC0gdGhpcy5fc3RhcnRQdC54Oy8vIC0gdGhpcy5kYXRhbW9kZWwuY29uZmlnLnRyYW5zbGF0ZS54O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9meSA9ICAgdGhpcy5fc3RhcnRQdC55LWV2ZW50Lnk7Ly8gLSB0aGlzLmRhdGFtb2RlbC5jb25maWcudHJhbnNsYXRlLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFB0LnggPSBldmVudC54O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRQdC55ID0gZXZlbnQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuX29meCArPSBvZng7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9vZnkgLT0gb2Z5O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YW1vZGVsLnByb2plY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YW1vZGVsLnByb2plY3Rpb24gPSBuZXcgTWVyY2F0b3JQcm9qZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9meCBcIiArIG9meCArIFwiICwgb2Z5IFwiICsgb2Z5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YW1vZGVsLnByb2plY3Rpb24udHJhbnNsYXRlKG9meCwgb2Z5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YW1vZGVsLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMub2Zmc2V0KHRoaXMuX29meCx0aGlzLl9vZnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5jbGVhbkFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0TGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmludmFsaWRhdGUoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9uSW50ZXJjZXB0TW91c2VFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJlZ2luTG9hZGluZ0FuaW1hdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBzdGVwID0gNTAwIC8gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmlldyA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbjogRmxpZ2h0QW5pbWF0aW9uVG8gPSBuZXcgRmxpZ2h0QW5pbWF0aW9uVG8oKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZHVyYXRpb24gPSBNYXRoLnJhbmRvbSgpKjEwMDArMTUwMDtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRvID0gMTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVwZWF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBGbGlnaHRTaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5zdGFydEFuaW1hdGlvbihhbmltYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBzdGVwICogaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAvLyAgICAgbGV0IHc6IG51bWJlciA9IHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAvLyAgICAgbGV0IGg6IG51bWJlciA9IGhlaWdodC5nZXRNZWFzdXJlVmFsdWUoKTtcbiAgICAgICAgLy8gICAgIGxldCByYWRpdXM6IG51bWJlciA9IHcgPCBoID8gdyA6IGg7XG4gICAgICAgIC8vICAgICByZXR1cm4gc3VwZXIub25NZWFzdXJlKG5ldyBNZWFzdXJlU3BlYyhyYWRpdXMsIHdpZHRoLm1vZGUpLCBuZXcgTWVhc3VyZVNwZWMocmFkaXVzLCBoZWlnaHQubW9kZSksIGNhbnZhcyk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkxheW91dChsLCB0LCByLCBiLCBjYW52YXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNsYXlvdXRDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZUxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGdlb2xheW91dDogR2VvTGF5b3V0ID0gbmV3IEdlb0xheW91dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgZ2VvbGF5b3V0LmNvbnZlcnQodGhpcy5fZGF0YU1vZGVsLmZlYXR1cmVMaXN0LFxuICAgICAgICAgICAgICAgICAgICBuZXcgUmVjdChsLCB0LCByLCBiKSwgY2FudmFzKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZUxpc3QgPSB0aGlzLl9fc2hhcGVMaXN0LmNvbmNhdChnZW9sYXlvdXQuc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZXNjYWxlOk1hcE9yZGluYWxTY2FsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5kYXRhbW9kZWwgaW5zdGFuY2VvZiBEYXRhTW9kZWwpe1xuICAgICAgICAgICAgICAgICAgICBuYW1lc2NhbGUgPXRoaXMuZGF0YW1vZGVsLm5hbWVTY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYobmFtZXNjYWxlID09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBuYW1lc2NhbGUgPSBnZW9sYXlvdXQubmFtZVNjYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGF0YU1vZGVsIGluc3RhbmNlb2YgbWFwLkRhdGFNb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0eXBlIG9mIHRoaXMuX2RhdGFNb2RlbC5jaGFydFR5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENoYXJ0VHlwZS5TY2F0dGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhdHRlckxheW91dDogTWFwU2NhdHRlckxheW91dCA9IG5ldyBNYXBTY2F0dGVyTGF5b3V0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlckxheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFNb2RlbC5nZXRTZXJpZXNCeVR5cGUoQ2hhcnRUeXBlLlNjYXR0ZXIpLCB0aGlzLl9kYXRhTW9kZWwucHJvamVjdGlvbiwgbmFtZXNjYWxlLCB0aGlzLl9kYXRhTW9kZWwuZW5jb2RpbmcsIG5ldyBSZWN0KGwsIHQsIHIsIGIpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQoc2NhdHRlckxheW91dC5zaGFwZUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRzLnB1c2goc2NhdHRlckxheW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kYXRhTW9kZWwgaW5zdGFuY2VvZiBtYXAucmVsYXRpb24uRGF0YU1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWxhdGlvbmxheW91dDogcmVsYXRpb24uTWFwUmVsYXRpb25MYXlvdXQgPSBuZXcgcmVsYXRpb24uTWFwUmVsYXRpb25MYXlvdXQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICByZWxhdGlvbmxheW91dC5jb252ZXJ0KHRoaXMuX2RhdGFNb2RlbC5wb2ludHMsIG5ldyBSZWN0KGwsIHQsIHIsIGIpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fc2hhcGVMaXN0ID0gdGhpcy5fX3NoYXBlTGlzdC5jb25jYXQocmVsYXRpb25sYXlvdXQuc2hhcGVMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0cy5wdXNoKHJlbGF0aW9ubGF5b3V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzaGFwZSBvZiB0aGlzLl9fc2hhcGVMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dChzaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZSBpbnN0YW5jZW9mIFBsb3RTaGFwZSAmJiBzaGFwZS5sYWJlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXdXaXRoT3V0UmVMYXlvdXQoc2hhcGUubGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb25EcmF3KGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59IiwiXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcHtcbiAgICBpbXBvcnQgUGFkZGluZyA9IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZztcbiAgICBpbXBvcnQgQWxpZ24gPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduO1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuICAgIGltcG9ydCBBbGlnbkVsZW1lbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduRWxlbWVudDtcbiAgICBpbXBvcnQgTWFyZ2luID0gYW5kcm9pZC5ncmFwaGljcy5NYXJnaW47XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBGcmFtZUxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkZyYW1lTGF5b3V0O1xuICAgIGltcG9ydCBMaW5lYWVyTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0O1xuICAgIGltcG9ydCBSZW5kZXJUeXBlID0gYW5kcm9pZC5ncmFwaGljcy5SZW5kZXJUeXBlO1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBpbXBvcnQgRGV2aWNlID0gYW5kcm9pZC5kZXZpY2UuRGV2aWNlO1xuICAgIGltcG9ydCBPcmllbnRhdGlvbiA9IGFuZHJvaWQuZ3JhcGhpY3MuT3JpZW50YXRpb247XG4gICAgaW1wb3J0IFJvb3RWaWV3ID0gYW5kcm9pZC53aWRnZXQuUm9vdFZpZXc7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG5cbiAgICBleHBvcnQgY2xhc3MgQ2hhcnRMYXlvdXQgZXh0ZW5kcyBSb290VmlldyB7XG5cbiAgICAgICAgcHJpdmF0ZSBfY2hhcnQ6IEdlb1Bsb3Q7XG5cblxuICAgICAgICBwcml2YXRlIF9kYXRhTW9kZWw6IERhdGFNb2RlbHxyZWxhdGlvbi5EYXRhTW9kZWw7XG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5jbGlwID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgRXZlbnRIYW5kbGVyID0gKHB0OiBQb2ludCwgdHlwZXM6IEVsZW1lbnRUeXBlLCBpbmZvOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIiBcIiArIHB0LnRvU3RyaW5nKCkgKyBcIiwgdHlwZSBcIiArIHR5cGVzICsgXCIgLCBpbmZvIFwiICsgaW5mbyk7XG4gICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvd1snRXZlbnRIYW5kbGVyJ10gPSBFdmVudEhhbmRsZXI7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQuYmFja2dyb3VuZD1cIiMzMzNcIjtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIGF0dGFjaEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHJlbmRlclR5cGU6UmVuZGVyVHlwZSxkYXRhbW9kZWw/OiBEYXRhTW9kZWwpIHtcbiAgICAgICAgICAgIHN1cGVyLmF0dGFjaEVsZW1lbnQoZWxlbWVudCxVdGlsLmFzRW51bShyZW5kZXJUeXBlLFJlbmRlclR5cGUpKTtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZyA9IG5ldyBQYWRkaW5nKDIwKTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFNb2RlbCA9IGRhdGFtb2RlbDtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBiZWdpbkxvYWRpbmdBbmltYXRpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFydC5iZWdpbkxvYWRpbmdBbmltYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldENoYXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxWaWV3cygpO1xuICAgICAgICAgICAgdGhpcy5fY2hhcnQgPSBuZXcgR2VvUGxvdCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgICAgICB0aGlzLl9jaGFydC5sYXlvdXRQYXJhbXMud2lkdGggPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgdGhpcy5fY2hhcnQubGF5b3V0UGFyYW1zLmhlaWdodCA9IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ7XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmRhdGFtb2RlbCA9IHRoaXMuX2RhdGFNb2RlbDtcbiAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2NoYXJ0LmdyYXZpdHkgPSBHcmF2aXR5LkNlbnRlcjtcbiAgICAgICAgICAgIHRoaXMuYWRkVmlldyh0aGlzLl9jaGFydCwgMCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaERyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gdGhpcy5sYXlvdXRJbmZvLm91dHRlcnJlY3Q7XG4gICAgICAgICAgICBjYW52YXMuZHJhd1JlY3QocmVjdC5zdGFydFBvaW50LCByZWN0LmVuZFBvaW50LCB0cnVlLCB0aGlzLmJhY2tncm91bmQpO1xuICAgICAgICAgICAgc3VwZXIuZGlzcGF0Y2hEcmF3KGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uTWVhc3VyZSh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25MYXlvdXQobCwgdCwgciwgYiwgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHVibGljIGFkZFZpZXcodmlldzogVmlldywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgICAgICBzdXBlci5hZGRWaWV3KHZpZXcsIGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL25vZGVfbW9kdWxlcy9AdHlwZXMvbG9kYXNoL2luZGV4LmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL25vZGVfbW9kdWxlcy9AdHlwZXMvbWF0aGpzL2luZGV4LmQudHNcIiAvPlxuXG4vLy8vIC8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9pbmRleC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kc3QvYW5kcm9pZC5kLnRzXCIgLz5cblxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9jb25maWcvVmlld0NvbmZpZy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9jb25maWcvY2FydGVzaWFuL0NvbmZpZy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tZXNzYWdlL01lc3NhZ2VLZXkudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbWVzc2FnZS9NZXNzYWdlQ2VudGVyLnRzXCIgLz5cblxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi91dGlsL1V0aWxpdHkudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdXRpbC9Db2xvclV0aWxzLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3V0aWwvUm90YXRlZFJlY3QudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9lbnVtL0FuaW1hdGlvblR5cGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZW51bS9BZ2cudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZW51bS9PcmRlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9lbnVtL1NjYWxlVHlwZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9lbnVtL0RhdGFUeXBlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2VudW0vQ2hhcnRUeXBlLnRzXCIgLz5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZW51bS9BeGlzVHlwZS50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2NhcnRlc2lhbi9WYWx1ZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9jYXJ0ZXNpYW4vRmllbGQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvY2FydGVzaWFuL0ZpbHRlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9jYXJ0ZXNpYW4vRW5jb2RpbmcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvY2FydGVzaWFuL0l0ZW0udHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvY2FydGVzaWFuL1RyYW5zRm9ybS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9jYXJ0ZXNpYW4vU2VyaWVzLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2NhcnRlc2lhbi9EYXRhTW9kZWwudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9oaWVyYXJjaGljYWwvVmFsdWUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvaGllcmFyY2hpY2FsL0ZpZWxkLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2hpZXJhcmNoaWNhbC9JdGVtLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2hpZXJhcmNoaWNhbC9FbmNvZGluZy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9oaWVyYXJjaGljYWwvRGF0YU1vZGVsLnRzXCIgLz5cblxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9zY2FsZS9JU2NhbGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vc2NhbGUvU2NhbGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vc2NhbGUvTGluZWFyU2NhbGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vc2NhbGUvT3JkaW5hbFNjYWxlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3NjYWxlL0xvZ1NjYWxlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3NjYWxlL0NvbG9yU2NhbGUudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L0VsZW1lbnRUeXBlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGVnZW5kL0xlZ2VuZFR5cGUudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2xlZ2VuZC9JTGVnZW5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGVnZW5kL0xpbmVhclNjYWxlTGVnZW5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGVnZW5kL09yZGluYWxTY2FsZUxlZ2VuZC50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGVnZW5kL1Nlcmllc0xlZ2VuZC50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvc2hhcGUvU2hhcGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9zaGFwZS9MYWJsZS50c1wiIC8+XG5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9zaGFwZS9QbG90U2hhcGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9zaGFwZS9CYXJTaGFwZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L3NoYXBlL0N1YmVTaGFwZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L3NoYXBlL1JhZGlhbEJhclNoYXBlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvc2hhcGUvU3VuYnVyc3RTaGFwZS50c1wiIC8+XG5cblxuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvc2hhcGUvU2NhdHRlclNoYXBlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvc2hhcGUvTGluZXNTaGFwZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L3NoYXBlL0FyZWFTaGFwZS50c1wiIC8+XG5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9zaGFwZS9BeGlzTGluZVNoYXBlLnRzXCIgLz5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvQmFzZUxheW91dC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2xheW91dC9jYXJ0ZXNpYW4vQ2FydGVzaWFuQmFzZUxheW91dC50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9DYXJ0ZXNpYW5MYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL0JhckxheW91dC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2xheW91dC9jYXJ0ZXNpYW4vU2NhdHRlckxheW91dC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2xheW91dC9jYXJ0ZXNpYW4vUmFkaWFsQ2FydGVzaWFuTGF5b3V0LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvbGF5b3V0L2NhcnRlc2lhbi9SYWRpYWxCYXJMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL1JhZGlhbExpbmVMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL1JhZGlhbEFyZWFMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL1JhZGlhbFNjYXR0ZXJMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL0xpbmVMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvY2FydGVzaWFuL0FyZWFMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvaGllcmFyY2hpY2FsL0hpZXJhcmNoaWNhbExheW91dC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2xheW91dC9oaWVyYXJjaGljYWwvU3VuYnVyc3RMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9sYXlvdXQvaGllcmFyY2hpY2FsL1RyZWVNYXBMYXlvdXQudHNcIiAvPlxuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvYXhpcy90aWNrcy9UaWNrcy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2F4aXMvdGlja3MvTGluZWFyVGlja3MudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9heGlzL3RpY2tzL0xvZ1RpY2tzLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvYXhpcy90aWNrcy9PcmRpbmFsVGlja3MudHNcIiAvPlxuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvYXhpcy9zaGFwZS9BeGlzU2hhcGUudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2F4aXMvQmFzZUF4aXMudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9heGlzL0xpbmVBeGlzLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvYXhpcy9SYWRpYWxMaW5lQXhpcy50c1wiIC8+XG5cblxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L3Bsb3QvQmFzZVBsb3QudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9wbG90L0NhcnRlc2lhblBsb3QudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9jaGFydC9jYXJ0ZXNpYW4vQ2FydGVzaWFuQ2hhcnQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9CYXNlQ2hhcnRMYXlvdXQudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2NoYXJ0L2NhcnRlc2lhbi9DaGFydExheW91dC50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvcGxvdC9IaWVyYXJjaGljYWxQbG90LnRzXCIgLz5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9jaGFydC9oaWVyYXJjaGljYWwvSGllcmFyY2hpY2FsQ2hhcnQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9jaGFydC9oaWVyYXJjaGljYWwvQ2hhcnRMYXlvdXQudHNcIiAvPlxuLy8vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2NoYXJ0L2hpZXJhcmNoaWNhbC9IaWVyYXJjaGljYWxDaGFydC50c1wiIC8+XG5cbi8vIEhpZXJhcmNoaWNhbENoYXJ0XG5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZ2VvL3BhdGgvU3RyZWFtLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2dlby9wYXRoL1N0cmVhbUZhY3RvcnkudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZ2VvL3BhdGgvRmVhdHVyZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9nZW8vcGF0aC9QYXJzZUZhY3RvcnkudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9nZW8vcHJvamVjdGlvbi9Qcm9qZWN0aW9uLnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZ2VvL3Byb2plY3Rpb24vTWVyY2F0b3JQcm9qZWN0aW9uLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2dlby9wcm9qZWN0aW9uL1Byb2plY3Rpb25GYWN0b3J5LnRzXCIvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZ2VvL0RhdGFNb2RlbC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9tb2RlbC9nZW8vcmVsYXRpb24vRW5jb2RpbmcudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwvZ2VvL3JlbGF0aW9uL0RhdGFNb2RlbC50c1wiIC8+XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL21vZGVsL2dlby9GbGlnaHRQYXJzZXIudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92aWV3L2NoYXJ0L2dlby9HZW9QbG90LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3ZpZXcvY2hhcnQvZ2VvL0NoYXJ0TGF5b3V0LnRzXCIgLz5cblxuXG4iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0e1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBleHBvcnQgY2xhc3MgQ29uZmlnRmFjdG9yeXtcbiAgICAgICAgc3RhdGljIGV4cG9ydENvbmZpZyh2aWV3OlZpZXdHcm91cCl7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3R7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgRmlsbFN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5GaWxsU3R5bGU7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcblxuICAgIGV4cG9ydCBjbGFzcyBHZW9Db25maWd7XG4gICAgICAgIHN5bWJvbFN0eWxlOkZpbGxTdHlsZTtcbiAgICAgICAgbGluZVNlcmllc1N0eWxlOlN0cm9rZVN0eWxlO1xuICAgICAgICBhcmVhU2VyaWVzU3R5bGU6RmlsbFN0eWxlO1xuICAgICAgICBheGlzVGl0bGVGb250OkZvbnQ7XG4gICAgICAgIGF4aXNMYWJlbEZvbnQ6Rm9udDtcbiAgICAgICAgbGVnZW5kVGl0bGVGb250OkZvbnQ7XG4gICAgICAgIGxlZ2VuZExhYmVsRm9udDpGb250O1xuICAgICAgICBjZW50ZXI6UG9pbnQ7XG4gICAgICAgIHNjYWxlOm51bWJlcjtcbiAgICAgICAgdHJhbnNsYXRlOlBvaW50O1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb25maWc6YW55KXtcbiAgICAgICAgICAgIGxldCBnZW86YW55ID0gY29uZmlnLmdlbztcbiAgICAgICAgICAgIGlmKGdlbyAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICBpZihnZW8uY2VudGVyICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbnRlciA9IG5ldyBQb2ludChnZW8uY2VudGVyWzBdLGdlby5jZW50ZXJbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihnZW8udHJhbnNsYXRlICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZSA9IG5ldyBQb2ludChnZW8udHJhbnNsYXRlWzBdLGdlby50cmFuc2xhdGVbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihnZW8uc2NhbGUpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYWxlID0gZ2VvLnNjYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0e1xuICAgIGV4cG9ydCBjbGFzcyBFdmVudEhhbmRsZXJ7XG4gICAgICAgIFxuICAgIH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC50ZXN0LmNhcnRlc2lhbiB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBjbGFzcyBBZ2dyZWdhdGVDYWNoZSB7XG4gICAgICAgIHByaXZhdGUgX19kb21haW5zOiBhbnk7XG4gICAgICAgIHByaXZhdGUgX19hZ2c6QWdnO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGFnZzpBZ2cpe1xuICAgICAgICAgICAgdGhpcy5fX2FnZyA9IGFnZztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1dChrZXk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHRoaXMuX19kb21haW5zW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19kb21haW5zW2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19kb21haW5zW2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0KGtleTogYW55KTogYW55IHtcbiAgICAgICAgICAgIGxldCBsaXN0OiBhbnlbXSA9IHRoaXMuX19kb21haW5zW2tleV07XG4gICAgICAgICAgICBpZiAobGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvdW50OiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBzdW06IG51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtICs9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fX2FnZykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEFnZy5BVkVSQUdFOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bS9jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBBZ2cuQ09VTlQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQWdnLlNVTTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQWdnLk5PTkU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgfVxufSIsIi8vIC8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9iYXNlLnRzXCIgLz5cblxuXG4vLyBuYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcCB7XG4vLyAgICAgJ3VzZSBzdHJpY3QnO1xuLy8gICAgIGltcG9ydCBGaWVsZCA9IGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4uRmllbGQ7XG4vLyAgICAgZXhwb3J0IGNsYXNzIEVuY29kaW5nIHtcbi8vICAgICAgICAgcHVibGljIG5hbWU6RmllbGQ7XG5cbi8vICAgICAgICAgcHVibGljIGNvbG9yOiBGaWVsZDtcbi8vICAgICAgICAgcHVibGljIHNpemU6IEZpZWxkO1xuLy8gICAgICAgICBwdWJsaWMgc2hhcGU6IEZpZWxkO1xuLy8gICAgICAgICBwdWJsaWMgZ3JvdXA6IEZpZWxkO1xuLy8gICAgICAgICBwdWJsaWMgdGV4dDpGaWVsZDtcbi8vICAgICAgICAgcHVibGljIHRvb2x0aXA6RmllbGQ7XG4vLyAgICAgICAgIHB1YmxpYyB2YWx1ZXM6RmllbGRbXTtcbi8vICAgICAgICAgcHVibGljIF9zdGFjazpib29sZWFuID0gZmFsc2U7XG4vLyAgICAgICAgIHB1YmxpYyBfcmFkaWFsOmJvb2xlYW4gPSBmYWxzZTtcbi8vICAgICAgICAgY29uc3RydWN0b3IoZW5jb2Rpbmc6IGFueSkge1xuLy8gICAgICAgICAgICAgaWYoZW5jb2RpbmcubmFtZSl7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5uYW1lICA9IG5ldyBGaWVsZChlbmNvZGluZy5uYW1lLFwibmFtZVwiKTtcbi8vICAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICAgaWYgKGVuY29kaW5nLmNvbG9yKSB7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9IG5ldyBGaWVsZChlbmNvZGluZy5jb2xvciwgJ2NvbG9yJyk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZiAoZW5jb2Rpbmcuc2hhcGUpIHtcbi8vICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlID0gbmV3IEZpZWxkKGVuY29kaW5nLnNoYXBlLCAnc2hhcGUnKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChlbmNvZGluZy5zaXplKSB7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy5zaXplID0gbmV3IEZpZWxkKGVuY29kaW5nLnNpemUsICdzaXplJyk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZihlbmNvZGluZy50b29sdGlwKXtcbi8vICAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSBuZXcgRmllbGQoZW5jb2RpbmcudG9vbHRpcCwndG9vbHRpcCcpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYoZW5jb2RpbmcudGV4dCl7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IEZpZWxkKGVuY29kaW5nLnRleHQsJ3RleHQnKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChlbmNvZGluZy5ncm91cCkge1xuLy8gICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSBuZXcgRmllbGQoZW5jb2RpbmcuZ3JvdXAsICdncm91cCcpO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYgKGVuY29kaW5nLnZhbHVlcyAmJiBlbmNvZGluZy52YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSl7XG4vLyAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMgPVtdO1xuLy8gICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPGVuY29kaW5nLnZhbHVlcy5sZW5ndGg7ICsraSl7XG4vLyAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVuY29kaW5nLnZhbHVlc1tpXTtcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMucHVzaChuZXcgRmllbGQodmFsdWUsdmFsdWUubmFtZSkpO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmKGVuY29kaW5nLnN0YWNrICE9IG51bGwpe1xuLy8gICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrID0gZW5jb2Rpbmcuc3RhY2sgO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYoZW5jb2RpbmcucmFkaWFsICE9IG51bGwpe1xuLy8gICAgICAgICAgICAgICAgIHRoaXMuX3JhZGlhbCA9IGVuY29kaW5nLnJhZGlhbDtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3R7XG5cbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29uc3QgUEFERElORzogbnVtYmVyID0gNTtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBMaW5lYXJMYXlvdXQgPSBhbmRyb2lkLndpZGdldC5MaW5lYXJMYXlvdXQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuXG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuXG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3U3RhdGUgPSBhbmRyb2lkLnZpZXcuVmlld1N0YXRlO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgRGVmYXVsdCA9IGFuZHJvaWQuZGV2aWNlLkRlZmF1bHQ7XG4gICAgaW1wb3J0IE9yaWVudGF0aW9uID0gYW5kcm9pZC5ncmFwaGljcy5PcmllbnRhdGlvbjtcbiAgICBpbXBvcnQgTGF5b3V0UGFyYW1zID0gYW5kcm9pZC52aWV3LkxheW91dFBhcmFtcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgRm9udCA9IGFuZHJvaWQuZ3JhcGhpY3MuRm9udDtcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgSGFuZGxlciA9IGFuZHJvaWQudXRpbC5IYW5kbGVyO1xuICAgIGltcG9ydCBNZXNzYWdlID0gYW5kcm9pZC51dGlsLk1lc3NhZ2U7XG4gICAgaW1wb3J0IEV2ZW50TWVzc2FnZW49IGFuZHJvaWQudGVzdC5FdmVudE1lc3NhZ2U7XG4gICAgZXhwb3J0IGNsYXNzIExlZ2VuZEl0ZW0gZXh0ZW5kcyBWaWV3IHtcblxuICAgICAgICAvLyBwdWJsaWMgc2VyaWVzOiBTZXJpZXM7XG4gICAgICAgIHB1YmxpYyBuYW1lOnN0cmluZztcbiAgICAgICAgcHVibGljIGljb246IEljb247XG4gICAgICAgIHB1YmxpYyBmb250OiBGb250XG4gICAgICAgIHByaXZhdGUgX19mb250UmVjdDogUmVjdDtcbiAgICAgICAgcHJpdmF0ZSBfX2ljb25SZWN0OiBSZWN0O1xuICAgICAgICBwdWJsaWMgZW5hYmxlOmJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBjb25zdHJ1Y3RvcihjOkNvbnRleHQsb3B0aW9uPzp7ZW5hYmxlOmJvb2xlYW59KSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgICAgIHRoaXMuZm9udCA9IERlZmF1bHQuZm9udDtcbiAgICAgICAgICAgIHRoaXMuZm9udC5mb250Q29sb3IgPSAnYmxhY2snO1xuICAgICAgICAgICAgaWYob3B0aW9uICE9IG51bGwgJiYgb3B0aW9uLmVuYWJsZSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSA9IG9wdGlvbi5lbmFibGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXG5cbiAgICAgICAgfVxuXG4gICAgICAgIG9uTWVhc3VyZSh3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZSB7XG4gICAgICAgICAgICBsZXQgdzogbnVtYmVyID0gd2lkdGguZ2V0TWVhc3VyZVZhbHVlKCk7XG4gICAgICAgICAgICBsZXQgaDogbnVtYmVyID0gaGVpZ2h0LmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBuZXcgU2l6ZSgwLCAwKTtcbiAgICAgICAgICAgIHNpemUgPSBjYW52YXMubWVhc3VyZVN0cmluZyh0aGlzLm5hbWUsIHRoaXMuZm9udCk7XG4gICAgICAgICAgICB0aGlzLl9fZm9udFJlY3QgPSBuZXcgUmVjdCgwLCAwLCBzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gICAgICAgICAgICBsZXQgaWNvbnNpemUgPSBzaXplLmhlaWdodCAqIDI7XG4gICAgICAgICAgICB0aGlzLl9faWNvblJlY3QgPSBuZXcgUmVjdCgwLCAwLCBpY29uc2l6ZSwgc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHNpemUud2lkdGggK1BBRERJTkcgKyBpY29uc2l6ZSArIHRoaXMuX3BhZGRpbmcubGVmdFBhZGRpbmcgKyB0aGlzLl9wYWRkaW5nIC5yaWdodFBhZGRpbmc7XG4gICAgICAgICAgICBzaXplLmhlaWdodCArPSAodGhpcy5fcGFkZGluZy50b3BQYWRkaW5nICsgdGhpcy5fcGFkZGluZy5ib3R0b21QYWRkaW5nKTtcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25MYXlvdXQobCwgdCwgciwgYiwgY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuX19mb250UmVjdC50cmFuc2xhdGUobCwgdCt0aGlzLl9wYWRkaW5nLnRvcFBhZGRpbmcpO1xuICAgICAgICAgICAgdGhpcy5fX2ljb25SZWN0LnRyYW5zbGF0ZShsICsgUEFERElORyArIHRoaXMuX19mb250UmVjdC53aWR0aCwgdCt0aGlzLl9wYWRkaW5nLnRvcFBhZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIG9uRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgaWYoIXRoaXMuZW5hYmxlICl7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uLmNvbG9yID0gJ2dyYXknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FudmFzLmRyYXdUZXh0KHRoaXMubmFtZSwgdGhpcy5fX2ZvbnRSZWN0LnN0YXJ0UG9pbnQsIHRoaXMuZm9udCk7XG4gICAgICAgICAgICB0aGlzLmljb24uZHJhdyh0aGlzLl9faWNvblJlY3QsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgb25Nb3VzZUV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW4ge1xuXG4gICAgICAgICAgIGxldCBoYW5kbGVyIDpIYW5kbGVyPSB0aGlzLmdldENvbnRleHQoKS5nZXRBcmdzKEV2ZW50TWVzc2FnZSk7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX0NMSUNLOlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvd1snRXZlbnRIYW5kbGVyJ10obmV3IFBvaW50KGV2ZW50LngsIGV2ZW50LnkpLCBFbGVtZW50VHlwZS5TZXJpZXNMZWdlbmQsIHsgJ3Nlcmllcyc6IHRoaXMuc2VyaWVzLm5hbWUsICdlbmFibGUnOiB0aGlzLnNlcmllcy5lbmFibGUgLGFjdGlvbjpcImVuYWJsZXNlcmllc1wifSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtc2cgOk1lc3NhZ2UgPSBuZXcgTWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgICBtc2cuYXJnc1sndHlwZXMnXT0gRWxlbWVudFR5cGUuU2VyaWVzTGVnZW5kO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSA9ICF0aGlzLmVuYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgbXNnLmFyZ3NbJ2luZm8nXT17ICduYW1lJzogdGhpcy5uYW1lLGFjdGlvbjpcImVuYWJsZVwiLHZhbHVlOnRoaXMuZW5hYmxlfTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5zZW5kTWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PTjpcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zZXJpZXMuc2hvd2xhYmVscyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbmRvd1snRXZlbnRIYW5kbGVyJ10obmV3IFBvaW50KGV2ZW50LngsIGV2ZW50LnkpLCBFbGVtZW50VHlwZS5TZXJpZXNMZWdlbmQsIHsgJ3Nlcmllcyc6IHRoaXMuc2VyaWVzLm5hbWUsICdzaG93bGFiZWwnOiB0aGlzLnNlcmllcy5zaG93bGFiZWxzLGFjdGlvbjpcInNob3dsYWJlbFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PVVQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuc2VyaWVzLnNob3dsYWJlbHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93WydFdmVudEhhbmRsZXInXShuZXcgUG9pbnQoZXZlbnQueCwgZXZlbnQueSksIEVsZW1lbnRUeXBlLlNlcmllc0xlZ2VuZCwgeyAnc2VyaWVzJzogdGhpcy5zZXJpZXMubmFtZSwgJ3Nob3dsYWJlbCc6IHRoaXMuc2VyaWVzLnNob3dsYWJlbHMgLGFjdGlvbjpcInNob3dsYWJlbFwifSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJY29uIHtcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICAgICAgYWJzdHJhY3QgZHJhdyhyZWN0OiBSZWN0LCBjYW52YXM6IENhbnZhcyk6IHZvaWQ7XG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBCYXJJY29uIGV4dGVuZHMgSWNvbiB7XG5cbiAgICAgICAgZHJhdyhyZWN0OiBSZWN0LCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IHN0eWxlOiBTdHlsZSA9IERlZmF1bHQuc3R5bGU7XG4gICAgICAgICAgICBzdHlsZS5iYWNrZ3JvdW5kID0gdGhpcy5jb2xvcjtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3UmVjdChyZWN0LnN0YXJ0UG9pbnQsIHJlY3QuZW5kUG9pbnQsIHRydWUsIHN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgQ2lyY2xlSWNvbiBleHRlbmRzIEljb24ge1xuXG4gICAgICAgIGRyYXcocmVjdDogUmVjdCwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGxldCBzdHlsZTogU3R5bGUgPSBEZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgc3R5bGUuYmFja2dyb3VuZCA9IHRoaXMuY29sb3I7XG4gICAgICAgICAgICBjYW52YXMuZHJhd0FyYyhyZWN0LCAwLCAyICogMTgwLCBzdHlsZSk7XG4gICAgICAgIH1cblxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBBbmltYXRpb24gPSBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbjtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgZXhwb3J0IGNsYXNzIEZsaWdodFNoYXBlIGV4dGVuZHMgUGxvdFNoYXBlIHtcbiAgICAgICAgcHJpdmF0ZSBfX3hzOiBudW1iZXJbXTtcbiAgICAgICAgcHJpdmF0ZSBfX3lzOiBudW1iZXJbXTtcbiAgICAgICAgZ2V0IHhzKCk6IG51bWJlcltdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9feHM7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHlzKCk6IG51bWJlcltdIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9feXM7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBfX3JlbmRlclhzOiBudW1iZXJbXTtcbiAgICAgICAgcHJpdmF0ZSBfX3JlbmRlcllzOiBudW1iZXJbXTtcbiAgICAgICAgc2V0IHJlbmRlclhzKHZhbHVlOiBudW1iZXJbXSkge1xuICAgICAgICAgICAgdGhpcy5fX3JlbmRlclhzID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHJlbmRlcllzKHZhbHVlOiBudW1iZXJbXSkge1xuICAgICAgICAgICAgdGhpcy5fX3JlbmRlcllzID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIExpbmVzUHJvcml0eTogbnVtYmVyID0gUGxvdFNoYXBlLlBSSU9SSVRZICogNDtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0LHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBzdHlsZT86IFN0eWxlLCBzdHJva2VTdHlsZT86IFN0cm9rZVN0eWxlKSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHkgPSArK0xpbmVzU2hhcGUuTGluZXNQcm9yaXR5O1xuICAgICAgICAgICAgdGhpcy5fX3hzID0geHM7XG4gICAgICAgICAgICB0aGlzLl9feXMgPSB5cztcblxuICAgICAgICAgICAgbGV0IGw6IG51bWJlciA9IFV0aWxpdHkubWluKHhzKTtcbiAgICAgICAgICAgIGxldCB0OiBudW1iZXIgPSBVdGlsaXR5Lm1pbih5cyk7XG4gICAgICAgICAgICBsZXQgcjogbnVtYmVyID0gVXRpbGl0eS5tYXgoeHMpO1xuICAgICAgICAgICAgbGV0IGI6IG51bWJlciA9IFV0aWxpdHkubWF4KHlzKTtcbiAgICAgICAgICAgIHRoaXMuX19yZW5kZXJYcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fX3JlbmRlcllzID0gW107XG4gICAgICAgICAgICB0aGlzLmxheW91dEluZm8ucmVzZXQobCwgdCwgciwgYiwgdGhpcy5wYWRkaW5nLCAwKTtcbiAgICAgICAgICAgIHRoaXMuX29sZExheW91dEluZm8gPSB0aGlzLmxheW91dEluZm8uY2xvbmUoKTtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBpZiAoc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gRGVmYXVsdC5zdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICBpZiAoc3Ryb2tlU3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0cm9rZVN0eWxlID0gRGVmYXVsdC5zdHJva2VzdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBzdHJva2VTdHlsZSgpOiBTdHJva2VTdHlsZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHN0cm9rZVN0eWxlKHZhbHVlOiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uRHJhd1NoYXBlKGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICAvLyBjYW52YXMuc2F2ZSgpO1xuICAgICAgICAgICAgLy8gY2FudmFzLmNsaXAodGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdCk7XG4gICAgICAgICAgICAvLyBjYW52YXMuZHJhd0xpbmVzKHRoaXMuX194cyx0aGlzLl9feXMsdGhpcy5fc3Ryb2tlU3R5bGUpO1xuICAgICAgICAgICAgLy8gY2FudmFzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FudmFzLmRyYXdMaW5lcyh0aGlzLl9fcmVuZGVyWHMsIHRoaXMuX19yZW5kZXJZcywgdGhpcy5fc3Ryb2tlU3R5bGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsZXQgY29udGV4dCA9IGNhbnZhcy5jYW52YXM7XG4gICAgICAgICAgICAvLyBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMDUpJztcbiAgICAgICAgICAgIC8vIGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cdFx0XHQvLyBjb250ZXh0LmZpbGxTdHlsZSA9ICcjYWM2MzE4Jztcblx0XHRcdC8vIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI2FjNjMxOCc7XG5cdFx0XHQvLyBjb250ZXh0LmxpbmVXaWR0aCA9IDY7XG5cdFx0XHQvLyBjb250ZXh0Lm1vdmVUbyh0aGlzLl9fcmVuZGVyWHNbMF0sIHRoaXMuX19yZW5kZXJZc1swXSk7XG5cdFx0XHQvLyBjb250ZXh0LmxpbmVUbyh0aGlzLl9fcmVuZGVyWHNbMV0sIHRoaXMuX19yZW5kZXJZc1sxXSk7XG5cdFx0XHQvLyBjb250ZXh0LnN0cm9rZSgpO1xuXHRcdFx0Ly8gY29udGV4dC5hcmModGhpcy5fX3JlbmRlclhzWzBdLCB0aGlzLl9fcmVuZGVyWXNbMF0sIDMsIDAsIE1hdGguUEkqMiwgdHJ1ZSk7XG5cdFx0XHQvLyBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgRmxpZ2h0QW5pbWF0aW9uVG8gZXh0ZW5kcyBBbmltYXRpb24ge1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZWFzZSA9IG5ldyBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbkVhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseVRyYW5zZm9ybWF0aW9uKGludGVycG9sYXRlZFRpbWU6IG51bWJlciwgY2FudmFzOiBDYW52YXMsIHZpZXc6IFZpZXcpIHtcbiAgICAgICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgRmxpZ2h0U2hhcGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgeHM6IG51bWJlcltdID0gdmlldy54cztcbiAgICAgICAgICAgICAgICBsZXQgeXM6IG51bWJlcltdID0gdmlldy55cztcbiAgICAgICAgICAgICAgICBsZXQgbGFzdDogbnVtYmVyID0geHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImludGVycG9sYXRlZCBUaW1lICBcIisgaW50ZXJwb2xhdGVkVGltZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdHhzOiBudW1iZXJbXSA9IFsoeHNbbGFzdF0gLSB4c1swXSkgKiBpbnRlcnBvbGF0ZWRUaW1lICsgeHNbMF0sICh4c1tsYXN0XSAtIHhzWzBdKSAqIChpbnRlcnBvbGF0ZWRUaW1lICsgMC4xKSArIHhzWzBdXVxuICAgICAgICAgICAgICAgIGxldCB0eXM6IG51bWJlcltdID0gWyh5c1tsYXN0XSAtIHlzWzBdKSAqIGludGVycG9sYXRlZFRpbWUgKyB5c1swXSwgKHlzW2xhc3RdIC0geXNbMF0pICogKGludGVycG9sYXRlZFRpbWUgKyAwLjEpICsgeXNbMF1dXG4gICAgICAgICAgICAgICAgdmlldy5yZW5kZXJYcyA9IHR4cztcbiAgICAgICAgICAgICAgICB2aWV3LnJlbmRlcllzID0gdHlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25TdGFydEFuaWFtdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkVuZEFuaW1hdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJvbkVuZEFuaW1hdGlvbiBcIik7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgRmxpZ2h0QW5pbWF0aW9uQmFjayBleHRlbmRzIEFuaW1hdGlvbiB7XG5cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5lYXNlID0gbmV3IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uRWFzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5VHJhbnNmb3JtYXRpb24oaW50ZXJwb2xhdGVkVGltZTogbnVtYmVyLCBjYW52YXM6IENhbnZhcywgdmlldzogVmlldykge1xuICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBGbGlnaHRTaGFwZSkge1xuICAgICAgICAgICAgICAgIGxldCB4czogbnVtYmVyW10gPSB2aWV3LnhzO1xuICAgICAgICAgICAgICAgIGxldCB5czogbnVtYmVyW10gPSB2aWV3LnlzO1xuICAgICAgICAgICAgICAgIGxldCBsYXN0OiBudW1iZXIgPSB4cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW50ZXJwb2xhdGVkIFRpbWUgIFwiKyBpbnRlcnBvbGF0ZWRUaW1lKTtcbiAgICAgICAgICAgICAgICBsZXQgdHhzOiBudW1iZXJbXSA9IFt4c1tsYXN0XSAtICh4c1tsYXN0XSAtIHhzWzBdKSAqIChpbnRlcnBvbGF0ZWRUaW1lKSwgeHNbbGFzdF0gLSAoeHNbbGFzdF0gLSB4c1swXSkgKiAoaW50ZXJwb2xhdGVkVGltZSArIDAuMSldO1xuICAgICAgICAgICAgICAgIGxldCB0eXM6IG51bWJlcltdID0gW3lzW2xhc3RdIC0gKHlzW2xhc3RdIC0geXNbMF0pICogKGludGVycG9sYXRlZFRpbWUpLCB5c1tsYXN0XSAtICh5c1tsYXN0XSAtIHlzWzBdKSAqIChpbnRlcnBvbGF0ZWRUaW1lICsgMC4xKV07XG4gICAgICAgICAgICAgICAgdmlldy5yZW5kZXJYcyA9IHR4cztcbiAgICAgICAgICAgICAgICB2aWV3LnJlbmRlcllzID0gdHlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25TdGFydEFuaWFtdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5vbkVuZEFuaW1hdGlvbihjYW52YXMsIHZpZXcpO1xuICAgICAgICB9XG5cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vYmFzZS50c1wiIC8+XG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld1N0YXRlID0gYW5kcm9pZC52aWV3LlZpZXdTdGF0ZTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBBbmltYXRpb24gPSBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFuaW1hdGlvbjtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgQ29udGV4dCA9IGFuZHJvaWQuYXBwLkNvbnRleHQ7XG4gICAgaW1wb3J0IFV0aWwgPSBhbmRyb2lkLmdyYXBoaWNzLlV0aWw7XG4gICAgZXhwb3J0IGNsYXNzIE1hcEl0ZW1TaGFwZSBleHRlbmRzIFBsb3RTaGFwZSB7XG4gICAgICAgIHByaXZhdGUgX194czogbnVtYmVyW107XG4gICAgICAgIHByaXZhdGUgX195czogbnVtYmVyW107XG4gICAgICAgIHByaXZhdGUgX19jZW50ZXI6UG9pbnQ7XG4gICAgICAgIHByaXZhdGUgX19hcmVhIDpudW1iZXI7XG4gICAgICAgIGdldCBjZW50ZXIoKTpQb2ludHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIHNldCBjZW50ZXIodmFsdWU6UG9pbnQpe1xuICAgICAgICAgICAgdGhpcy5fX2NlbnRlciA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGdldCBhcmVhKCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19hcmVhO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yKGM6Q29udGV4dCx4czogbnVtYmVyW10sIHlzOiBudW1iZXJbXSwgc3R5bGU/OiBTdHlsZSwgc3Ryb2tlU3R5bGU/OiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5ID0gU2hhcGUuUFJJT1JJVFkgKyAxO1xuICAgICAgICAgICAgdGhpcy5fX3hzID0geHM7XG4gICAgICAgICAgICB0aGlzLl9feXMgPSB5cztcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBsZXQgbDogbnVtYmVyID0gTWF0aC5taW4oLi4ueHMpO1xuICAgICAgICAgICAgbGV0IHQ6IG51bWJlciA9IE1hdGgubWluKC4uLnlzKTtcbiAgICAgICAgICAgIGxldCByOiBudW1iZXIgPSBNYXRoLm1heCguLi54cyk7XG4gICAgICAgICAgICBsZXQgYjogbnVtYmVyID0gTWF0aC5tYXgoLi4ueXMpO1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGwsIHQsIHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB0aGlzLl9vbGRMYXlvdXRJbmZvID0gdGhpcy5sYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICB0aGlzLl9fY2VudGVyID0gVXRpbC5DZW50ZXJPZlBvbHlnb24odGhpcy5fX3hzLHRoaXMuX195cyk7XG4gICAgICAgICAgICB0aGlzLl9fYXJlYSA9IFV0aWwuQXJlYSh0aGlzLl9feHMsdGhpcy5fX3lzKTtcbiAgICAgICAgICAgIGlmIChzdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGUgPSBEZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBzdHJva2VTdHlsZTtcbiAgICAgICAgICAgIGlmIChzdHJva2VTdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSBEZWZhdWx0LnN0cm9rZXN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHN0cm9rZVN0eWxlKCk6IFN0cm9rZVN0eWxlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHJva2VTdHlsZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc3Ryb2tlU3R5bGUodmFsdWU6IFN0cm9rZVN0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdHJva2VTdHlsZSA9IHZhbHVlO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIG9uRHJhd1NoYXBlKGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBjYW52YXMuc2F2ZSgpO1xuXG4gICAgICAgICAgICBjYW52YXMuY2xpcCh0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0KTtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3UG9seWdvbih0aGlzLl9feHMsdGhpcy5fX3lzLHRoaXMuc3R5bGUpO1xuICAgICAgICAgICAgY2FudmFzLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgb25Nb3VzZUV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PTjpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJtb3VzZSBvbiBcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm1vdXNlIG91dCBcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX01PVkU6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGV4cG9ydCBjbGFzcyBNYXBJdGVtU2hhcGVBbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb24ge1xuICAgIC8vICAgICBwcml2YXRlIHJlY3Q6IFJlY3Q7XG4gICAgLy8gICAgIGNvbnN0cnVjdG9yKHJlY3Q6IFJlY3QpIHtcbiAgICAvLyAgICAgICAgIHN1cGVyKCk7XG4gICAgLy8gICAgICAgICB0aGlzLmVhc2UgPSBuZXcgYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb25FYXNlKCk7XG4gICAgLy8gICAgIH1cblxuXG4gICAgLy8gICAgIGFwcGx5VHJhbnNmb3JtYXRpb24oaW50ZXJwb2xhdGVkVGltZTogbnVtYmVyLCBjYW52YXM6IENhbnZhcywgdmlldzogVmlldykge1xuXG4gICAgLy8gICAgICAgICBsZXQgc2NhbGU6IG51bWJlciA9IHRoaXMuZnJvbSArICh0aGlzLnRvIC0gdGhpcy5mcm9tKSAqIGludGVycG9sYXRlZFRpbWU7XG4gICAgLy8gICAgICAgICBsZXQgcmVjdDogUmVjdCA9IHRoaXMucmVjdC5jbG9uZSgpO1xuICAgIC8vICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC53aWR0aCA9IHRoaXMucmVjdC53aWR0aCAqIHNjYWxlO1xuXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgb25TdGFydEFuaWFtdGlvbihjYW52YXM6IENhbnZhcywgdmlldzogVmlldyk6IHZvaWQge1xuICAgIC8vICAgICAgICAgdGhpcy5yZWN0ID0gdmlldy5sYXlvdXRJbmZvLmlubmVycmVjdC5jbG9uZSgpO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIG9uRW5kQW5pbWF0aW9uKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgLy8gICAgIH1cblxuXG4gICAgLy8gfVxufVxuIiwibmFtZXNwYWNlIGFuZHJvaWQudGVzdHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFRleHRWaWV3ID0gYW5kcm9pZC53aWRnZXQuVGV4dFZpZXc7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGV4cG9ydCBjbGFzcyBUb29sVGlwcyBleHRlbmRzIFRleHRWaWV3e1xuICAgICAgICBvbkRyYXcoY2FudmFzOkNhbnZhcyk6dm9pZHtcblxuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi9iYXNlLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudGVzdC5tYXAge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNlcmllcyA9IGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4uU2VyaWVzO1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGV4cG9ydCBjbGFzcyBHZW9MYXlvdXQgZXh0ZW5kcyBCYXNlTGF5b3V0IHtcbiAgICAgICAgcHJpdmF0ZSBfX25hbWVzY2FsZTpNYXBPcmRpbmFsU2NhbGU7XG4gICAgICAgIGNvbnN0cnVjdG9yKGM6Q29udGV4dCkge1xuICAgICAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgICAgICB0aGlzLl9fbmFtZXNjYWxlID0gbmV3IE1hcE9yZGluYWxTY2FsZShcIm5hbWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29udmVydChmZWF0dXJlbGlzdDogRmVhdHVyZVtdLCByZWN0OiBSZWN0LCBjYW52YXM6IENhbnZhcyk6IFBsb3RTaGFwZVtdIHtcbiAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGZlYXR1cmVsaXN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IG1heDpNYXBJdGVtU2hhcGUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgZm9yKGxldCBzdHJlYW0gb2YgZmVhdHVyZS5zdHJlYW1zKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50bGlzdDpQb2ludExpc3QgPSBzdHJlYW0ucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFwc2hhcGUgOk1hcEl0ZW1TaGFwZSA9bmV3IE1hcEl0ZW1TaGFwZSh0aGlzLmNvbnRleHQscG9pbnRsaXN0LnhzLHBvaW50bGlzdC55cyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZihtYXggPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBtYXBzaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZihtYXguYXJlYSA8IG1hcHNoYXBlLmFyZWEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gbWFwc2hhcGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbWFwc2hhcGUuc3R5bGUuYmFja2dyb3VuZCA9IENvbG9yVXRpbHMuaW5kZXhDb2xvcihwYXJzZUludChmZWF0dXJlLmlkKSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcHNoYXBlLnN0eWxlLmJhY2tncm91bmQgPVwiIzAwMFwiO1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXBzaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID1cbiAgICAgICAgICAgICAgICAgICAgbWFwc2hhcGUuc3R5bGUuc3Ryb2tlU3R5bGUuc3Ryb2tlQ29sb3IgPScjY2JjYmNiJztcbiAgICAgICAgICAgICAgICAgICAgLy8gJ2dyYXknXG4gICAgICAgICAgICAgICAgICAgIG1hcHNoYXBlLnN0eWxlLnN0cm9rZVN0eWxlLnN0cm9rZVdpZHRoID0xO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlTGlzdC5wdXNoKG1hcHNoYXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYobWF4ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fbmFtZXNjYWxlLmRvbWFpbnMucHVzaChmZWF0dXJlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fbmFtZXNjYWxlLnJhbmdlcy5wdXNoKG1heC5jZW50ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX19uYW1lc2NhbGUucmVmcmVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hhcGVMaXN0O1xuICAgICAgICB9XG4gICAgICAgIGdldCBuYW1lU2NhbGUoKTpNYXBPcmRpbmFsU2NhbGV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX25hbWVzY2FsZTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwIHtcbiAgICAndXNlIHN0cmljdCc7XG5cblxuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3R5bGU7XG4gICAgaW1wb3J0IERlZmF1bHQgPSBhbmRyb2lkLmRldmljZS5EZWZhdWx0O1xuICAgIGltcG9ydCBTdHJva2VTdHlsZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU3Ryb2tlU3R5bGU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBTZXJpZXMgPSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuLlNlcmllcztcbiAgICBpbXBvcnQgRW5jb2RpbmcgPSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuLkVuY29kaW5nO1xuICAgIGV4cG9ydCBjbGFzcyBNYXBCYXNlTGF5b3V0IGV4dGVuZHMgQmFzZUxheW91dCB7XG4gICAgICAgIHByb3RlY3RlZCBfc2VyaWVzbGlzdDpTZXJpZXNbXTtcbiAgICAgICAgcHJvdGVjdGVkIF9yZWN0OiBSZWN0ID0gbnVsbDtcbiAgICAgICAgcHJvdGVjdGVkIF9lbmNvZGluZzogRW5jb2Rpbmc7XG4gICAgICAgIHByb3RlY3RlZCBfbmFtZVNjYWxlOk1hcE9yZGluYWxTY2FsZTtcbiAgICAgICAgcHJvdGVjdGVkIF9wcm9qZWN0aW9uOlByb2plY3Rpb247XG4gICAgICAgIGNvbnZlcnQoc2VyaWVzbGlzdDogU2VyaWVzW10scHJvamVjdGlvbjpQcm9qZWN0aW9uLG5hbWVTY2FsZTpNYXBPcmRpbmFsU2NhbGUsIGVuY29kaW5nOiBFbmNvZGluZywgcmVjdDogUmVjdCwgY2FudmFzOiBDYW52YXMpOiBQbG90U2hhcGVbXSB7XG4gICAgICAgICAgICB0aGlzLl9fc2hhcGVsaXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLl9zZXJpZXNsaXN0PVtdO1xuICAgICAgICAgICAgdGhpcy5fcHJvamVjdGlvbiA9IHByb2plY3Rpb247XG4gICAgICAgICAgICB0aGlzLl9uYW1lU2NhbGUgPSBuYW1lU2NhbGU7XG4gICAgICAgICAgICBmb3IobGV0IHNlciBvZiBzZXJpZXNsaXN0KXtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXJpZXNsaXN0LnB1c2goc2VyLmNsb25lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICAgICAgICAgIHRoaXMuX3JlY3QgPSByZWN0O1xuICAgICAgICAgICAgZm9yKGxldCBzZXIgb2YgdGhpcy5fc2VyaWVzbGlzdCl7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0U2VyaWVzKHNlcixuYW1lU2NhbGUsY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fc2hhcGVsaXN0O1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIF9sYXlvdXRTZXJpZXMoc2VyOlNlcmllcyxuYW1lU2NhbGU6TWFwT3JkaW5hbFNjYWxlLGNhbnZhczpDYW52YXMpe1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQudGVzdC5tYXB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydCBjbGFzcyBNYXBPcmRpbmFsU2NhbGUgZXh0ZW5kcyBPcmRpbmFsU2NhbGV7XG4gICAgICAgIGdldFNjYWxlVmFsdWUodjphbnkpe1xuICAgICAgICAgICAgbGV0IGluZGV4Om51bWJlciA9IHRoaXMuX2RvbWFpbkNhY2hlW3ZdO1xuICAgICAgICAgICAgaWYoaXNOYU4oaW5kZXgpKXtcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX3Jhbmdlc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHJhbmdlcygpOmFueVtde1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19yYW5nZXM7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL2Jhc2UudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC50ZXN0Lm1hcHtcblxuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFNlcmllcyA9IGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4uU2VyaWVzO1xuICAgIGltcG9ydCBWYWx1ZSA9IGFuZHJvaWQudGVzdC5jYXJ0ZXNpYW4uVmFsdWU7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBleHBvcnQgY2xhc3MgTWFwU2NhdHRlckxheW91dCBleHRlbmRzIE1hcEJhc2VMYXlvdXR7XG4gICAgICAgXG4gICAgICAgIHByb3RlY3RlZCBfbGF5b3V0U2VyaWVzKHNlcmllczpTZXJpZXMsbmFtZVNjYWxlOk1hcE9yZGluYWxTY2FsZSxjYW52YXM6Q2FudmFzKTp2b2lke1xuICAgICAgICAgICAgbGV0IHNpemUgPSB0aGlzLl9zZXJpZXNsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3gnKTtcbiAgICAgICAgICAgIGxldCB5U2NhbGU6U2NhbGUgPSBzZXJpZXMuZ2V0U2NhbGUoJ3knKTtcbiAgICAgICAgICAgIGxldCBjb2xvclNjYWxlOlNjYWxlID0gc2VyaWVzLmdldFNjYWxlKCdjb2xvcicpO1xuICAgICAgICAgICAgbGV0IHNpemVTY2FsZTpTY2FsZSA9IHNlcmllcy5nZXRTY2FsZSgnc2l6ZScpO1xuICAgICAgICAgICAgbGV0IGRlZmF1bHRjb2xvcjpzdHJpbmcgPUNvbG9yVXRpbHMuaW5kZXhDb2xvcihzZXJpZXMuaW5kZXgpO1xuICAgICAgICAgICAgbGV0IGNvbG9yQXJyYXk6c3RyaW5nW109W107XG4gICAgICAgICAgICBpZihjb2xvclNjYWxlIGluc3RhbmNlb2YgT3JkaW5hbFNjYWxlKXtcbiAgICAgICAgICAgICAgICBjb2xvclNjYWxlID0gY29sb3JTY2FsZS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIGNvbG9yQXJyYXkgPSBDb2xvclV0aWxzLmdyYWRpZW50Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbG9yU2NhbGUucmFuZ2UoWzAsKDxPcmRpbmFsU2NhbGU+Y29sb3JTY2FsZSkuZG9tYWlucy5sZW5ndGgtMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlZmF1bHRzaXplOm51bWJlciA9IDEwO1xuICAgICAgICAgICAgZm9yKGxldCBwdCBvZiBzZXJpZXMucG9pbnRzKXtcbiAgICAgICAgICAgICAgICBpZiggcHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvclZhbHVlIDpWYWx1ZSA9IHB0LmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hhcGVWYWx1ZTpWYWx1ZSA9IHB0LnNoYXBlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZVZhbHVlIDpWYWx1ZT0gcHQuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvb2x0aXA6VmFsdWUgPSBwdC50b29sdGlwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA6VmFsdWUgPSBwdC50ZXh0O1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbmFtZTpWYWx1ZT0gcHQueDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWU6VmFsdWUgPSBwdC5nZW9wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50OlBvaW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYocHQuZ2VvcG9zaXRpb24uc2NhbGVUeXBlID09PSBTY2FsZVR5cGUuTGF0TG9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ID0gdGhpcy5fcHJvamVjdGlvbi5sb25MYXQyeHkocHQuZ2VvcG9zaXRpb24udmFsdWVbMF0scHQuZ2VvcG9zaXRpb24udmFsdWVbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ID0gbmFtZVNjYWxlLmdldFNjYWxlVmFsdWUocHQuZ2VvcG9zaXRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBzIDpudW1iZXIgPSBzaXplU2NhbGUuZ2V0U2NhbGVWYWx1ZShzaXplVmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZihpc05hTihzKSB8fCBzID09IG51bGwgfHwgcyA8PTApe1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGRlZmF1bHRzaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvciA9IGRlZmF1bHRjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29sb3JTY2FsZSBpbnN0YW5jZW9mIE9yZGluYWxTY2FsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3JpbmRleCA9IGNvbG9yU2NhbGUuZ2V0U2NhbGVWYWx1ZShjb2xvclZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yQXJyYXlbY29sb3JpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKGNvbG9yU2NhbGUgaW5zdGFuY2VvZiBMaW5lYXJTY2FsZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9yVXRpbHMuZ2V0Q29sb3IoY29sb3JTY2FsZS5zdGFydFBvc2l0aW9uLGNvbG9yU2NhbGUuZW5kUG9zaXRpb24sY29sb3JWYWx1ZS52YWx1ZSxjb2xvclNjYWxlLm1pbixjb2xvclNjYWxlLm1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYXR0ZXJTaGFwZSA6U2NhdHRlclNoYXBlID0gbmV3IFNjYXR0ZXJTaGFwZSh0aGlzLmNvbnRleHQscG9pbnQueC1zLzIscG9pbnQueS1zLzIscyxzLERlZmF1bHQuc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICBpZihjb2xvciAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5zdHlsZS5iYWNrZ3JvdW5kID0gZGVmYXVsdGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlcmllcy5zaG93bGFiZWxzICYmIHRleHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dHN0ciA6c3RyaW5nPSB0ZXh0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvbnQgPSBEZWZhdWx0LmZvbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LmZvbnRDb2xvcj0nYmxhY2snO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC5mb250U2l6ZT0xMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0c2l6ZSA6U2l6ZSA9Y2FudmFzLm1lYXN1cmVTdHJpbmcodGV4dHN0cixmb250KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9dGV4dHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gdGV4dHNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlclNoYXBlLmxhYmVsID0gbmV3IExhYmVsKHRoaXMuY29udGV4dCx0ZXh0c3RyLHBvaW50LngscG9pbnQueS1zLzItMyx3aWR0aCxoZWlnaHQsMCwzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYXR0ZXJTaGFwZS5sYWJlbC5iYWNrZ3JvdW5kID1EZWZhdWx0LnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhdHRlclNoYXBlLmxhYmVsLl9mb250PWZvbnQ7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUubGFiZWwuYmFja2dyb3VuZC5zdHJva2VTdHlsZS5zdHJva2VDb2xvcj0nZ3JheSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2F0dGVyU2hhcGUubGFiZWwuYmFja2dyb3VuZC5iYWNrZ3JvdW5kPSdsaWdodGJsdWUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19zaGFwZWxpc3QucHVzaChzY2F0dGVyU2hhcGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vYmFzZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnRlc3QubWFwLnJlbGF0aW9uIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBTZXJpZXMgPSBhbmRyb2lkLnRlc3QuY2FydGVzaWFuLlNlcmllcztcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBleHBvcnQgY2xhc3MgTWFwUmVsYXRpb25MYXlvdXQgZXh0ZW5kcyBCYXNlTGF5b3V0IHtcbiAgICAgICAgY29uc3RydWN0b3IoYzpDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgfVxuICAgICAgICBjb252ZXJ0KGl0ZW1zOiBJdGVtW10sIHJlY3Q6IFJlY3QsIGNhbnZhczogQ2FudmFzKTogUGxvdFNoYXBlW10ge1xuICAgICAgICAgICAgdGhpcy5fX3NoYXBlbGlzdC5sZW5ndGggPSAwO1xuICAgICAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWF4OkZsaWdodFNoYXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgc2hhcGUgOkZsaWdodFNoYXBlPW5ldyBGbGlnaHRTaGFwZSh0aGlzLmNvbnRleHQsW2l0ZW0uc3RhcnQueCxpdGVtLmVuZC54XSxbaXRlbS5zdGFydC55LGl0ZW0uZW5kLnldKTtcblxuICAgICAgICAgICAgICAgICAgICBzaGFwZS5zdHJva2VTdHlsZS5zdHJva2VDb2xvciA9J3JlZCc7XG4gICAgICAgICAgICAgICAgICAgIC8vICdncmF5J1xuICAgICAgICAgICAgICAgICAgICBzaGFwZS5zdHJva2VTdHlsZS5zdHJva2VXaWR0aCA9MC41O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlTGlzdC5wdXNoKHNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYXBlTGlzdDtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=
